<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[curl学习]]></title>
      <url>/2017/12/28/curl%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>curl命令是一个功能强大的网络工具，它能够通过http、ftp等方式下载文件，也能够上传文件，同时支持HTTPS等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。其实curl远不止前面所说的那些功能，大家可以通过man curl阅读手册页获取更多的信息。类似的工具还有wget。curl命令使用了libcurl库来实现，libcurl库常用在C程序中用来处理HTTP请求，curlpp是libcurl的一个C++封装，这几个东西可以用在抓取网页、网络监控等方面的开发，而curl命令可以帮助来解决开发过程中遇到的问题。</p>
</blockquote>
<a id="more"></a>
<h2 id="下载单个文件，默认将输出打印到标准输出中-STDOUT-中"><a href="#下载单个文件，默认将输出打印到标准输出中-STDOUT-中" class="headerlink" title="下载单个文件，默认将输出打印到标准输出中(STDOUT)中"></a>下载单个文件，默认将输出打印到标准输出中(STDOUT)中</h2><h2 id="通过-o-O选项保存下载的文件到指定的文件中"><a href="#通过-o-O选项保存下载的文件到指定的文件中" class="headerlink" title="通过-o/-O选项保存下载的文件到指定的文件中"></a>通过-o/-O选项保存下载的文件到指定的文件中</h2><pre><code>-o：将文件保存为命令行中指定的文件名的文件中
-O：使用URL中默认的文件名保存文件到本地
</code></pre><pre><code># 将文件下载到本地并命名为mygettext.html
curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html
# 将文件保存到本地并命名为gettext.html
curl -O http://www.gnu.org/software/gettext/manual/gettext.html
</code></pre><p>同样可以使用转向字符”&gt;”对输出进行转向输出</p>
<h2 id="同时获取多个文件"><a href="#同时获取多个文件" class="headerlink" title="同时获取多个文件"></a>同时获取多个文件</h2><pre><code>curl -O URL1 -O URL2
</code></pre><p>若同时从同一站点下载多个文件时，curl会尝试重用链接(connection)。</p>
<p>通过-L选项进行重定向<br>默认情况下CURL不会发送HTTP Location headers(重定向).当一个被请求页面移动到另一个站点时，会发送一个HTTP Loaction header作为请求，然后将请求重定向到新的地址上。<br>例如：访问google.com时，会自动将地址重定向到google.com.hk上。</p>
<pre><code class="html">curl http://www.google.com
&lt;HTML&gt;
&lt;HEAD&gt;
    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
    &lt;TITLE&gt;302 Moved&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
    &lt;H1&gt;302 Moved&lt;/H1&gt;
    The document has moved
    &lt;A HREF=&quot;http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/&amp;amp;ust=1379402837567135amp;usg=AFQjCNF3o7umf3jyJpNDPuF7KTibavE4aA&quot;&gt;here&lt;/A&gt;.
&lt;/BODY&gt;
&lt;/HTML&gt;
</code></pre>
<p>上述输出说明所请求的档案被转移到了<a href="http://www.google.com.hk。" target="_blank" rel="external">http://www.google.com.hk。</a></p>
<p>这是可以通过使用-L选项进行强制重定向</p>
<pre><code># 让curl使用地址重定向，此时会查询google.com.hk站点
curl -L http://www.google.com
</code></pre><h2 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h2><p>通过使用-C选项可对大文件使用断点续传功能，如：</p>
<pre><code># 当文件在下载完成之前结束该进程
$ curl -O http://www.gnu.org/software/gettext/manual/gettext.html
##############             20.1%
# 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载
curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html
###############            21.1%
</code></pre><h2 id="对CURL使用网络限速"><a href="#对CURL使用网络限速" class="headerlink" title="对CURL使用网络限速"></a>对CURL使用网络限速</h2><p>通过<code>--limit-rate</code>选项对CURL的最大网络使用进行限制</p>
<pre><code># 下载速度最大不会超过1000B/second
curl --limit-rate 1000B -O http://www.gnu.org/software/gettext/manual/gettext.html
</code></pre><h2 id="下载指定时间内修改过的文件"><a href="#下载指定时间内修改过的文件" class="headerlink" title="下载指定时间内修改过的文件"></a>下载指定时间内修改过的文件</h2><p>当下载一个文件时，可对该文件的最后修改日期进行判断，如果该文件在指定日期内修改过，就进行下载，否则不下载。<br>该功能可通过使用-z选项来实现：</p>
<pre><code># 若yy.html文件在2011/12/21之后有过更新才会进行下载
curl -z 21-Dec-11 http://www.example.com/yy.html
</code></pre><h2 id="CURL授权"><a href="#CURL授权" class="headerlink" title="CURL授权"></a>CURL授权</h2><p>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权</p>
<pre><code>curl -u username:password URL
# 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露
curl -u username URL
</code></pre><h2 id="从FTP服务器下载文件"><a href="#从FTP服务器下载文件" class="headerlink" title="从FTP服务器下载文件"></a>从FTP服务器下载文件</h2><p>CURL同样支持FTP下载，若在url中指定的是某个文件路径而非具体的某个要下载的文件名，CURL则会列出该目录下的所有文件名而并非下载该目录下的所有文件</p>
<pre><code># 列出public_html下的所有文件夹和文件
curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/
# 下载xss.php文件
curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php
</code></pre><h2 id="上传文件到FTP服务器"><a href="#上传文件到FTP服务器" class="headerlink" title="上传文件到FTP服务器"></a>上传文件到FTP服务器</h2><p>通过 -T 选项可将指定的本地文件上传到FTP服务器上</p>
<pre><code># 将myfile.txt文件上传到服务器
curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com
# 同时上传多个文件
curl -u ftpuser:ftppass -T &quot;{file1,file2}&quot; ftp://ftp.testserver.com
# 从标准输入获取内容保存到服务器指定的文件中
curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt
</code></pre><h2 id="获取更多信息"><a href="#获取更多信息" class="headerlink" title="获取更多信息"></a>获取更多信息</h2><p>通过使用 -v 和 -trace获取更多的链接信息</p>
<h2 id="通过字典查询单词"><a href="#通过字典查询单词" class="headerlink" title="通过字典查询单词"></a>通过字典查询单词</h2><pre><code># 查询bash单词的含义
curl dict://dict.org/d:bash
# 列出所有可用词典
curl dict://dict.org/show:db
# 在foldoc词典中查询bash单词的含义
curl dict://dict.org/d:bash:foldoc
</code></pre><h2 id="为CURL设置代理"><a href="#为CURL设置代理" class="headerlink" title="为CURL设置代理"></a>为CURL设置代理</h2><p>-x 选项可以为CURL添加代理功能</p>
<pre><code># 指定代理主机和端口
curl -x proxysever.test.com:3128 http://google.co.in
</code></pre><h2 id="保存与使用网站cookie信息"><a href="#保存与使用网站cookie信息" class="headerlink" title="保存与使用网站cookie信息"></a>保存与使用网站cookie信息</h2><pre><code># 将网站的cookies信息保存到sugarcookies文件中
curl -D sugarcookies http://localhost/sugarcrm/index.php
# 使用上次保存的cookie信息
curl -b sugarcookies http://localhost/sugarcrm/index.php
</code></pre><h2 id="传递请求数据"><a href="#传递请求数据" class="headerlink" title="传递请求数据"></a>传递请求数据</h2><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 –data/-d 方式指定使用POST方式传递数据</p>
<pre><code># GET
curl -u username https://api.github.com/user?access_token=XXXXXXXXXX
# POST
curl -u username --data &quot;param1=value1&amp;param2=value&quot; https://api.github.com
# 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端
curl --data @filename https://github.api.com/authorizations
</code></pre><p>注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：</p>
<pre><code>curl -d &quot;value%201&quot; http://hostname.com
</code></pre><p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。</p>
<pre><code>curl --data-urlencode &quot;value 1&quot; http://hostname.com
</code></pre><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：</p>
<pre><code>curl -I -X DELETE https://api.github.cim
</code></pre><p>上传文件</p>
<pre><code>curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource
</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><pre><code>-a/--append                        上传文件时，附加到目标文件
--anyauth                            可以使用“任何”身份验证方法
--basic                                使用HTTP基本验证
-B/--use-ascii                      使用ASCII文本传输
-d/--data &lt;data&gt;                  HTTP POST方式传送数据
--data-ascii &lt;data&gt;            以ascii的方式post数据
--data-binary &lt;data&gt;          以二进制的方式post数据
--negotiate                          使用HTTP身份验证
--digest                        使用数字身份验证
--disable-eprt                  禁止使用EPRT或LPRT
--disable-epsv                  禁止使用EPSV
--egd-file &lt;file&gt;              为随机数据(SSL)设置EGD socket路径
--tcp-nodelay                  使用TCP_NODELAY选项
-E/--cert &lt;cert[:passwd]&gt;      客户端证书文件和密码 (SSL)
--cert-type &lt;type&gt;              证书文件类型 (DER/PEM/ENG) (SSL)
--key &lt;key&gt;                    私钥文件名 (SSL)
--key-type &lt;type&gt;              私钥文件类型 (DER/PEM/ENG) (SSL)
--pass  &lt;pass&gt;                  私钥密码 (SSL)
--engine &lt;eng&gt;                  加密引擎使用 (SSL). &quot;--engine list&quot; for list
--cacert &lt;file&gt;                CA证书 (SSL)
--capath &lt;directory&gt;            CA目   (made using c_rehash) to verify peer against (SSL)
--ciphers &lt;list&gt;                SSL密码
--compressed                    要求返回是压缩的形势 (using deflate or gzip)
--connect-timeout &lt;seconds&gt;    设置最大请求时间
--create-dirs                  建立本地目录的目录层次结构
--crlf                          上传是把LF转变成CRLF
--ftp-create-dirs              如果远程目录不存在，创建远程目录
--ftp-method [multicwd/nocwd/singlecwd]    控制CWD的使用
--ftp-pasv                      使用 PASV/EPSV 代替端口
--ftp-skip-pasv-ip              使用PASV的时候,忽略该IP地址
--ftp-ssl                      尝试用 SSL/TLS 来进行ftp数据传输
--ftp-ssl-reqd                  要求用 SSL/TLS 来进行ftp数据传输
-F/--form &lt;name=content&gt;        模拟http表单提交数据
-form-string &lt;name=string&gt;      模拟http表单提交数据
-g/--globoff                    禁用网址序列和范围使用{}和[]
-G/--get                        以get的方式来发送数据
-h/--help                      帮助
-H/--header &lt;line&gt;              自定义头信息传递给服务器
--ignore-content-length        忽略的HTTP头信息的长度
-i/--include                    输出时包括protocol头信息
-I/--head                      只显示文档信息
-j/--junk-session-cookies      读取文件时忽略session cookie
--interface &lt;interface&gt;        使用指定网络接口/地址
--krb4 &lt;level&gt;                  使用指定安全级别的krb4
-k/--insecure                  允许不使用证书到SSL站点
-K/--config                    指定的配置文件读取
-l/--list-only                  列出ftp目录下的文件名称
--limit-rate &lt;rate&gt;            设置传输速度
--local-port&lt;NUM&gt;              强制使用本地端口号
-m/--max-time &lt;seconds&gt;        设置最大传输时间
--max-redirs &lt;num&gt;              设置最大读取的目录数
--max-filesize &lt;bytes&gt;          设置最大下载的文件总量
-M/--manual                    显示全手动
-n/--netrc                      从netrc文件中读取用户名和密码
--netrc-optional                使用 .netrc 或者 URL来覆盖-n
--ntlm                          使用 HTTP NTLM 身份验证
-N/--no-buffer                  禁用缓冲输出
-p/--proxytunnel                使用HTTP代理
--proxy-anyauth                选择任一代理身份验证方法
--proxy-basic                  在代理上使用基本身份验证
--proxy-digest                  在代理上使用数字身份验证
--proxy-ntlm                    在代理上使用ntlm身份验证
-P/--ftp-port &lt;address&gt;        使用端口地址，而不是使用PASV
-Q/--quote &lt;cmd&gt;                文件传输前，发送命令到服务器
--range-file                    读取（SSL）的随机文件
-R/--remote-time                在本地生成文件时，保留远程文件时间
--retry &lt;num&gt;                  传输出现问题时，重试的次数
--retry-delay &lt;seconds&gt;        传输出现问题时，设置重试间隔时间
--retry-max-time &lt;seconds&gt;      传输出现问题时，设置最大重试时间
-S/--show-error                显示错误
--socks4 &lt;host[:port]&gt;          用socks4代理给定主机和端口
--socks5 &lt;host[:port]&gt;          用socks5代理给定主机和端口
-t/--telnet-option &lt;OPT=val&gt;    Telnet选项设置
--trace &lt;file&gt;                  对指定文件进行debug
--trace-ascii &lt;file&gt;            Like --跟踪但没有hex输出
--trace-time                    跟踪/详细输出时，添加时间戳
--url &lt;URL&gt;                    Spet URL to work with
-U/--proxy-user &lt;user[:password]&gt;  设置代理用户名和密码
-V/--version                    显示版本信息
-X/--request &lt;command&gt;          指定什么命令
-y/--speed-time                放弃限速所要的时间。默认为30
-Y/--speed-limit                停止传输速度的限制，速度时间&#39;秒
-z/--time-cond                  传送时间设置
-0/--http1.0                    使用HTTP 1.0
-1/--tlsv1                      使用TLSv1（SSL）
-2/--sslv2                      使用SSLv2的（SSL）
-3/--sslv3                      使用的SSLv3（SSL）
--3p-quote                      like -Q for the source URL for 3rd party transfer
--3p-url                        使用url，进行第三方传送
--3p-user                      使用用户名和密码，进行第三方传送
-4/--ipv4                      使用IP4
-6/--ipv6                      使用IP6
</code></pre><p><a href="http://curl.haxx.se/docs/httpscripting.html" target="_blank" rel="external">http://curl.haxx.se/docs/httpscripting.html</a><br><a href="http://www.cnblogs.com/gbyukg/p/3326825.html" target="_blank" rel="external">http://www.cnblogs.com/gbyukg/p/3326825.html</a><br><a href="https://www.cnblogs.com/duhuo/p/5695256.html" target="_blank" rel="external">https://www.cnblogs.com/duhuo/p/5695256.html</a></p>
]]></content>
      
        <categories>
            
            <category> linux命令 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux命令,计算机网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编译链接常识]]></title>
      <url>/2017/12/27/%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%B8%B8%E8%AF%86/</url>
      <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote>
<p>库是一种可执行的二进制代码(但不可以独立执行)，可以被操作系统载入内存执行。</p>
</blockquote>
<p>由于 windows 和 linux 的平台不同（主要是编译器、汇编器和连接器 的不同），因此二者库的二进制是不兼容的。<br>本文仅限于介绍 linux 下的库。<br><a id="more"></a></p>
<h3 id="库的种类"><a href="#库的种类" class="headerlink" title="库的种类"></a>库的种类</h3><p>linux 下的库有两种：<code>静态库</code>和<code>共享库</code>（<code>动态库</code>）。</p>
<p>   二者的不同点在于<strong>代码被载入的时刻不同</strong>：</p>
<p><strong>静态库</strong>的代码在编译过程中已经被载入可执行程序，因此生成的可执行程序体积较大。静态用.a为后缀， 例如： libhello.a</p>
<p><strong>共享库</strong>(<strong>动态库</strong>)的代码是在可执行程序运行时才载入内存的，在编译过程中仅简单的引用，因此生成的可执行程序代码体积较小。动态通常用.so为后缀， 例如：libhello.so</p>
<p><strong>共享库(动态库)的好处</strong>是: 不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例。</p>
<p>为了在同一系统中使用不同版本的库，可以在库文件名后加上版本号为后缀,例如： libhello.so.1.0,由于程序连接默认以.so为文件后缀名。所以为了使用这些库，通常使用建立符号连接的方式。</p>
<pre><code class="shell">ln -s libhello.so.1.0 libhello.so.1 
ln -s libhello.so.1 libhello.so
</code></pre>
<h3 id="静态库，动态库文件在linux下是如何生成的"><a href="#静态库，动态库文件在linux下是如何生成的" class="headerlink" title="静态库，动态库文件在linux下是如何生成的"></a>静态库，动态库文件在linux下是如何生成的</h3><p>以下面的代码为例，生成上面用到的hello库：</p>
<pre><code>/* hello.c */  
#include &quot;hello.h&quot;  
void sayhello()  
{      
    printf(&quot;hello,world &quot;);  
}
</code></pre><p>首先用gcc编绎该文件，在编绎时可以使用任何合法的编绎参数，例如-g加入调试代码等：<br><code>gcc -c hello.c -o hello.o</code></p>
<p>1、生成静态库 生成静态库使用ar工具，其实ar是archive的意思<br><code>ar cqs libhello.a hello.o</code><br>2、生成动态库 用gcc来完成，由于可能存在多个版本，因此通常指定版本号：<br><code>gcc -shared -o libhello.so.1.0 hello.o</code></p>
<h3 id="库文件是如何命名的，有没有什么规范"><a href="#库文件是如何命名的，有没有什么规范" class="headerlink" title="库文件是如何命名的，有没有什么规范"></a>库文件是如何命名的，有没有什么规范</h3><p>在 linux 下，库文件一般放在/usr/lib和/lib下，<br><strong>静态库</strong>的名字一般为<code>libxxxx.a</code>，其中 xxxx 是该lib的名称；<br><strong>动态库</strong>的名字一般为<code>libxxxx.so.major.minor</code>，xxxx 是该lib的名称，major是主版本号，minor是副版本号</p>
<h3 id="可执行程序在执行的时候如何定位共享库-动态库-文件"><a href="#可执行程序在执行的时候如何定位共享库-动态库-文件" class="headerlink" title="可执行程序在执行的时候如何定位共享库(动态库)文件"></a>可执行程序在执行的时候如何定位共享库(动态库)文件</h3><p>当系统加载可执行代码(即库文件)的时候，<strong>能够知道其所依赖的库的名字</strong>，但是<strong>还需要知道绝对路径</strong>，此时就需要<strong>系统动态载入器</strong> (dynamic linker/loader)<br>    对于 elf 格式的可执行程序，是由 <code>ld-linux.so*</code> 来完成的，它先后搜索 elf 文件的 <code>DT_RPATH 段</code> –&gt; 环境变量<code>LD_LIBRARY_PATH</code> —-&gt; <code>/etc/ld.so.cache</code> 文件列表–&gt; <code>/lib/</code>,<code>/usr/lib</code> 目录<strong>找到库文件后将其载入内存</strong><br>    如： <code>export LD_LIBRARY_PATH=’pwd’</code><br>    将当前文件目录添加为共享目录。</p>
<h3 id="使用ldd工具，查看可执行程序依赖那些动态库或着动态库依赖于那些动态库"><a href="#使用ldd工具，查看可执行程序依赖那些动态库或着动态库依赖于那些动态库" class="headerlink" title="使用ldd工具，查看可执行程序依赖那些动态库或着动态库依赖于那些动态库"></a>使用ldd工具，查看可执行程序依赖那些动态库或着动态库依赖于那些动态库</h3><p><strong>ldd 命令</strong>可以查看<strong>一个可执行程序依赖的<em>共享库</em></strong>，<br>例如 # ldd /bin/lnlibc.so.6<br>    =&gt; /lib/libc.so.6 (0×40021000)/lib/ld-linux.so.2<br>    =&gt; /lib/ld- linux.so.2 (0×40000000)<br>可以看到 <code>ln</code> 命令依赖于 <code>libc</code> 库和 <code>ld-linux</code> 库 </p>
<h3 id="使用nm工具，查看静态库和动态库中有那些函数名"><a href="#使用nm工具，查看静态库和动态库中有那些函数名" class="headerlink" title="使用nm工具，查看静态库和动态库中有那些函数名"></a>使用nm工具，查看静态库和动态库中有那些函数名</h3><p>（<strong>T类表示函数是当前库中定义的，U类表示函数是被调用的，在其它库中定义的，W类是当前库中定义，被其它库中的函数覆盖</strong>）。：<br>有时候可能需要查看一个库中到底<strong>有哪些函数</strong>，nm工具可以打印出库中的涉及到的所有符号，这里的库<strong>既可以是静态的也可以是动态的</strong>。<br>nm列出的符号有很多， 常见的有三种::</p>
<p>T类：是在库中定义的函数，用T表示，这是最常见的；</p>
<p>U类：是在库中被调用，但并没有在库中定义(表明需要其他库支持)，用U表示；</p>
<p>W类：是所谓的“弱态”符号，它们虽然在库中被定义，但是可能被其他库中的同名符号覆盖，用W表示。</p>
<p>例如，假设开发者希望知道上文提到的hello库中是否引用了 printf():</p>
<p>nm libhello.so | grep printf<br>发现printf是U类符号，说明printf被引用，但是并没有在库中定义。</p>
<p>由此可以推断，要正常使用hello库，必须有其它库支持，使用ldd工具查看hello依赖于哪些库：</p>
<p>ldd libhello.so</p>
<p>libc.so.6=&gt;/lib/libc.so.6(0x400la000)  </p>
<p>/lib/ld-linux.so.2=&gt;/lib/ld-linux.so.2 (0x40000000)</p>
<p>从上面的结果可以继续查看printf最终在哪里被定义，有兴趣可以go on</p>
<h3 id="使用ar工具，可以生成静态库，同时可以查看静态库中包含那些-o文件，即有那些源文件构成"><a href="#使用ar工具，可以生成静态库，同时可以查看静态库中包含那些-o文件，即有那些源文件构成" class="headerlink" title="使用ar工具，可以生成静态库，同时可以查看静态库中包含那些.o文件，即有那些源文件构成"></a>使用ar工具，可以生成静态库，同时可以查看静态库中包含那些.o文件，即有那些源文件构成</h3><p>可以使用 <code>ar -t libname.a</code> 来<strong>查看一个静态库由那些.o文件构成</strong>。</p>
<p>可以使用 <code>ar q libname.a xxx1.o  xxx2.o xxx3.o ... xxxn.o</code> <strong>生成静态库</strong></p>
<h3 id="如何查看动态库和静态库是32位，还是64位下的库"><a href="#如何查看动态库和静态库是32位，还是64位下的库" class="headerlink" title="如何查看动态库和静态库是32位，还是64位下的库"></a>如何查看动态库和静态库是32位，还是64位下的库</h3><p>如果是<strong>动态库</strong>，可以使用<code>file *.so</code>；<br>如果是<strong>静态库</strong>，可以使用<code>objdump -x *.a</code></p>
<h2 id="Linux下进行程序设计时，关于库的使用"><a href="#Linux下进行程序设计时，关于库的使用" class="headerlink" title="Linux下进行程序设计时，关于库的使用"></a>Linux下进行程序设计时，关于库的使用</h2><h3 id="gcc-g-命令中关于库的参数"><a href="#gcc-g-命令中关于库的参数" class="headerlink" title="gcc/g++命令中关于库的参数"></a>gcc/g++命令中关于库的参数</h3><pre><code>-shared： 该选项指定生成动态连接库；
-fPIC：表示编译为位置独立(地址无关)的代码，不用此选项的话，编译后的代码是位置相关的，所以动态载入时，是通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。
-L：指定链接库的路径，-L. 表示要连接的库在当前目录中
-ltest：指定链接库的名称为test，编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.so来确定库的名称
-Wl,-rpath: 记录以来so文件的路径信息。
LD_LIBRARY_PATH：这个环境变量指示动态连接器可以装载动态库的路径。
 当然如果有root权限的话，可以修改/etc/ld.so.conf文件，然后调用 /sbin/ldconfig来达到同样的目的，
 不过如果没有root权限，那么只能采用修改LD_LIBRARY_PATH环境变量的方法了。 
</code></pre><p><strong>调用动态库的时候，有几个问题会经常碰到</strong><br>有时，明明已经将库的头文件所在目录 通过 “-I” include进来了，库所在文件通过 “-L”参数引导，并指定了“-l”的库名，但通过ldd命令察看时，就是死活找不到你指定链接的so文件，这时你要作的就是通过修改 LD_LIBRARY_PATH或者/etc/ld.so.conf文件来指定动态库的目录。通常这样做就可以解决库无法链接的问题了。</p>
<h3 id="静态库链接时搜索路径的顺序"><a href="#静态库链接时搜索路径的顺序" class="headerlink" title="静态库链接时搜索路径的顺序"></a>静态库链接时搜索路径的顺序</h3><pre><code>1. ld会去找gcc/g++命令中的参数-L；
2. 再找gcc的环境变量LIBRARY_PATH,它指定程序静态链接库文件搜索路径；
    1. `export LIBRARY_PATH=$LIBRARY_PATH:data/home/billchen/lib `
3. 再找默认库目录 /lib  /usr/lib  /usr/local/lib，这是当初compile gcc时写在程序内的。 
</code></pre><h3 id="动态链接时、执行时搜索路径顺序"><a href="#动态链接时、执行时搜索路径顺序" class="headerlink" title="动态链接时、执行时搜索路径顺序"></a>动态链接时、执行时搜索路径顺序</h3><pre><code>1. 编译目标代码时指定的动态库搜索路径；
2. 环境变量LD_LIBRARY_PATH指定动态库搜索路径，它指定程序动态链接库文件搜索路径；
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:data/home/billchen/lib 
3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径；
4. 默认的动态库搜索路径/lib；
5. 默认的动态库搜索路径/usr/lib。 
</code></pre><h3 id="静态库和动态链接库同时存在时，gcc-g-默认链接的是动态库"><a href="#静态库和动态链接库同时存在时，gcc-g-默认链接的是动态库" class="headerlink" title="静态库和动态链接库同时存在时，gcc/g++默认链接的是动态库"></a>静态库和动态链接库同时存在时，gcc/g++默认链接的是动态库</h3><p> 当一个库同时存在静态库和动态库时，比如libmysqlclient.a和libmysqlclient.so同时存在时：<br>在Linux下，动态库和静态库同事存在时，<strong>gcc/g++的链接程序，默认链接的动态库</strong>。</p>
<p>可以使用下面的方法，给连接器ld传递参数，看是否链接动态库还是静态库。</p>
<pre><code>-Wl,-Bstatic -llibname        //指定让gcc/g++链接静态库
使用:
gcc/g++ test.c -o test -Wl,-Bstatic -llibname -Wl,-Bdynamic -lm -lc 

-Wl,-Bdynamic -llibname       //指定让gcc/g++链接动态库
使用:
gcc/g++ test.c -o test -Wl,-Bdynamic -llibname
</code></pre><p><strong>如果要完全静态加载，使用-static参数，即将所有的库以静态的方式链入可执行程序，这样生成的可执行程序，不再依赖任何库，同事出现的问题是，这样编译出来的程序非常大，占用空间。<br>如果不适用-Wl,-Bdynamic -lm -c会有如下错误</strong>：</p>
<pre><code>[chenbaihu@build17 lib]$ ls
libtest.a  libtest.so  t  t.cc  test.cc  test.h  test.o
[chenbaihu@build17 lib]$ g++ -Wall -g t.cc -o t -L./ -Wl,-Bstatic -ltest -Wl,-Bdynamic -lm -lc
[chenbaihu@build17 lib]$ g++ -Wall -g t.cc -o t -L./ -Wl,-Bstatic -ltest 
/usr/bin/ld: cannot find -lm
collect2: ld 返回 1
</code></pre><p>参考：<br>     <a href="http://lists.gnu.org/archive/html/help-gnu-utils/2004-03/msg00009.html" target="_blank" rel="external">http://lists.gnu.org/archive/html/help-gnu-utils/2004-03/msg00009.html</a></p>
<h3 id="有关环境变量"><a href="#有关环境变量" class="headerlink" title="有关环境变量"></a>有关环境变量</h3><p><code>LIBRARY_PATH</code>环境变量：指定程序<strong>静态链接库文件搜索路径</strong><br><code>LD_LIBRARY_PATH</code>环境变量：指定程序<strong>动态链接库文件搜索路径</strong> </p>
<h3 id="库的依赖问题"><a href="#库的依赖问题" class="headerlink" title="库的依赖问题"></a>库的依赖问题</h3><p>比如我们有一个基础库libbase.a,还有一个依赖libbase.a编译的库，叫做libchild.a；在我们编译程序时，一定要先-lchild再-lbase。 如果使用 -lbase -lchild，在编译时将出现一些函数undefined，而这些函数实际上已经在base中已经定义；</p>
<p>为什么会有库的依赖问题？</p>
<pre><code>一、静态库解析符号引用：
  链接器ld是如何使用静态库来解析引用的。在符号解析阶段，链接器从左至右，依次扫描可重定位目标文件（*.o）和静态库（*.a）。
在这个过程中，链接器将维持三个集合：
    集合E：可重定位目标文件(*.o文件)的集合。
    集合U：未解析(未定义)的符号集，即符号表中UNDEF的符号。
    集合D： 已定义的符号集。
初始情况下，E、U、D均为空。

    1、对于每个输入文件f，如果是目标文件(.o)，则将f加入E，并用f中的符号表修改U、D(在文件f中定义实现的符号是D，在f中引用的符号是U)，然后继续下个文件。
    2、如果f是一个静态库(.a)，那么链接器将尝试匹配U中未解析符号与静态库成员(静态库的成员就是.o文件)定义的符号。如果静态库中某个成员m(某个.o文件)定义了一个符号来解析U中引用，那么将m加入E中，
    同时使用m的符号表，来更新U、D。对静态库中所有成员目标文件反复进行该过程，直至U和D不再发生变化。此时，静态库f中任何不包含在E中的成员目标文件都将丢弃，链接器将继续下一个文件。
    3、当所有输入文件完成后，如果U非空，链接器则会报错，否则合并和重定位E中目标文件，构建出可执行文件。

到这里，为什么会有库的依赖问题已经得到解答：
    因为libchild.a依赖于libbase.a，但是libbase.a在libchild.a的左边，导致libbase.a中的目标文件(*.o)根本就没有被加载到E中，所以解决方法就是交换两者的顺序。当然也可以使用-lbase -lchild -lbase的方法。

参考文章：http://pananq.com/index.php/page/3/
</code></pre><h3 id="动态库升级问题"><a href="#动态库升级问题" class="headerlink" title="动态库升级问题"></a>动态库升级问题</h3><p>在动态链接库升级时，<br>   <strong>不能使用</strong><code>cp newlib.so oldlib.so</code>，这样有可能会使程序core掉；<br>   <strong>而应该使用:<br>   <code>rm oldlib.so</code> 然后 <code>cp newlib.so oldlib.so</code><br>   或者<br>    <code>mv oldlib.so oldlib.so_bak</code> 然后 <code>cp newlib.so oldlib.so</code></strong></p>
<p>为什么不能用cp newlib.so oldlib.so ?</p>
<pre><code>在替换so文件时，如果在不停程序的情况下，直接用 cp new.so old.so 的方式替换程序使用的动态库文件会导致正在运行中的程序崩溃。
</code></pre><p>解决方法:</p>
<pre><code>解决的办法是采用“rm＋cp” 或“mv＋cp” 来替代直接“cp” 的操作方法。
linux系统的动态库有两种使用方法：运行时动态链接库，动态加载库并在程序控制之下使用。
</code></pre><p>1、为什么在不停程序的情况下，直接用 cp 命令替换程序使用的 so 文件，会使程序崩溃？<br>很多同学在工作中遇到过这样一个问题，在替换 so 文件时，如果在不停程序的情况下，直接用cp new.so old.so的方式替换程序使用的动态库文件会导致正在运行中的程序崩溃，退出。</p>
<pre><code>这与 cp 命令的实现有关，cp 并不改变目标文件的 inode，cp 的目标文件会继承被覆盖文件的属性而非源文件。实际上它是这样实现的：
strace cp libnew.so libold.so 2&gt;&amp;1 |grep open.*lib.*.so
open(&quot;libnew.so&quot;, O_RDONLY|O_LARGEFILE) = 3
open(&quot;libold.so&quot;, O_WRONLY|O_TRUNC|O_LARGEFILE) = 4
在 cp 使用“O_WRONLY|O_TRUNC” 打开目标文件时，原 so 文件的镜像被意外的破坏了。这样动态链接器 ld.so 不能访问到 so 文件中的函数入口。从而导致 Segmentation fault，程序崩溃。ld.so 加载 so 文件及“再定位”的机制比较复杂。
</code></pre><p>2、怎样在不停止程序的情况下替换so文件，并且保证程序不会崩溃？</p>
<pre><code>答案是采用“rm＋cp” 或“mv＋cp” 来替代直接“cp” 的操作方法。
在用新的so文件 libnew.so 替换旧的so文件 libold.so 时，如果采用如下方法：
rm libold.so       //如果内核正在使用libold.so，那么inode节点不会立刻别删除掉。
cp libnew.so libold.so
采用这种方法，目标文件 libold.so 的 inode 其实已经改变了，原来的 libold.so 文件虽然不能用&quot;ls&quot;查看到，但其inode并没有被真正删除，直到内核释放对它的引用。
</code></pre><p>（即: rm libold.so，此时，如果ld.so正在加在libold.so，内核就在引用libold.so的inode节点，rm libold.so的inode并没有被真正删除，当ld.so对libold.so的引用结束，inode才会真正删除。这样程序就不会崩溃，因为它还在使用旧的libold.so，当下次再使用libold.so时，已经被替换，就会使用新的libold.so）</p>
<pre><code>同理，mv只是改变了文件名，其 inode 不变，新文件使用了新的 inode。这样动态链接器 ld.so 仍然使用原来文件的 inode 访问旧的 so 文件。因而程序依然能正常运行。
</code></pre><p>(即: mv libold.so <em>*</em>后，如果程序使用动态库，还是使用旧的inode节点，当下次再使用libold.so时，就会使用新的libold.so)</p>
<pre><code>到这里，为什么直接使用“cp new_exec_file old_exec_file”这样的命令时，系统会禁止这样的操作，并且给出这样的提示“cp: cannot create regular file `old&#39;: Text file busy”。

这时，我们采用的办法仍然是用“rm+cp”或者“mv+cp”来替代直接“cp”，这跟以上提到的so文件的替换有同样的道理。
</code></pre><p>但是，为什么系统会阻止cp覆盖可执行程序，而不阻止覆盖so文件呢？</p>
<pre><code>这是因为 Linux 有个 Demand Paging 机制，所谓“Demand Paging”，简单的说，就是系统为了节约物理内存开销，并不会程序运行时就将所有页（page）都加载到内存中，而只有在系统有访问需求时才将其加载。“Demand Paging”要求正在运行中的程序镜像（注意，并非文件本身）不被意外修改，因此内核在启动程序后会锁定这个程序镜像的 inode。
</code></pre><p>对于 so 文件，它是靠 ld.so 加载的，而ld.so毕竟也是用户态程序，没有权利去锁定inode，也不应与内核的文件系统底层实现耦合。</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>转载自：<a href="http://blog.163.com/xychenbaihu@yeah/blog/static/13222965520101023104745738/" target="_blank" rel="external">http://blog.163.com/xychenbaihu@yeah/blog/static/13222965520101023104745738/</a></p>
]]></content>
      
        <categories>
            
            <category> C语言 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言,编译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各大公司git地址]]></title>
      <url>/2017/12/13/%E5%90%84%E5%A4%A7%E5%85%AC%E5%8F%B8git%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>github,一个神奇的网址<br>gitbook，另一个神奇的网址，.com,.net,.cn都可以逛一下</p>
</blockquote>
<a id="more"></a>
<h2 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h2><p><a href="https://github.com/baidu" target="_blank" rel="external">https://github.com/baidu</a><br><a href="https://github.com/baidufe" target="_blank" rel="external">https://github.com/baidufe</a><br><a href="https://github.com/ecomfe" target="_blank" rel="external">https://github.com/ecomfe</a></p>
<h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><p><a href="https://github.com/alibaba" target="_blank" rel="external">https://github.com/alibaba</a></p>
<h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><p><a href="https://github.com/tencent" target="_blank" rel="external">https://github.com/tencent</a><br><a href="https://github.com/AlloyTeam" target="_blank" rel="external">https://github.com/AlloyTeam</a><br><a href="https://github.com/TencentOpen" target="_blank" rel="external">https://github.com/TencentOpen</a></p>
<h2 id="360"><a href="#360" class="headerlink" title="360"></a>360</h2><p><a href="https://github.com/Qihoo360" target="_blank" rel="external">https://github.com/Qihoo360</a></p>
<h2 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h2><p><a href="https://github.com/netease" target="_blank" rel="external">https://github.com/netease</a></p>
<h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><p><a href="https://github.com/jcloudpub" target="_blank" rel="external">https://github.com/jcloudpub</a></p>
<h2 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h2><p><a href="https://github.com/huawei-openlab" target="_blank" rel="external">https://github.com/huawei-openlab</a><br><a href="https://github.com/Huawei-Hadoop" target="_blank" rel="external">https://github.com/Huawei-Hadoop</a></p>
<h2 id="唯品会"><a href="#唯品会" class="headerlink" title="唯品会"></a>唯品会</h2><p><a href="https://github.com/vipshop" target="_blank" rel="external">https://github.com/vipshop</a></p>
<h2 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h2><p><a href="https://github.com/douban" target="_blank" rel="external">https://github.com/douban</a></p>
<h2 id="小米"><a href="#小米" class="headerlink" title="小米"></a>小米</h2><p><a href="https://github.com/xiaomi" target="_blank" rel="external">https://github.com/xiaomi</a></p>
<h2 id="美团，大众点评"><a href="#美团，大众点评" class="headerlink" title="美团，大众点评"></a>美团，大众点评</h2><p><a href="https://github.com/meituan" target="_blank" rel="external">https://github.com/meituan</a><br><a href="https://github.com/meituan-dianping" target="_blank" rel="external">https://github.com/meituan-dianping</a><br><a href="https://github.com/dianping" target="_blank" rel="external">https://github.com/dianping</a></p>
<h2 id="58同城"><a href="#58同城" class="headerlink" title="58同城"></a>58同城</h2><p><a href="https://github.com/58code" target="_blank" rel="external">https://github.com/58code</a></p>
<h2 id="当当"><a href="#当当" class="headerlink" title="当当"></a>当当</h2><p><a href="https://github.com/dangdangdotcom" target="_blank" rel="external">https://github.com/dangdangdotcom</a></p>
<h2 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h2><p><a href="https://github.com/linuxdeepin" target="_blank" rel="external">https://github.com/linuxdeepin</a></p>
<h2 id="新浪"><a href="#新浪" class="headerlink" title="新浪"></a>新浪</h2><p><a href="https://github.com/fastos" target="_blank" rel="external">https://github.com/fastos</a><br><a href="https://github.com/CNSRE" target="_blank" rel="external">https://github.com/CNSRE</a><br><a href="https://github.com/weibocom" target="_blank" rel="external">https://github.com/weibocom</a></p>
<h2 id="搜狐"><a href="#搜狐" class="headerlink" title="搜狐"></a>搜狐</h2><p><a href="https://github.com/SOHUDBA" target="_blank" rel="external">https://github.com/SOHUDBA</a></p>
<h2 id="豌豆荚"><a href="#豌豆荚" class="headerlink" title="豌豆荚"></a>豌豆荚</h2><p><a href="https://github.com/CodisLabs" target="_blank" rel="external">https://github.com/CodisLabs</a></p>
<h2 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h2><p><a href="https://github.com/google" target="_blank" rel="external">https://github.com/google</a></p>
<h2 id="微软"><a href="#微软" class="headerlink" title="微软"></a>微软</h2><p><a href="https://github.com/Microsoft" target="_blank" rel="external">https://github.com/Microsoft</a></p>
<h2 id="苹果"><a href="#苹果" class="headerlink" title="苹果"></a>苹果</h2><p><a href="https://github.com/apple" target="_blank" rel="external">https://github.com/apple</a></p>
<h2 id="亚马逊"><a href="#亚马逊" class="headerlink" title="亚马逊"></a>亚马逊</h2><p><a href="https://github.com/aws" target="_blank" rel="external">https://github.com/aws</a></p>
<h2 id="facebook"><a href="#facebook" class="headerlink" title="facebook"></a>facebook</h2><p><a href="https://github.com/facebook" target="_blank" rel="external">https://github.com/facebook</a></p>
<h2 id="雅虎"><a href="#雅虎" class="headerlink" title="雅虎"></a>雅虎</h2><p><a href="https://github.com/yahoo" target="_blank" rel="external">https://github.com/yahoo</a></p>
]]></content>
      
        <categories>
            
            <category> 项目 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pthread常用接口]]></title>
      <url>/2017/12/08/pthread%E5%B8%B8%E7%94%A8%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h2 id="pthread-equal函数"><a href="#pthread-equal函数" class="headerlink" title="pthread_equal函数"></a>pthread_equal函数</h2><p>判断两个线程ID是否相等<br><code>int pthread_equal(pthread_t tid1,pthread tid2);</code></p>
<ul>
<li>参数：<ul>
<li>tid1：第一个线程ID</li>
<li>tid2：第二个线程ID</li>
</ul>
</li>
<li>返回值：<br>  -相等：返回非0数值<ul>
<li>不等：返回 0</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="pthread-self-void-函数"><a href="#pthread-self-void-函数" class="headerlink" title="pthread_self(void)函数"></a>pthread_self(void)函数</h2><p>返回本线程自身的线程ID<br><code>pthread_t pthread_self(void);</code></p>
<ul>
<li>返回值：调用线程的线程ID</li>
</ul>
<h2 id="pthread-create函数"><a href="#pthread-create函数" class="headerlink" title="pthread_create函数"></a>pthread_create函数</h2><p>创建新线程<br><code>int pthread_create(pthread_t *restrict tidp,</code><br><code>const pthread_attr_t *restrict attr,</code><br><code>void *(*start_rtn)(void*),</code><br><code>void *restrict arg);</code></p>
<ul>
<li>参数：<ul>
<li>tidp：成功创建时，新线程的线程ID存放在tidp指向的内存单元</li>
<li>attr：用于定制不同的线程属性。如果为NULL，则是默认属性</li>
<li>start_rtn：线程例程地址。新创建的线程从start_rtn函数的地址处开始运行，该函数的参数为void <em>，返回值为void </em></li>
<li>arg：作为start_rtn函数的参数</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回 0</li>
<li>失败：返回错误编号</li>
</ul>
</li>
</ul>
<h2 id="pthread-exit函数"><a href="#pthread-exit函数" class="headerlink" title="pthread_exit函数"></a>pthread_exit函数</h2><p>线程主动退出<br>void pthread_exit(void *rval_ptr);<br>    参数：<br>        rval_ptr：一个无类型指针，用于给pthread_join函数传递参数（即线程间消息传递）</p>
<h2 id="pthread-join函数"><a href="#pthread-join函数" class="headerlink" title="pthread_join函数"></a>pthread_join函数</h2><p>等待指定的线程结束（类似于waitpid）<br><code>int pthread_join(pthread_t tid,void **rval_pptr);</code></p>
<ul>
<li>参数：<ul>
<li>tid：要等待的线程的线程ID</li>
<li>rval_pptr：一个指针，指向无类型指针（该无类型指针用于线程返回值）</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回 0</li>
<li>失败：返回错误编号</li>
<li>当调用线程调用pthread_join之后，调用线程将会一直阻塞，直到:<ul>
<li>指定的线程tid调用pthread_exit。此时rval_pptr指向的内存区就包含pthread_exit的rval_ptr的值</li>
<li>指定的线程tid从启动例程返回。此时rval_pptr指向的内存区就包含返回码</li>
<li>指定的线程tid被取消。此时rval_pptr指向的内存单元就设置为PTHREAD_CANCELED</li>
</ul>
</li>
<li>如果不关注线程的返回值，则可以将rval_pptr设置为NULL。此时pthread_join函数可以等待指定的线程终止，但是并不获取线程的终止状态。</li>
<li>可以通过调用pthread_join自动把线程置于分离状态，此时资源可以恢复。如果线程已经处理分离状态，pthread_join调用就会失败，返回EINVAL</li>
</ul>
</li>
</ul>
<h2 id="pthread-cancel函数"><a href="#pthread-cancel函数" class="headerlink" title="pthread_cancel函数"></a>pthread_cancel函数</h2><p>请求取消同一个进程中的其他某个线程<br><code>int pthread_cancel(pthread_t tid);</code></p>
<ul>
<li>参数：<ul>
<li>tid：期望取消的线程的ID</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回 0</li>
<li>失败：返回错误码</li>
</ul>
</li>
<li>默认情况下，pthread_cancel函数会使得由tid标识的线程的行为表现得如同调用了pthread_exit(PTHREAD_CANCELD)函数。但是，tid标识的线程可以选择忽略取消或者控制如何被取消。</li>
<li>pthread_cancel并不等待线程tid终止，也不保证线程tid终止，它仅仅提出了请求</li>
</ul>
<h2 id="pthread-clearnup-push-pthread-cleanup-pop函数"><a href="#pthread-clearnup-push-pthread-cleanup-pop函数" class="headerlink" title="pthread_clearnup_push/pthread_cleanup_pop函数"></a>pthread_clearnup_push/pthread_cleanup_pop函数</h2><p>注册与注销清理处理程序<br>一个线程可以建立多个清理处理程序<br>处理程序记录在栈中。即它们的执行顺序与它们注册时相反</p>
<p><code>void pthread_cleanup_push(void (*rtn)(void*),void *arg);</code><br><code>void pthread_cleanup_pop(int execute);</code></p>
<ul>
<li>对于 pthread_cleanup_push函数：<ul>
<li>rtn：清理处理程序的指针。rtn函数的参数是void *，返回void</li>
<li>arg：作为清理处理程序rtn的参数</li>
</ul>
</li>
<li>对于pthread_cleanup_pop函数：<ul>
<li>execute：如果为0，则线程退出时，清理函数不被调用（哪个清理函数？见后面说明）</li>
<li>execute：如果非零，则线程退出时，对应的清理函数被调用</li>
</ul>
</li>
</ul>
<h2 id="pthread-detach函数"><a href="#pthread-detach函数" class="headerlink" title="pthread_detach函数"></a>pthread_detach函数</h2><p>将指定线程设置为分离状态<br><code>int pthread_detach(pthread_t tid);</code></p>
<ul>
<li>参数：<ul>
<li>tid：被分离的线程的ID</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回 0</li>
<li>失败：返回错误码</li>
</ul>
</li>
</ul>
<h2 id="pthread-mutex-t-pthread-mutex-init-pthread-mutex-destroy"><a href="#pthread-mutex-t-pthread-mutex-init-pthread-mutex-destroy" class="headerlink" title="pthread_mutex_t/pthread_mutex_init/pthread_mutex_destroy"></a>pthread_mutex_t/pthread_mutex_init/pthread_mutex_destroy</h2><p>互斥量用pthread_mutex_t数据类型表示</p>
<ul>
<li>使用互斥量之前必须初始化。<ul>
<li>如果是动态分配的互斥量（如通过malloc函数），则必须调用pthread_mutex_init函数进行初始化</li>
<li>如果是静态分配的互斥量，那么除了调用pthread_mutex_init函数来初始化，也可以将它设置为常量PTHREAD_MUTEX_INITALIZER来初始化</li>
</ul>
</li>
<li>如果是动态分配的互斥量，那么在free释放内存之前必须调用pthread_mutex_destroy函数来销毁互斥量。该函数会释放在动态初始化互斥量时动态分配的资源<pre><code class="C">#include&lt;pthread.h&gt;
int pthread_mutex_init(pthread_mutex_t *restrict mutex,
  const pthread_mutexattr_t *restrict attr);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
</code></pre>
</li>
<li>参数：<ul>
<li>mutex：待初始化/释放的互斥量的地址</li>
<li>attr：互斥量的属性。如果为NULL，那么互斥量设置为默认属性</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回0</li>
<li>失败： 返回错误编号</li>
</ul>
</li>
</ul>
<h2 id="pthread-mutex-lock-pthread-mutex-trylock-pthread-mutex-unlock函数"><a href="#pthread-mutex-lock-pthread-mutex-trylock-pthread-mutex-unlock函数" class="headerlink" title="pthread_mutex_lock/pthread_mutex_trylock/pthread_mutex_unlock函数"></a>pthread_mutex_lock/pthread_mutex_trylock/pthread_mutex_unlock函数</h2><p>对互斥量加锁/解锁操作</p>
<pre><code class="C">#include&lt;pthread.h&gt;
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
</code></pre>
<ul>
<li>参数：<ul>
<li>mutex：待加锁/解锁的互斥量的地址</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回0</li>
<li>失败： 返回错误编号</li>
</ul>
</li>
<li>用法：<ul>
<li>pthread_mutex_lock用于对互斥量进行加锁。如果互斥量已经上锁，则调用线程将阻塞直到互斥量解锁</li>
<li>pthread_mutex_unlock用于对互斥量进行解锁</li>
<li>pthread_mutex_trylock也用于对互斥量进行加锁<ul>
<li>如果它被调用时，互斥量处于未锁定状态，那么函数将锁住互斥量并返回0</li>
<li>如果它被调用时，互斥量处于锁定状态，则函数调用失败，立即返回EBUSY而不是阻塞</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="pthread-mutex-timedlock函数"><a href="#pthread-mutex-timedlock函数" class="headerlink" title="pthread_mutex_timedlock函数"></a>pthread_mutex_timedlock函数</h2><p>对互斥量加锁或等待指定时间</p>
<pre><code class="C">#include&lt;pthread.h&gt;
#include&lt;time.h&gt;
int pthread_mutex_timedlock(pthread_mutex_t *restrict mutex,
    const struct timespec *restrict tsptr);
</code></pre>
<ul>
<li>参数：<ul>
<li>mutex：待加锁的互斥量的地址</li>
<li>tsptr(超时时间)：指向一个timespec的指针，该timepsec指定了一个绝对时间（并不是相对时间，比如10秒）</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回0</li>
<li>失败： 返回错误编号</li>
</ul>
</li>
<li>pthread_mutex_timedlock被调用时：<ul>
<li>如果互斥量处于未锁定状态，那么函数将锁住互斥量并返回0</li>
<li>如果互斥量处于锁定状态，那么函数将阻塞到tsptr指定的时刻。在到达超时时刻时，pthread_mutex_timedlock不再试图对互斥量进行加锁，而是返回错误码ETIMEOUT</li>
<li>可以使用clock_gettime函数获取timespec结构表示的当前时间。但是目前并不是所有平台都支持这个函数。因此也可以用gettimeofday函数获取timeval结构表示的当前时间，然后将这个时间转换为timespec结构。</li>
</ul>
</li>
</ul>
<h2 id="pthread-rwlock-t、pthread-rwlock-init、pthread-rwlock-destroy"><a href="#pthread-rwlock-t、pthread-rwlock-init、pthread-rwlock-destroy" class="headerlink" title="pthread_rwlock_t、pthread_rwlock_init、pthread_rwlock_destroy"></a>pthread_rwlock_t、pthread_rwlock_init、pthread_rwlock_destroy</h2><ul>
<li>当读写锁是写锁定状态时，在该锁被解锁之前，所有试图对这个锁加锁（无论是加读锁还是价写锁）的线程都会被阻塞</li>
<li><p>当读写锁是读锁定状态时，所有试图对它加读锁的线程都可以获得访问权，但是所有试图对它加写锁的线程都会被阻塞</p>
</li>
<li><p>使用读写锁之前必须初始化。</p>
<ul>
<li>如果是动态分配的读写锁（如通过malloc函数），则必须调用pthread_rwlock_init函数进行初始化</li>
<li>如果是静态分配的读写锁，那么除了调用pthread_rwlock_init函数来初始化，也可以将它设置为常量PTHREAD_RWLOCK_INITALIZER来初始化</li>
</ul>
</li>
<li>如果是动态分配的读写锁，那么在free释放内存之前必须调用pthread_rwlock_destroy函数来销毁读写锁。该函数会释放在动态初始化读写锁时动态分配的资源<pre><code class="C">#include&lt;pthread.h&gt;
int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,
  const pthread_rwlockattr_t *restrict attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
</code></pre>
</li>
<li>参数：<ul>
<li>rwlock：待初始化/销毁的读写锁的地址</li>
<li>attr：读写锁的属性。如果为NULL，那么读写锁设置为默认属性</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回0</li>
<li>失败： 返回错误编号</li>
</ul>
</li>
</ul>
<h2 id="pthread-rwlock-rdlock-pthread-rwlock-wrlock-pthread-rwlock-unlock函数"><a href="#pthread-rwlock-rdlock-pthread-rwlock-wrlock-pthread-rwlock-unlock函数" class="headerlink" title="pthread_rwlock_rdlock/pthread_rwlock_wrlock/pthread_rwlock_unlock函数"></a>pthread_rwlock_rdlock/pthread_rwlock_wrlock/pthread_rwlock_unlock函数</h2><p>对读写锁加锁/解锁操作</p>
<pre><code class="C">#include&lt;pthread.h&gt;
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
</code></pre>
<ul>
<li>参数：<ul>
<li>rwlock：待加锁/解锁的读写锁的地址</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回0</li>
<li>失败： 返回错误编号</li>
</ul>
</li>
<li><p>用法：</p>
<ul>
<li>pthread_rwlock_rdlock用于对读写锁加读锁。如果读写锁当前是未加锁的，或者是读锁定的，则加锁成功；如果读写锁当前是写锁定的，则阻塞线程。</li>
<li>pthread_rwlock_wrlock用于对读写锁加写锁。如果读写锁当前是未加锁的，则加锁成功；如果读写锁当前是读锁定或者写锁定的，则阻塞线程。</li>
<li>pthread_rwlock_unlock用于对读写锁进行解锁，无论读写锁当前状态是处于读锁定还是写锁定。<blockquote>
<p>注意：有的实现对读写锁同时加读锁的数量有限制。并不是无限制的加读锁。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="pthread-rwlock-tryrdlock-pthread-rwlock-trywrlock函数"><a href="#pthread-rwlock-tryrdlock-pthread-rwlock-trywrlock函数" class="headerlink" title="pthread_rwlock_tryrdlock/pthread_rwlock_trywrlock函数"></a>pthread_rwlock_tryrdlock/pthread_rwlock_trywrlock函数</h2><p>对读写锁加锁的条件版本</p>
<pre><code>#include&lt;pthread.h&gt;
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
</code></pre><ul>
<li>参数：<ul>
<li>rwlock：待加锁的读写锁的地址</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回0</li>
<li>失败： 返回错误编号<blockquote>
<p>当可以加锁时，这两个函数返回0。否则它们返回错误EBUSY而不是阻塞线程。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="pthread-rwlock-timedrdlock-pthread-rwlock-timedwrlock函数"><a href="#pthread-rwlock-timedrdlock-pthread-rwlock-timedwrlock函数" class="headerlink" title="pthread_rwlock_timedrdlock/pthread_rwlock_timedwrlock函数"></a>pthread_rwlock_timedrdlock/pthread_rwlock_timedwrlock函数</h2><p>对读写锁加锁的超时版本</p>
<pre><code>#include&lt;pthread.h&gt;
#include&lt;time.h&gt;
int pthread_rwlock_timedrdlock(pthread_rwlock_t *rwlock,
    const struct timespect*restrict tsptr);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *rwlock,
    const struct timespect*restrict tsptr);
</code></pre><ul>
<li>参数：<ul>
<li>rwlock：待加锁的读写锁的地址</li>
<li>tsptr：指向一个timespec的指针，该timepsec指定了一个绝对时间（并不是相对时间，比如10秒）</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回0</li>
<li>失败： 返回错误编号<br>这两个函数被调用时：</li>
</ul>
</li>
<li>如果允许加锁，那么函数将对读写锁加锁并返回0</li>
<li>如果不允许加锁，那么函数将阻塞到tsptr指定的时刻。在到达超时时刻时，pthread_mutex_timedlock不再试图对读写锁进行加锁，而是返回错误码ETIMEOUT<blockquote>
<p>可以使用clock_gettime函数获取timespec结构表示的当前时间。但是目前并不是所有平台都支持这个函数。因此也可以用gettimeofday函数获取timeval结构表示的当前时间，然后将这个时间转换为timespec结构。</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 多线程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pthread,多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[标准IO库]]></title>
      <url>/2017/12/04/%E6%A0%87%E5%87%86IO%E5%BA%93/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="流和-FILE对象"><a href="#流和-FILE对象" class="headerlink" title="流和 FILE对象"></a>流和 FILE对象</h2><ol>
<li><p>标准IO库与文件IO区别：</p>
<ul>
<li>标准IO库处理很多细节，如缓冲区分片、以优化的块长度执行IO等。</li>
<li>文件IO函数都是围绕文件描述符进行。首先打开一个文件，返回一个文件描述符；后续的文件IO操作都使用该文件描述符</li>
<li>标准IO库是围绕流进行的。当用标准IO库打开或者创建一个文件时，就有一个内建的流与之相关联<blockquote>
<p>标准IO库的函数很多都是以 <code>f</code>开头，如<code>fopen</code>、<code>fclose</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>对于ASCII字符集，一个字符用一个字节表示；对于国际字符集，一个字符可以用多个字节表示。</p>
<ul>
<li>标准IO文件流可用于单字节或者多字节字符集。流的定向决定了所处理的字符是单字节还是多字节的。</li>
<li>当一个流最初被创建时，它并没有定向。<ul>
<li>若在未定向的流上使用一个多字节IO函数，则将该流的定向设置为宽定向的（即处理多字节）</li>
<li>若在未定向的流上使用一个单字节IO函数，则将该流的定向设置为字节定向的（即处理单字节）</li>
</ul>
</li>
<li>只有两个函数可以改变流的定向<ul>
<li><code>freopen</code>函数清除一个流的定向</li>
<li><code>fwide</code>函数设置流的定向</li>
</ul>
</li>
</ul>
</li>
<li><p><code>fwide</code>函数：设置流的定向</p>
<pre><code> #include&lt;stdio.h&gt;
 #include&lt;wchar.h&gt;
 int fwide(FILE *fp,int mode);
</code></pre><ul>
<li>参数：<ul>
<li><code>fp</code>：<code>FILE</code>文件对象的指针</li>
<li><code>mode</code>：流的定向模式。<ul>
<li>如果<code>mode</code>是负数，则函数试图使指定的流为字节定向（并不保证修改成功，因为<code>fwide</code>并不改变已定向流的定向）</li>
<li>如果<code>mode</code>是正数，则函数试图使指定的流为宽定向的（并不保证修改成功，因为<code>fwide</code>并不改变已定向流的定向）</li>
<li>如果<code>mode</code>为0，则函数不试图设置流的定向，而直接返回该流定向的值</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>若流是宽定向的，返回正值</li>
<li>若流是字节定向的，返回负值</li>
<li>若流是未定向的，返回0<blockquote>
<p>这里并没有函数失败的情况</p>
</blockquote>
</li>
</ul>
<p>注意：</p>
</li>
<li><code>fwide</code>并不改变已定向流的定向。</li>
<li>如果<code>fp</code>是无效流，由于<code>fwide</code>从返回值无法得知函数执行成功还是失败。那么我们必须采用这个方法：首先在调用<code>fwide</code>之前清除<code>errno</code>。然后在<code>fwide</code>之后检查<code>errno</code>的值。通过<code>errno</code>来检测<code>fwide</code>执行成功还是失败。</li>
</ul>
</li>
<li><p><code>FILE</code>指针：当使用<code>fopen</code>函数打开一个流时，它返回一个执行<code>FILE</code>对象的指针。该对象通常是一个结构，包含了标准IO库为管理该流所需要的所有信息，包括：</p>
<ul>
<li>用于实际IO的文件描述符</li>
<li>指向用于该流缓冲区的指针</li>
<li>该流缓冲区的长度</li>
<li>当前在缓冲区中的字符数</li>
<li><p>出错标志</p>
<p>应用程序没必要检验<code>FILE</code>对象，只需要将<code>FILE</code>指针作为参数传递给每个标准IO函数。</p>
<p><img src="../imgs/std_IO/FILE_IO.JPG" alt="FILE"> </p>
</li>
</ul>
</li>
<li><p>操作系统对每个进程与定义了3个流，并且这3个流可以自动地被进程使用，他们都是定义在<code>&lt;stdio.h&gt;</code>中：</p>
<ul>
<li>标准输入：预定义的文件指针为<code>stdin</code>，它内部的文件描述符就是<code>STDIN_FILENO</code></li>
<li>标准输出：预定义的文件指针为<code>stdout</code>，它内部的文件描述符就是<code>STDOUT_FILENO</code></li>
<li>标准错误：预定义的文件指针为<code>stderr</code>，它内部的文件描述符就是<code>STDERR_FILENO</code></li>
</ul>
</li>
<li><p>标准IO库提供缓冲的目的是：尽量减少使用<code>read</code>和<code>write</code>调用的次数。标准IO库对每个IO流自动地进行缓冲管理，从而避免了程序员需要手动管理这一点带来的麻烦。</p>
<p> 标准IO库提供了三种类型的缓冲：</p>
<ul>
<li>全缓冲：此时在标准IO缓冲区被填满后，标准IO库才进行实际的IO操作。</li>
<li>行缓冲：此时当输入和输出中遇到换行符时，标准IO库执行实际的IO操作。但是注意：<ul>
<li>只要填满了缓冲区，即使还没有写一个换行符，也立即进行IO操作</li>
<li>任何时候只要通过标准IO库，从一个不带缓冲的流或者一个行缓冲的流得到输入数据，则会冲洗所有行缓冲输出流。(<font color="red">即要缓冲输入，先冲洗输出缓冲</font>)</li>
</ul>
</li>
<li><p>不带缓冲：标准IO库不对字符进行缓冲存储。此时任何IO都立即执行实际的IO操作。</p>
<p>另外：</p>
</li>
<li>在一个流上执行第一次IO操作时，相关标准的IO函数通常调用 <code>malloc</code>获取使用的缓冲区</li>
<li>缓冲区可以由标准的IO操作自动地冲洗（如，当填满一个缓冲区时），也可以手动调用<code>fflush</code>函数冲洗一个流。</li>
</ul>
</li>
<li><p>ISO C 要求下来缓冲特征：</p>
<ul>
<li>当且仅当标准输入和标准输出并不指向交互式设备时，他们才是全缓冲的</li>
<li><p>标准错误绝不会是全缓冲的。</p>
<p>很多操作系统默认使用下列类型的缓冲：</p>
</li>
<li>标准错误<code>stderr</code>时不带缓冲的</li>
<li>标准输入<code>stdin</code>和输出<code>stdout</code>：若是指向终端设备的流，则是行缓冲的；否则是全缓冲的</li>
</ul>
</li>
<li><p><code>setbuf/setvbuf</code>函数：设置流的缓冲类型</p>
<pre><code> #include&lt;stdio.h&gt;
 void setbuf(FILE *restrict fp,char *restrict buf);
 int setvbuf(FILE *restrict fp,char* restrict buf,int mode,size_t size);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>fp</code>：被打开的文件对象的指针</li>
<li><p><code>buf</code>：一个缓冲区的指针。缓冲区长度必须为<code>BUFSIZ</code>常量（该常量定义在<code>&lt;stdio.h&gt;</code>中）。</p>
<ul>
<li>如果<code>buf</code>为<code>NULL</code>，则是关闭缓冲</li>
<li>如果<code>buf</code>非<code>NULL</code>，则通常设定该流为全缓冲的。但若该流与一个设备终端相关，则设为行缓冲的</li>
</ul>
<p>对于<code>setvbuf</code>函数：</p>
</li>
<li><code>buf</code>：一个缓冲区的指针。缓冲区长度为<code>size</code>。<ul>
<li>若<code>buf</code>为<code>NULL</code>，且<code>mode</code>为<code>_IONBF</code>：则该流为不带缓冲的。因为此时忽略<code>buf</code>和<code>size</code>参数</li>
<li>若<code>buf</code>为<code>NULL</code>，且<code>mode</code>不是<code>_IONBF</code>：则标准IO库将自动为该流分片合适长度的缓冲区（即<code>BUFSIZE</code>长度），然后设定该流为指定的<code>mode</code></li>
</ul>
</li>
<li><code>mode</code>：指定缓冲类型。可以为：<ul>
<li><code>_IOFBF</code>：全缓冲。</li>
<li><code>_IOLBF</code>：行缓冲</li>
<li><code>_IONBF</code>：不带缓冲。此时忽略<code>buf</code>和<code>size</code>参数</li>
</ul>
</li>
<li><code>size</code>：缓冲的长度</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回0</li>
<li>失败： 返回非0(<font color="red">并不是-1</font>)</li>
</ul>
<p>注意：</p>
</li>
<li>如果在一个函数内分配一个自动变量类型的标准IO缓冲区，则从该函数返回之前，必须关闭流。因此自动变量是栈上分配，函数返回之后自动变量被销毁</li>
<li>某些操作系统将缓冲区的一部分存放它自己的管理操作信息，因此可以存放在缓冲区中的实际数据字节数将少于<code>size</code></li>
<li>通常推荐利用操作系统自动选择缓冲区长度并自动分配缓冲区。在这种情况下若关闭此流，则标准IO库会自动释放缓冲区</li>
</ul>
</li>
<li><p><code>fflush</code>函数：手动冲洗一个流</p>
<pre><code> #include&lt;stdio.h&gt;
 int fflush(FILE *fp);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>fp</code>：被打开的文件对象的指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回0</li>
<li>失败：返回<code>EOF</code> (<font color="red">并不是-1</font>)</li>
</ul>
<p>该函数会使得该流所有未写的数据都被传送至内核。当<code>fp</code>为<code>NULL</code>时，此函数将导致所有输出流被冲洗。</p>
<blockquote>
<ul>
<li>冲洗是双向的：输出流 —&gt; 内核 —&gt; 磁盘或者终端； 输入流—&gt; 用户缓冲区</li>
<li>冲洗并不是立即写到磁盘文件中。冲洗只是负责数据传到内核</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="打开关闭流"><a href="#打开关闭流" class="headerlink" title="打开关闭流"></a>打开关闭流</h2><ol>
<li><p><code>fopen/freopen/fdopen</code>函数：打开标准IO流</p>
<pre><code> #include&lt;stdio.h&gt;
 FILE *fopen(const char*restrict pathname,const char*restrict type);
 FILE *freopen(const char*restrict pathname,const char*restrict type,\
     FILE *restrict fp);
 FILE *fdopen(int fd,const char*type);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><p><code>type</code>：指定对该IO流的读写方式：</p>
<ul>
<li><code>&quot;r&quot;</code>或者<code>&quot;rb&quot;</code>：为读打开</li>
<li><code>&quot;w&quot;</code>或者<code>&quot;wb&quot;</code>：写打开。若文件存在则把文件截断为0长；若文件不存在则创建然后写</li>
<li><code>&quot;a&quot;</code>或者<code>&quot;ab&quot;</code>：追加写打开；若文件存在每次都定位到文件末尾；若文件不存在则创建然后写</li>
<li><code>&quot;r+&quot;</code>或者<code>&quot;r+b&quot;</code>或者<code>&quot;rb+&quot;</code>：为读和写打开</li>
<li><code>&quot;w+&quot;</code>或者<code>&quot;w+b&quot;</code>或者<code>&quot;wb+&quot;</code>：若文件存在则文件截断为0然后读写；若文件不存在则创建然后读写</li>
<li><code>&quot;a+&quot;</code>或者<code>&quot;a+b&quot;</code>或者<code>&quot;ab+&quot;</code>：若文件存在则每次都定位到文件末尾然后读写；若文件不存在则创建然后读写<blockquote>
<ul>
<li>其中<code>b</code>用于区分二进制文件和文本文件。但是由于<code>UNIX</code>内核并不区分这两种文件，所以在UNIX环境中指定<code>b</code>并没有什么卵用</li>
<li>创建文件时，无法指定文件访问权限位。POSIX默认要求为：<code>S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH</code></li>
</ul>
</blockquote>
</li>
</ul>
<p>对于 <code>fopen</code>函数：</p>
</li>
<li><code>pathname</code>：待打开文件的路径名<br>对于 <code>freopen</code>函数：</li>
<li><code>pathname</code>：待打开文件的路径名</li>
<li><p><code>fp</code>：在指定的流上打开文件。若<code>fp</code>已经打开，则先关闭该流；若<code>fp</code>已经定向，则清除该定向。</p>
<p>对于 <code>fdopen</code>函数：</p>
</li>
<li><code>fd</code>：打开文件的文件描述符</li>
<li>对于<code>fopen</code>，<code>type</code>意义稍微有点区别。因为该描述符已经被打开，所以<code>fdopen</code>为写而打开并不截断该文件。另外该文件既然被打开并返回一个文件描述符，则它一定存在。因此标准 IO追加写方式也不能创建文件</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回文件指针</li>
<li>失败： 返回<code>NULL</code></li>
</ul>
<p>这几个函数的常见用途：</p>
</li>
<li><code>fopen</code>常用于打开一个指定的文件，返回一个文件指针</li>
<li><code>freopen</code>常用于将一个指定的文件打开为一个预定义的流（标准输入、标准输出或者标准错误）</li>
<li><p><code>fdopen</code>常用于将文件描述符包装成一个标准IO流。因为某些特殊类型的文件（如管道、<code>socket</code>文件）不能用<code>fopen</code>打开，必须先获取文件描述符，然后对文件描述符调用<code>fdopen</code>。</p>
<p>注意：当以读和写类型打开一个文件时(<code>type</code>中带<code>+</code>号的类型)，有下列限制：</p>
</li>
<li>如果写操作后面没有<code>fflush,fseek,fsetpos,rewind</code>操作之一，则写操作后面不能紧跟读操作</li>
<li><p>如果读操作后面没有<code>fseek,fsetpos,rewind</code>操作之一，也没有到达文件末尾，则在读操作之后不能紧跟写操作</p>
<p>注意：按照系统默认，流被打开时是全缓冲的。但是如果流引用的是终端设备，则安装系统默认，流被打开时是行缓冲的。</p>
</li>
</ul>
</li>
<li><p><code>fclose</code>：关闭一个打开的流</p>
<pre><code> #include&lt;stdio.h&gt;
 int fclose(FILE *fp);
</code></pre><ul>
<li>参数：<ul>
<li><code>fp</code>：待关闭的文件指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回 0</li>
<li>失败： 返回 -1</li>
</ul>
<p>在该文件被关闭之前：</p>
</li>
<li><code>fclose</code>会自动冲洗缓冲中的输出数据</li>
<li>缓冲区中的输入数据被丢弃</li>
<li><p>若该缓冲区是标准IO库自动分配的，则释放此缓冲区</p>
<p>当一个进程正常终止时（直接调用<code>exit</code>函数，或者从<code>main</code>函数返回）：</p>
</li>
<li>所有带未写缓存数据的标准IO流都被冲洗</li>
<li>所有打开的标准IO流都被关闭</li>
</ul>
</li>
<li><p>示例:在 <code>main</code>函数中调用 <code>test_fopen_fwide_setvbuf</code>函数：</p>
<pre><code>void test_fopen_fwide_setvbuf()
{
 M_TRACE(&quot;---------  Begin test_fopen_fwide_setvbuf()  ---------\n&quot;);
 assert(prepare_file(&quot;test&quot;,NULL,0,S_IRWXU)==0);

 My_fwide(stdin,0); //打印 stdin 的流向
 My_fwide(stdout,0); //打印 stdout 的流向
 My_fwide(stderr,0); //打印 stderr 的流向
 print_FILE(stdin); //打印 stdin 结构
 print_FILE(stdout); //打印 stdout 结构
 print_FILE(stderr); //打印 stderr 结构

 FILE *fp=My_fopen(&quot;test&quot;,&quot;r+&quot;);
 if(NULL!=fp)
 {
     My_fwide(fp,0); //打印 fp 的流向
     My_fwide(fp,-1); //设置 fp 为字节流 然后打印 fp 的流向
     My_fwide(fp,1); //无法修改已定向的流
     print_FILE(fp);
     //**** 设置不同的缓冲 ****//
     set_full_buf(fp);
     print_FILE(fp);
     set_line_buf(fp);
     print_FILE(fp);
     set_no_buf(fp);
     print_FILE(fp);

     fclose(fp); //关闭流
 }
 un_prepare_file(&quot;test&quot;);
 M_TRACE(&quot;---------  End test_fopen_fwide_setvbuf()  ---------\n\n&quot;);
}
</code></pre><p> <img src="../imgs/std_IO/FILE_struct.JPG" alt="FILE_struct"></p>
<p> 可以看到：</p>
<ul>
<li>三个标准IO流的文件描述符依次为 0、1、2</li>
<li>未被使用的流不会分配缓冲，因此<code>stdin</code>、<code>stderr</code>的缓冲区地址是 <code>NULL</code>。刚被创建的流的缓冲区地址也是<code>NULL</code>。</li>
<li>未被使用的流是为定向的。因此<code>stdin</code>、<code>stderr</code>是未定向的。刚被创建的流的也是未定向的</li>
<li>对已经定向的流设置流向，并不会改变流的方向。但是也不报告失败。</li>
<li>未分配缓冲区的流，与非缓冲流不是一个概念。非缓冲流是分配了缓冲区的，它的缓冲区长度为1。而未分配缓冲区的流，其缓冲区是无效待分配的。</li>
</ul>
</li>
</ol>
<h2 id="读写流"><a href="#读写流" class="headerlink" title="读写流"></a>读写流</h2><ol>
<li><p>一旦打开了流，可以在3中不同类型的非格式化IO中选择，对流进行读、写操作：</p>
<ul>
<li>每次一个字符的IO。一次读、写一个字符。若流是带缓冲的，则标准IO函数处理所有缓冲</li>
<li>每次一行的IO。一次读、写一行。每一行都以一个换行符终止</li>
<li>二进制IO。每次IO读、写某种数量的对象。<blockquote>
<p>格式化IO由<code>printf</code>族函数完成</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>getc/fgetc/getchar</code>函数：一次读一个字符：</p>
<pre><code> #include&lt;stdio.h&gt;
 int getc(FILE*fp);
 int fgetc(FILE*fp);
 int getchar(void);
</code></pre><ul>
<li>参数：<ul>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：则返回下一个字符</li>
<li>到达文件尾端：返回<code>EOF</code></li>
<li>失败：返回<code>EOF</code></li>
</ul>
<p>注意：</p>
</li>
<li><code>getchar()</code>等价于<code>getc(stdin)</code>。它从标准输入中读取一个字符</li>
<li><code>getc</code>和<code>fgetc</code>的区别在于：<code>getc</code>可能通过宏定义来实现，而<code>fgetc</code>不能实现为宏。因此：<ul>
<li><code>getc</code>的参数不应该是具有副作用的表达式，因为它可能被计算多次</li>
<li><code>fgetc</code>可以得到其地址，这就允许将<code>fgetc</code>的地址作为参数传递。而<code>getc</code>不行</li>
<li>调用<code>fgetc</code>所需的时间可能比调用<code>getc</code>长，因为函数调用所需时间通常比调用宏长</li>
</ul>
</li>
<li>这三个函数在返回下一个字符时，将<code>unsigned char</code>类型转换成了<code>int</code>类型。<blockquote>
<p>因为需要通过返回<code>EOF</code>来标记到达末尾或者出错。而<code>EOF</code>通常是常量 -1 。所以需要返回 <code>int</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>ferror/feof</code>函数：查看是读文件出错，还是到达读文件遇到尾端</p>
<pre><code> #include&lt;stdio.h&gt;
 int ferror(FILE *fp);
 int feof(FILE *fp);
</code></pre><ul>
<li>参数：<ul>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>若条件为真：则返回非 0</li>
<li>若条件为假： 则返回 0</li>
</ul>
<p>当读流返回<code>EOF</code>时，我们可能不清楚到底是遇到错误，还是读到了文件尾端。此时必须调用<code>ferror</code>或者<code>feof</code>来区别这两种情况。</p>
</li>
</ul>
</li>
<li><p><code>clearerr</code>函数：清除文件出错标志和文件结束标志</p>
<pre><code> #include&lt;stdio.h&gt;
 void clearerr(FILE *fp)
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
<p>在大多数操作系统中，每个流在<code>FILE</code>对象中维护了两个标志：</p>
</li>
<li>出错标志</li>
<li><p>文件结束标志</p>
<p>调用<code>clearerr</code>函数可以清除这两个标志</p>
</li>
</ul>
</li>
<li><p><code>ungetc</code>函数：将字符压回流中</p>
<pre><code> #include&lt;stdio.h&gt;
 int ungetc(int c,FILE *fp);
</code></pre><ul>
<li>参数：<ul>
<li><code>c</code>：待压入字符转换成的整数值</li>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：则返回 <code>c</code></li>
<li>失败：返回<code>EOF</code></li>
</ul>
<p>注意：</p>
</li>
<li>若根据某个序列向流中压入一串字符，则再从该流中读取的字符序列是逆序的。即最后压入的字符最先读出</li>
<li>可以执行任意次数的压入单个字符，但是不支持一次压入多个字符</li>
<li><p>不能压入 <code>EOF</code>。但是当已经读到文件尾端时，支持压入一个字符，此时<code>ungetc</code>会清除该流的文件结束标志</p>
<p><code>ungetc</code>通常用于这样的情形：正在读取一个输入流，然后需要根据某个字符串（标记字符串）来对输入进行切分。那么我们就需要先看一看下一个字符，来决定如何处理当前字符。此时需要方便的将刚查看的字符回送。</p>
<blockquote>
<p><code>ungetc</code>只是将字符压入流缓冲区中，并没有压入底层的磁盘文件或者操作系统内核中</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>putc/fputc/putchar</code>函数：一次写一个字符</p>
<pre><code> #include&lt;stdio.h&gt;
 int putc(int c,FILE*fp);
 int fputc(int c,FILE*fp);
 int putchar(int c);
</code></pre><ul>
<li>参数：<ul>
<li><code>c</code>：待写字符转换成的整数值</li>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：则返回 <code>c</code></li>
<li>失败：返回<code>EOF</code></li>
</ul>
<p>注意：</p>
</li>
<li><code>putchar(c)</code>等价于<code>putc(c,stdout)</code>。它向标准输出中写一个字符</li>
<li><code>putc</code>和<code>fputc</code>的区别在于：<code>putc</code>可能通过宏定义来实现，而<code>fputc</code>不能实现为宏</li>
</ul>
</li>
<li><p><code>fgets/gets</code>函数：一次读一行字符：</p>
<pre><code> #include&lt;stdio.h&gt;
 char *fgets(char *restrict buf,int n, FILE* restrict fp);
 char *gets(char *buf);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><p><code>buf</code>：存放读取到的字符的缓冲区地址</p>
<p>对于 <code>fgets</code>函数：</p>
</li>
<li><code>n</code>：缓冲区长度</li>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：则返回<code>buf</code></li>
<li>到达文件尾端：返回<code>NULL</code></li>
<li>失败：返回<code>NULL</code></li>
</ul>
<p>注意：</p>
</li>
<li>对于<code>fgets</code>函数，必须指定缓冲区的长度<code>n</code>。该函数一直读到下一个换行符为止，但是不超过<code>n-1</code>个字符。<ul>
<li>无论读到多少个字符，缓冲区一定以<code>null</code>字节结尾</li>
<li>若某一行包括换行符超过 <code>n-1</code>个字节，则<code>fgets</code>只返回一个不完整的行；下次调用<code>fgets</code>会继续读该行</li>
</ul>
</li>
<li>对于<code>gets</code>函数，从标准输入总读取字符。由于无法指定缓冲区的长度，因此很可能造成缓冲区溢出漏洞。故该函数不推荐使用</li>
<li>对于发生错误和读到末尾，都是返回<code>NULL</code>    </li>
</ul>
</li>
</ol>
<ol>
<li><p><code>fputs/puts</code>函数：一次写一行字符：</p>
<pre><code> #include&lt;stdio.h&gt;
 int fputs(const char* restrict str,FILE*restrict fp);
 int puts(const char*str);
</code></pre><ul>
<li>参数：<ul>
<li><code>str</code>：待写的字符串</li>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：则返回非负值</li>
<li>失败：返回<code>EOF</code></li>
</ul>
<p>注意：</p>
</li>
<li><code>fputs</code>和<code>puts</code>都是将一个以<code>null</code>字节终止的字符串写到流中，末尾的<code>null</code>字符不写出！。<font color="red">字符串不要求以换行符结尾！</font></li>
<li><code>puts</code>将字符串写到标准输出，末尾的<code>null</code>字符不写出！<font color="red">但是<code>puts</code>随后又将一个换行符写到标准输出中！</font>。而<code>fputs</code>不会自动添加换行符。<blockquote>
<p>虽然<code>puts</code>是安全的，但是我们也是要避免使用它，以免要记住它在最后是否添加了一个换行符。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>fread/fwrite</code>函数：执行二进制读写IO</p>
<pre><code> #include&lt;stdio.h&gt;
 size_t fread(void *restrict ptr,size_t size,size_t nobj,FILE *restrict fp);
 size_t fwrite(const void*restrict ptr,size_t size,size_t nobj,FILE *restrict fp);
</code></pre><ul>
<li>参数：<ul>
<li><code>ptr</code>:存放二进制数据对象的缓冲区地址</li>
<li><code>size</code>：单个二进制数据对象的字节数（比如一个<code>struct</code>的大小）</li>
<li><code>nobj</code>：二进制数据对象的数量</li>
<li><code>fp</code>：打开的文件对象指针</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功或失败： 读/写的对象数<ul>
<li>对于读：如果出错或者到达文件尾端，则此数字可以少于<code>nobj</code>。此时应调用<code>ferror</code>或者<code>feof</code>来判断究竟是那种情况</li>
<li>对于写：如果返回值少于<code>nobj</code>，则出错</li>
</ul>
</li>
</ul>
<p>使用二进制IO的基本问题是：它只能用在读取同一个操作系统上已写的数据。如果跨操作系统读写，则很可能工作异常。因为：</p>
</li>
<li>同一个<code>struct</code>，可能在不同操作系统或者不同编译系统中，成员的偏移量不同</li>
<li>存储多字节整数和浮点数的二进制格式在不同的操作系统中可能不同</li>
</ul>
</li>
</ol>
<ol>
<li><p>有三种方法定位标准IO流</p>
<ul>
<li><p>通过 <code>ftell/fseek</code>函数：</p>
<pre><code>  #include&lt;stdio.h&gt;
  long ftell(FILE *fp);
</code></pre><ul>
<li>参数：<code>fp</code>：打开的文件对象指针</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回当前文件位置指示</li>
<li><p>失败：返回 -1L</p>
<p>若是二进制文件，则文件指示器是从文件开始位置度量的，并以字节为度量单位。<code>ftell</code>就是返回这种字节位置。</p>
</li>
</ul>
<pre><code>#include&lt;stdio.h&gt;
int fseek(FILE *fp,long offset,int whence);
</code></pre></li>
<li>参数：<ul>
<li><code>fp</code>：打开的文件对象指针</li>
<li><code>offset</code>：偏移量。其解释依赖于<code>whence</code></li>
<li><code>whence</code>：偏移量的解释方式：<ul>
<li><code>SEEK_SET</code>常量：表示从文件的起始位置开始</li>
<li><code>SEEK_CUR</code>常量：表示从文件的当前位置开始</li>
<li><code>SEEK_END</code>常量：表示从文件的尾端开始</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回 0</li>
<li><p>失败：返回 -1</p>
<blockquote>
<p>原书说，对文本文件和二进制文件，<code>fseek</code>定位有某些限制。但是经过在<code>ubuntu 16.04</code>上测试，可以任意定位。并没有要求说不能定位到文件尾端，以及必须用<code>SEEK_SET</code>等诸多限制。</p>
</blockquote>
</li>
</ul>
<pre><code>#include&lt;stdio.h&gt;
void rewind(FILE *fp);
</code></pre></li>
<li><p>参数：</p>
<ul>
<li><p><code>fp</code>：打开的文件对象指针</p>
<p><code>rewind</code>函数将一个流设置到文件的起始位置</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>通过 <code>ftello/fseeko</code>函数：除了偏移量类型为<code>off_t</code>而不是<code>long</code>以外，<code>ftello/fseeko</code>与<code>ftell/fseek</code>相同</p>
<pre><code>  #include&lt;stdio.h&gt;
  off_t ftello(FILE *fp);
</code></pre><ul>
<li>参数：<code>fp</code>：打开的文件对象指针</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回当前文件位置指示</li>
<li>失败：返回 (off_t)-1</li>
</ul>
<pre><code>#include&lt;stdio.h&gt;
int fseeko(FILE *fp,off_t offset,int whence);
</code></pre></li>
<li>参数：<ul>
<li><code>fp</code>：打开的文件对象指针</li>
<li><code>offset</code>：偏移量。其解释依赖于<code>whence</code></li>
<li><code>whence</code>：偏移量的解释方式：<ul>
<li><code>SEEK_SET</code>常量：表示从文件的起始位置开始</li>
<li><code>SEEK_CUR</code>常量：表示从文件的当前位置开始</li>
<li><code>SEEK_END</code>常量：表示从文件的尾端开始</li>
</ul>
</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：返回 0</li>
<li>失败：返回 -1</li>
</ul>
</li>
</ul>
</li>
<li><p><code>fgetpos/fsetpos</code>函数：由 ISO C 引入</p>
<pre><code>  #include&lt;stdio.h&gt;
  int fgetpos(FILE *restrict fp,fpos_t *restrict pos);
  int fsetpos(FILE * fp,const fpos_t * pos);
</code></pre><ul>
<li>参数：<ul>
<li><code>fp</code>：打开的文件对象指针</li>
<li><code>pos</code>：存放偏移量的缓冲区</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功： 返回 0</li>
<li>失败： 返回非 0</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>示例:在<code>main</code>函数中调用<code>test_get_put_seek</code> 函数：</p>
<pre><code>void test_get_put_seek()
{
M_TRACE(&quot;---------  Begin test_get_put_seek()  ---------\n&quot;);
assert(prepare_file(&quot;test_char&quot;,NULL,0,S_IRWXU)==0);
assert(prepare_file(&quot;test_line&quot;,NULL,0,S_IRWXU)==0);
assert(prepare_file(&quot;test_binary&quot;,NULL,0,S_IRWXU)==0);

FILE *file_char=My_fopen(&quot;test_char&quot;,&quot;r+&quot;);
FILE *file_line=My_fopen(&quot;test_line&quot;,&quot;r+&quot;);
FILE *file_binary=My_fopen(&quot;test_binary&quot;,&quot;rb+&quot;);

if((file_char!=NULL) &amp;&amp; (file_line!=NULL) &amp;&amp; (file_binary!=NULL))
{
    printf(&quot;***** test read write char*****\n&quot;);
    _test_read_write_char(file_char);
    printf(&quot;\n\n***** test read write str*****\n&quot;);
    _test_read_write_line(file_line);
    printf(&quot;\n\n***** test read write binary*****\n&quot;);
    _test_read_write_binary(file_binary);
}

//*** 关闭文件  ***//
if(file_char!=NULL) fclose(file_char);
if(file_line!=NULL) fclose(file_line);
if(file_binary!=NULL) fclose(file_binary);

un_prepare_file(&quot;test_char&quot;);
un_prepare_file(&quot;test_line&quot;);
un_prepare_file(&quot;test_binary&quot;);
M_TRACE(&quot;---------  End test_get_put_seek()  ---------\n\n&quot;);
}
</code></pre><p><img src="../imgs/std_IO/FILE_read_write_seek.JPG" alt="FILE_read_write_seek"></p>
</li>
</ol>
<h2 id="格式化IO"><a href="#格式化IO" class="headerlink" title="格式化IO"></a>格式化IO</h2><ol>
<li><p>格式化输出函数：</p>
<pre><code> #include&lt;stdio.h&gt;
 int printf(const char *restrict format,...);
 int fprintf(FILE *restrict fp,const char*restrict format,...);
 int dprintf(int fd,const char *restrict format,...);
 int sprintf(char *restrict buf,const char*restrict format,...);
 int snprintf(char *restrict buf,size_t n,const char *restrict format,...);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><p><code>format,...</code>：输出的格式化字符串</p>
<p>对于<code>fprintf</code>：</p>
</li>
<li><p><code>fp</code>：打开的文件对象指针。格式化输出到该文件中</p>
<p>对于<code>dprintf</code>：</p>
</li>
<li><p><code>fd</code>：打开文件的文件描述符。格式化输出到该文件中</p>
<p>对于<code>sprintf</code>:</p>
</li>
<li><p><code>buf</code>：一个缓冲区的指针。格式化输出到该缓冲区中</p>
<p>对于<code>snprintf</code>:</p>
</li>
<li><code>buf</code>：一个缓冲区的指针。格式化输出到该缓冲区中</li>
<li><code>n</code>：缓冲区的长度。格式化输出到该缓冲区中</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回输出字符数（不包含<code>null</code>字节）</li>
<li>失败：返回负数</li>
</ul>
<p><code>printf</code>将格式化输出写到标准输出；<code>fprintf</code>写到指定的流；<code>dprintf</code>写到指定的文件描述符；<code>sprintf</code>写到数组<code>buf</code>中；<code>snprintf</code>也是写到数组<code>buf</code>中，但是在该数组的尾端自动添加一个<code>null</code>字节（该字节不包含在返回值中）。    </p>
</li>
<li>通常不推荐使用<code>sprintf</code>，因为它可能引起缓冲区溢出流动</li>
<li>如果格式化输出一共 s 个字节，那么<code>snprintf</code>的数组缓冲区至少为<code>s+1</code>个字节，否则发生截断</li>
</ul>
</li>
<li><p>格式说明：<code>%[flags][fldwidth][precision][lenmodifier]convtype</code></p>
<ul>
<li>标志<code>flags</code>有：<ul>
<li><code>&#39;</code> : 撇号，将整数按照千位分组字符</li>
<li><code>-</code> ： 在字段内左对齐输出</li>
<li><code>+</code>： 总是显示带符号转换的正负号</li>
<li><code> </code>：空格。如果第一个字符不是正负号，则在其前面加一个空格</li>
<li><code>#</code>：指定另一种转换形式（如，对于十六进制格式，加 0x 前缀）</li>
<li><code>0</code>：添加前导0（而非空格） 进行填充</li>
</ul>
</li>
<li><code>fldwidth</code>：说明最小字段宽度。转换后参数字符如果小于宽度，则多余字符位置用空格填充。<ul>
<li>字段宽度是一个非负十进制数，或者是一个星号 <code>*</code></li>
</ul>
</li>
<li><code>precision</code>：说明整型转换后最少输出数字位数、浮点数转换后小数点后的最少位数、字符串转换后最大字节数。<ul>
<li>精度是一个点<code>.</code>后跟随一个可选的非负十进制数或者一个星号<code>*</code><blockquote>
<p>宽度和精度可以为<code>*</code>，此时一个整型参数指定宽度或者精度的值。该整型参数正好位于被转换的参数之前</p>
</blockquote>
</li>
</ul>
</li>
<li><code>lenmodifier</code>：说明参数长度。可以为：<ul>
<li><code>hh</code>：将相应的参数按照<code>signed char</code>或者<code>unsigned char</code>类型输出</li>
<li><code>h</code>：将相应的参数按照<code>signed short</code>或者<code>unsigned short</code>类型输出</li>
<li><code>l</code>：将相应的参数按照<code>signed long</code>或者<code>unsigned long</code>或者宽字符类型输出</li>
<li><code>ll</code>：将相应的参数按照<code>signed longlong</code>或者<code>unsigned longlong</code>类型输出</li>
<li><code>j</code>：<code>intmax_t</code>或者<code>uintmax_t</code></li>
<li><code>z</code>：<code>size_t</code></li>
<li><code>t</code>：<code>ptrdiff_t</code></li>
<li><code>L</code>：<code>long double</code></li>
</ul>
</li>
<li><code>convtype</code>：控制如何解释参数<ul>
<li><code>d</code>或者<code>i</code>：有符号十进制</li>
<li><code>o</code>：无符号八进制</li>
<li><code>u</code>：无符号十进制</li>
<li><code>x</code>或者<code>X</code>：无符号十六进制</li>
<li><code>f</code>或者<code>F</code>：双精度浮点数</li>
<li><code>e</code>或者<code>E</code>：指数格式双精度浮点数</li>
<li><code>g</code>或者<code>G</code>：根据转换后的值解释为<code>f、F、e、E</code></li>
<li><code>a</code>或者<code>A</code>：十六进制指数格式双精度浮点数</li>
<li><code>c</code>：字符（若带上长度修饰符<code>l</code>,则为宽字符）</li>
<li><code>s</code>：字符串（若带上长度修饰符<code>l</code>,则为宽字符）</li>
<li><code>p</code>：指向<code>void</code>的指针</li>
<li><code>n</code>：到目前位置，此<code>printf</code>调用输出的字符的数目将被写入到指针所指向的带符号整型中</li>
<li><code>%</code>：一个<code>%</code>字符</li>
<li><code>C</code>：宽字符，等效于<code>lc</code></li>
<li><code>S</code>：宽字符串，等效于<code>ls</code></li>
</ul>
</li>
</ul>
</li>
<li><p><code>printf</code>族的变体：将可变参数<code>(...)</code>替换成了<code>va_list arg</code>:</p>
<pre><code> #include&lt;stdarg.h&gt;
 #include&lt;stdio.h&gt;
 int vprintf(const char *restrict format,va_list arg);
 int vfprintf(FILE *restrict fp,const char*restrict format,va_list arg);
 int vdprintf(int fd,const char *restrict format,va_list arg);
 int vsprintf(char *restrict buf,const char*restrict format,va_list arg);
 int vsnprintf(char *restrict buf,size_t n,const char *restrict format,va_list arg);
</code></pre><p> 其参数与返回值与前面的<code>printf</code>族完全相同</p>
</li>
</ol>
<ol>
<li><p>格式化输入函数：</p>
<pre><code> #include&lt;stdio.h&gt;
 int scanf(const char*restrict format,...);
 int fscanf(FILE *restrict fp,const char *restrict format,...);
 int sscanf(const char *restrict buf,const char *restrict format,...);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><p><code>format,...</code>：格式化字符串</p>
<p>对于<code>fscanf</code>：</p>
</li>
<li><p><code>fp</code>：打开的文件对象指针。从流中读取输入</p>
<p>对于<code>sscanf</code>：</p>
</li>
<li><code>buf</code>：一个缓冲区指针。从该缓冲区中读取输入</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回赋值的输入项数</li>
<li>提前到达文件尾端：返回<code>EOF</code></li>
<li>失败：返回<code>EOF</code></li>
</ul>
<p><code>scanf</code>族用于分析输入字符串，将字符序列转换成指定类型的变量。在格式之后的各参数中包含了变量的地址，用转换结果对这些变量赋值。</p>
</li>
<li>除了转换说明和空白字符以外，格式字符串中的其他字符必须与输入匹配。如有一个字符不匹配，则停止后续处理，不再读输入的其余部分。</li>
<li>转换说明的格式为：<code>%[*][fldwidth][m][lenmodifier]convtype</code>：<ul>
<li><code>*</code>：用于抑制转换。按照转换说明的其余部分对输入进行转换，但是转换结果不存放在参数中而是抛弃</li>
<li><code>fldwidth</code>：说明最大宽度，即最大字符数</li>
<li><code>lenmodifier</code>：说明要转换结果赋值的参数大小。见前述说明</li>
<li><code>convtype</code>：类似前述说明。但是稍有区别：输入中的带符号的数值可以赋给无符号类型的变量</li>
<li><code>m</code>：用于强迫内存分配。当<code>%c,%s</code>时，如果指定了<code>m</code>，则会自动分配内存来容纳转换的字符串。同时该内存的地址会赋给指针类型的变量（即要求对应的参数必须是指针的地址）。同时要求程序员负责释放该缓冲区（通过<code>free</code>函数）</li>
</ul>
</li>
</ul>
</li>
<li><p><code>scanf</code>族也有一类变体：将可变参数<code>(...)</code>替换成了<code>va_list arg</code>:</p>
<pre><code> #include&lt;stdarg.h&gt;
 #include&lt;stdio.h&gt;
 int vscanf(const char*restrict format,va_list arg);
 int vfscanf(FILE *restrict fp,const char *restrict format,va_list arg);
 int vsscanf(const char *restrict buf,const char *restrict format,va_list arg);
</code></pre></li>
<li><p>示例： 在 <code>main</code>函数中调用<code>test_printf_scanf</code>函数：</p>
</li>
</ol>
<pre><code>```
</code></pre><p>void test_printf_scanf()<br>{<br>    M_TRACE(“———  Begin test_printf_scanf()  ———\n”);<br>    printf(“<strong><strong> test printf  <em>*</em></strong></strong>\n”);<br>    _test_printf();<br>    printf(“\n\n<strong><strong> test snprintf  <em>*</em></strong></strong>\n”);<br>    _test_snprintf();<br>    printf(“\n\n<strong><strong> test scanf  <em>*</em></strong></strong>\n”);<br>    _test_scanf();<br>    printf(“\n\n<strong><strong> test sscanf  <em>*</em></strong></strong>\n”);<br>    _test_sscanf();<br>    M_TRACE(“———  End test_printf_scanf()  ———\n\n”);<br>}</p>
<pre><code>```    
![print_scan](../imgs/std_IO/print_scan.JPG) 
</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p><code>fileno</code>函数：获取文件对象的文件描述符</p>
<pre><code> #include&lt;stdio.h&gt;
 int fileno(FILE *fp);
</code></pre><ul>
<li>参数：<ul>
<li><code>fp</code>：打开的文件对象的指针</li>
</ul>
</li>
<li>返回值： 返回与该流相关联的文件描述符</li>
</ul>
</li>
<li><p><code>tmpnam/tmpfile</code>函数：创建临时文件    </p>
<pre><code> #include&lt;stdio.h&gt;
 char *tmpnam(char *ptr);
 FILE *tmpfile(void);
</code></pre><ul>
<li><code>tmpnam</code>参数：<ul>
<li><code>ptr</code>：指向存放临时文件名的缓冲区的指针<ul>
<li>若为<code>NULL</code>，则产生的路径名存放在一个静态区中，指向该静态区的指针作为函数值返回<blockquote>
<p>下次再调用<code>tmpnam</code>时，会重写该静态区</p>
</blockquote>
</li>
<li>如果为非<code>NULL</code>，则认为它指向长度至少为<code>L_tmpnam</code>个字符的数组，产生的路径名存放在该缓冲区中，返回<code>ptr</code>。<code>L_tmpnam</code>常量定义在<code>&lt;stdio.h&gt;</code>头文件中</li>
</ul>
</li>
</ul>
</li>
<li><code>tmpnam</code>返回值：返回指向唯一路径名的指针</li>
<li><p><code>tmpfile</code>返回值：</p>
<ul>
<li>成功：返回文件指针</li>
<li>失败：返回<code>NULL</code></li>
</ul>
<p><code>tmpnam</code>函数产生一个与现有文件名不同的有效路径名字符串。每次调用它时，都产生一个不同路径名。最多调用次数是<code>TMP_MAX</code>次（定义在<code>&lt;stdio.h&gt;</code>中）</p>
<blockquote>
<p>它只创建独一无二的文件名，但是并不创建临时文件</p>
</blockquote>
<p><code>tmpfile</code>是创建一个临时二进制文件（类型<code>wb+</code>），在关闭该文件或者程序结束时将自动删除这种文件</p>
<blockquote>
<p><code>UNIX</code>对二进制文件、文本文件并不进行特殊区分</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>mkdtemp/mkstemp</code>函数：创建临时文件（由SUS 标准给出）</p>
<pre><code> #include&lt;stdlib.h&gt;
 char *mkdtemp(char *template);
 int mkstemp(char *template);
</code></pre><ul>
<li>参数：<ul>
<li><code>template</code>：一个字符串。这个字符是最末6个字符设置为<code>XXXXXX</code>的路径名。函数将这些占位符替代成不同的字符来构建一个唯一的路径名。若成功的话，这两个函数将修改<code>template</code>字符串来反映临时文件的名字<blockquote>
<p>因为函数会修改<code>template</code>,因此一定不能用常量字符串来赋值！</p>
</blockquote>
</li>
</ul>
</li>
<li><code>mkdtemp</code>返回值：<ul>
<li>成功：返回指向目录名的指针</li>
<li>失败：返回<code>NULL</code></li>
</ul>
</li>
<li><p><code>mkstemp</code>返回值：</p>
<ul>
<li>成功： 返回文件描述符</li>
<li>失败： 返回 -1</li>
</ul>
<p><code>mkdtemp</code>函数创建了一个目录，该目录有一个唯一的名字；<code>mkstemp</code>函数创建了一个文件，该文件有一个唯一的名字。名字是通过<code>template</code>字符串进程构建的。</p>
</li>
<li><code>mkdtemp</code>函数创建的目录具有权限位集： <code>S_IRUSR|S_IWUSR|S_IXUSR</code>。调用进程的文件模式创建屏蔽字可以进一步限制这些权限</li>
<li><code>mkstemp</code>函数返回的文件描述符以读写方式打开。它创建的文件用访问权限位：<code>S_IRUSR|S_IWUSR</code></li>
<li><code>mkstemp</code>创建的临时文件并不会自动删除</li>
</ul>
</li>
<li><p>示例：在<code>main</code>函数中调用<code>test_tmpnam_mkdtemp</code>函数：</p>
<pre><code>void test_tmpnam_mkdtemp()
{
 M_TRACE(&quot;---------  Begin test_printf_scanf()  ---------\n&quot;);
 printf(&quot;******** test tmpnam ********\n&quot;);
 _test_tmpnam();
 printf(&quot;\n\n******** test mkdtemp ********\n&quot;);
 _test_mkdtemp();
 M_TRACE(&quot;---------  End test_printf_scanf()  ---------\n\n&quot;);
}
</code></pre><p> <img src="../imgs/std_IO/make_temp_file.JPG" alt="make_temp_file"> </p>
</li>
<li><p>内存流：一种标准IO流，虽然它通过 <code>FILE</code>指针来访问，但是并没有底层的文件 。所有的IO都是通过在缓冲区和主存之间来回传送字节来完成。</p>
<blockquote>
<p>虽然它看起来像是文件流，但是更适用于字符串操作</p>
</blockquote>
<ul>
<li><p>创建内存流：</p>
<pre><code>  #include&lt;stdio.h&gt;
  FILE *fmemopen(void *restrict buf,size_t size,const char *restrict type);
</code></pre><ul>
<li>参数：<ul>
<li><code>buf</code>：内存流缓冲区的起始地址</li>
<li><code>size</code>：内存流缓冲区的大小（字节数）<ul>
<li>若<code>buf</code>为<code>NULL</code>时，则函数负责分配<code>size</code>字节的缓冲区，并在流关闭时自动释放分配的缓冲区</li>
</ul>
</li>
<li><code>type</code>:控制如何使用流（即打开内存流的方式）：<ul>
<li><code>r</code>或者<code>rb</code>：读打开</li>
<li><code>w</code>或者<code>wb</code>：写打开</li>
<li><code>a</code>或者<code>ab</code>：追加打开；为在第一个<code>null</code>字节处写打开</li>
<li><code>r+</code>或者<code>r+b</code>或<code>rb+</code>：读写打开</li>
<li><code>w+</code>或者<code>w+b</code>或<code>wb+</code>：把文件截断为0，然后读写打开</li>
<li><code>a+</code>或者<code>a+b</code>或<code>ab+</code>：追加；为在第一个<code>null</code>字节处读写打开</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回流指针</li>
<li>失败：返回<code>NULL</code></li>
</ul>
<p>注意：</p>
</li>
<li>无论何时以追<code>a</code>方式打开内存流时，当前文件位置设为缓冲区中第一个<code>null</code>字节处。<ul>
<li>若缓冲区中不存在<code>null</code>字节，则当前位置设为缓冲结尾的后一个字节</li>
</ul>
</li>
<li>当内存流不是<code>a</code>方式打开时，当前位置设置为缓冲区的开始位置</li>
<li>如果<code>buf</code>是<code>null</code>，则打开流进行读或者写都没有任何意义。因为此时缓冲区是通过<code>fmemopen</code>分配的，没办法找到缓冲区的地址。</li>
<li>任何时候需要增加流缓冲区中数据流以及调用<code>fclose、fflush、fseek、fseeko、fsetpos</code>时都会在当前位置写入一个<code>null</code>字节</li>
</ul>
</li>
<li><p>创建内存流的其他两个函数：</p>
<pre><code>  #include&lt;stdio.h&gt;
  FILE *open_memstream(char **bufp,size_t *sizep);
  #include &lt;wchar.h&gt;
  FILE *open_wmemstream(wchar_t **bufp,size_t *sizep);
</code></pre><ul>
<li>参数：<ul>
<li><code>bufp</code>：指向缓冲区地址的指针（用于返回缓冲区地址）</li>
<li><code>sizep</code>:指向缓冲区大小的指针（用于返回缓冲区大小）</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回流指针</li>
<li>失败：返回 <code>NULL</code></li>
</ul>
<p>这两个函数创建的流：</p>
</li>
<li>只能写打开</li>
<li>缓冲区由函数自动创建</li>
<li>关闭流后需要程序员释放缓冲区</li>
<li><p>对流添加字节会增加缓冲区大小</p>
<p>在缓冲区地址和大小使用上要遵守规则：</p>
</li>
<li>缓冲区地址和长度只有在调用<code>fclose</code>或者<code>fflush</code>后才有效</li>
<li>这些值只有在下一次写入或者调用<code>fclose</code>之前才有效。因为缓冲区可能增长，也可能需要重新分配</li>
</ul>
</li>
</ul>
</li>
<li><p>示例：在<code>main</code>函数中调用<code>test_memstream</code>函数：</p>
<pre><code>void test_memstream()
{
 M_TRACE(&quot;---------  Begin test_memstream()  ---------\n&quot;);
 char mem_buffer[16];
 FILE *fp=My_fmemopen(mem_buffer,16,&quot;r+&quot;);
 if(NULL!=fp)
 {

     char read_write_buffer[8];
     My_ftello(fp);   // 查看当前位置
     //**** 写入 ****//
     My_fputs(&quot;abcdefg\n&quot;,fp); // 每次7个字符加一个换行符
     My_fputs(&quot;0123456789&quot;,fp); // 没有换行符
     My_ftello(fp);   // 查看当前位置
     fflush(fp);
     print_char_buffer(mem_buffer,16);
     //**** 读取 ****//
     My_fseeko(fp,0,SEEK_SET); //重定位到文件头
     My_ftello(fp); // 查看当前位置
     My_fgets(read_write_buffer,8,fp); // 读取 abcdefg
     My_fgets(read_write_buffer,8,fp); // 读取 \n
     My_fgets(read_write_buffer,8,fp);// 读取 0123456，文件指针指向 null 字节
     My_fgets(read_write_buffer,8,fp);// 遇到 EOF，即 null 字节 （最后一个字节为 null 字节，因此有效字节只有15个字节）
     My_ftello(fp); // 查看当前位置，文件指针指向最后一个字节的下一个字节
     My_fgets(read_write_buffer,8,fp);// 遇到 EOF，此时读取返回 EOF，并且是 ferror 返回真，且 feof 返回真
     printf(&quot;feof=%d,ferror=%d\n&quot;,feof(fp),ferror(fp)); //ferror 返回真，且 feof 返回真

     print_char_buffer(mem_buffer,16); // 读取并不会删除 mem_buffer 中的内容
     fclose(fp);
 }
 M_TRACE(&quot;---------  End test_memstream()  ---------\n\n&quot;);
}
</code></pre><p> <img src="../imgs/std_IO/mem_FILE_stream.JPG" alt="mem_FILE_stream"> </p>
</li>
<li><p>标准IO库的缺点：效率不高。这与它需要复制的数据量有关。当使用每次一行的函数<code>fgets/fputs</code>时，通常需要复制两次数据：</p>
<ul>
<li>内核和标准IO缓冲区之间（当调用<code>read/write</code>时）</li>
<li>标准IO缓冲区和用户程序的缓冲区之间%  </li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> apue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> apue,文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件和目录]]></title>
      <url>/2017/12/04/%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h2 id="一、-stat-结构和权限相关"><a href="#一、-stat-结构和权限相关" class="headerlink" title="一、 stat 结构和权限相关"></a>一、 stat 结构和权限相关</h2><ol>
<li><p>四个<code>stat</code>函数：返回文件或者目录的信息结构：</p>
<pre><code> #include&lt;sys/stat.h&gt;
 int stat(const char * restrict pathname, struct stat*restrict buf);
 int fstat(int fd, struct stat* buf);
 int lstat(const char* restrict pathname,struct stat *restrict buf);
 int fstatat(int fd,const char*restrict pathname,struct stat*restrict buf,int flag);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>pathname</code>：文件或者目录的名字</li>
<li><code>buf</code>：存放信息结构的缓冲区</li>
<li><code>fd</code>：打开的文件描述符<ul>
<li>对于<code>fstat</code>，该文件就是待查看信息的文件</li>
<li>对于<code>fstatat</code>，该文件是并不是待查看信息的文件。待查看信息的文件时已该<code>fd</code>对于的目录相对路径定位的</li>
</ul>
</li>
<li><p><code>flag</code>：控制着<code>fstatat</code>函数是否跟随一个符号链接。</p>
<p>对于<code>fstatat</code>函数：</p>
</li>
<li><p>待查看的文件名是由<code>fd</code>和<code>pathname</code>共同决定的。</p>
<ul>
<li>如果<code>pathname</code>是个绝对路径，则忽略<code>fd</code>参数</li>
<li>如果<code>pathname</code>是个相对路径路径，且 <code>fd=AT_FDCWD</code>，则在当前工作目录的路径下查找<code>pathname</code></li>
<li>如果<code>pathname</code>是个相对路径路径，且 <code>fd!=AT_FDCWD</code>，则在<code>fd</code>对应的打开目录下查找<code>pathname</code></li>
</ul>
</li>
<li><code>flag</code>：控制着<code>fstatat</code>函数是否跟随一个符号链接。当<code>!AT_SYMLINK_FOLLOW</code>标志被设置时，查看的是<code>pathname</code>（如果它是个符号链接）本身的信息；否则默认查看的是<code>pathname</code>（如果它是个符号链接）链接引用的文件的信息。    </li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回 0</li>
<li>失败： 返回 -1</li>
</ul>
<p>注意：</p>
</li>
<li><code>lstat</code>类似于<code>stat</code>，但是当<code>pathname</code>是个符号链接时，<code>lstat</code>查看的是该符号链接的有关信息；而<code>stat</code>是查看该符号链接引用的文件的信息。</li>
<li>在 <code>ubuntu 16.04</code>上，虽然有 <code>AT_SYMLINK_NOFOLLOW</code>这个常量，但是不支持。必须用 <code>!AT_SYMLINK_FOLLOW</code>。其常量定义为：<ul>
<li><code>AT_SYMLINK_FOLLOW</code>： 1024 (有效）</li>
<li><code>!AT_SYMLINK_FOLLOW</code>： 0(有效）</li>
<li><code>AT_SYMLINK_NOFOLLOW</code>： 256(无效）</li>
<li><code>AT_SYMLINK_FOLLOW</code>： -1025(无效）</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li><p><code>stat</code>数据结构：其定义可能与具体操作系统相关，但是基本形式为：</p>
<pre><code> struct stat{
 mode_t             st_mode;     //文件权限和类型信息
 ino_t             st_ino;        //i-node 号
 dev_t             st_dev;        // 设备号
 dev_t             st_rdev;    // 特殊文件的设备号
 nlink_t         st_nlink;    // 硬链接数量
 uid_t             st_uid;        // owner 的用户ID
 gid_t             st_gid;        // owner 的组ID
 off_t             st_size;    //对普通文件，它是文件字节大小
 struct timespec st_atime;    // 上次访问时间
 struct timespec st_mtile;    // 上次修改时间
 struct timespec st_ctime;    // 上次文件状态改变的时间
 blksize_t         st_blksize;    // 最佳的 I/O block 大小
 blkcnt_t         st_blocks;    //分配的磁盘块数量
 }
</code></pre><p> 其中<code>timespec</code>结构与具体操作系统相关，但是至少包括下面两个字段：</p>
</li>
</ol>
<pre><code>    struct timespec{
    time_t tv_sec;    // 秒
    long tv_nsec;     //纳秒
        }
</code></pre><ol>
<li><p>UNIX 文件类型：</p>
<ul>
<li>普通文件：最常见的文件类型，这种文件包含了某种形式的数据。至于这种数据是二进制还是文本，对内核无区别。普通文件的内容解释由具体的应用程序进行。</li>
<li>目录文件：这种文件包含了其他文件的名字，以及指向这些文件有关信息的指针。<ul>
<li>只有内核可以直接写目录文件（通常用户写目录文件都要通过内核）</li>
<li>对某个目录文件具有读权限的任何一个进程都可以读取该目录的内容</li>
</ul>
</li>
<li>块特殊文件：这种类型的文件提供对设备（如磁盘）带缓冲的访问。每次访问以固定长度为单位进行。</li>
<li>字符特殊文件：这种类型的文件提供对设备不带缓冲的访问，每次访问长度可变。<blockquote>
<p>系统的所有设备，要么是字符特殊文件，要么是块特殊文件</p>
</blockquote>
</li>
<li><code>FIFO</code>：这种类型的文件用于进程间通信，有时也称为命名管道</li>
<li>套接字：这种类型的文件用于进程间的网络通信（也可用于单机上进程的非网络通信）</li>
<li><p>符号链接：这种类型的文件指向另一个文件</p>
<p>文件类型信息存放在<code>stat.st_mode</code>成员中，可以用下列的宏测试文件类型：</p>
</li>
<li><code>S_ISREG()</code>：测试是否普通文件</li>
<li><code>S_ISDIR()</code>：测试是否目录文件</li>
<li><code>S_ISCHR()</code>：测试是否字符特殊文件</li>
<li><code>S_ISBLK()</code>：测试是否块特殊文件</li>
<li><code>S_ISFIFO()</code>：测试是否<code>FIFO</code></li>
<li><code>S_ISLNK()</code>：测试是否符号链接文件</li>
<li><p><code>S_ISSOCK()</code>：测试是否套接字</p>
<p>另外 <code>POSIX.1</code> 允许将进程间通信对象说明为文件。但是下面的宏测试的不是<code>stat.st_mode</code>，而是<code>stat*</code>（<code>stat</code>指针）：</p>
</li>
<li><code>S_TYPEISMQ()</code>：测试是否消息队列</li>
<li><code>S_TYPEISSEM()</code>：测试是否信号量</li>
<li><code>S_TYPEISSHM()</code>：测试是否共享存储对象</li>
</ul>
</li>
<li><p>与一个进程有关的ID有很多:</p>
<ul>
<li>实际用户 ID 和实际组 ID： 标志我们究竟是谁。当我们登录进操作系统时，这两个值就确定了！</li>
<li>有效用户 ID、有效组ID、附属组 ID： 用于文件访问权限检查。</li>
<li><p>保存的设置用户ID、保存的设置组ID：由 <code>exec</code>函数保存</p>
<p>每个文件都有一个所有者和组所有者，分别有 <code>stat.st_uid</code>和<code>stat.st_gid</code>指定。当一个文件时可执行文件时，如果执行这个文件，那么进程的有效用户ID就是实际用户ID，有效组ID就是实际组ID，除了下面的情况：</p>
</li>
<li>当在<code>stat.st_mode</code>中设置了一个特殊标志：设置用户ID位时，则将进程的有效用户ID设置为文件所有者的用户ID</li>
<li><p>当在<code>stat.st_mode</code>中设置了一个特殊标志：设置组ID位时，则将进程的有效组ID设置为文件所有者的组ID</p>
<blockquote>
<p>任何进程都是由可执行文件被执行而得到。因此位于磁盘上的可执行文件的所属的用户ID和组ID会影响到进程的用户ID和组ID</p>
</blockquote>
<p>如果某个可执行文件所有者是<code>root</code>，且该文件的设置用户ID位已经被设置，那么无论谁执行这个可执行文件时，该可执行文件产生的进程就具有超级用户权限。</p>
<p>设置用户ID位、设置组ID位 都包含在<code>stat.st_mode</code>中，可以通过下列两个宏测试：</p>
</li>
<li><code>S_ISUID()</code>：测试是否设置了设置用户ID位</li>
<li><code>S_ISGID()</code>：测试是否设置了设置组ID位</li>
</ul>
</li>
<li><p>文件访问权限：所有文件类型（包括目录，字符特别文件等）都有访问权限。每个文件都有9个访问权限位：</p>
<ul>
<li><code>S_IRUSR</code>：用户读</li>
<li><code>S_IWUSR</code>：用户写</li>
<li><code>S_IXUSR</code>：用户执行</li>
<li><code>S_IRGRP</code>：组读</li>
<li><code>S_IWGRP</code>：组写</li>
<li><code>S_IXGRP</code>：组执行</li>
<li><code>S_IROTH</code>：其他读</li>
<li><code>S_IWOTH</code>：其他写</li>
<li><p><code>S_IXOTH</code>：其他执行</p>
<p>访问权限规则：</p>
</li>
<li><p>当用名字<code>pathname</code>打开任何一个类型的文件时，对<code>pathname</code>中包含的每一个目录，包括<code>pathname</code>可能隐含的当前工作目录都应该具有执行权限</p>
<blockquote>
<p>因此目录的执行权限位也称之为搜索位</p>
</blockquote>
</li>
<li>对一个文件的读权限决定了我们能否打开现有文件进行读操作</li>
<li>对一个文件的写权限决定了我们能否打开现有文件进行写操作</li>
<li>如果你在<code>open</code>函数中对一个文件指定了<code>O_TRUNC</code>标志，则必须对该文件具有写权限</li>
<li>为了在一个目录中常见一个新文件，必须对该目录具有写权限和执行权限</li>
<li>为了删除一个现有文件，必须对包含该文件的目录具有写权限和执行权限。对该文件本身没有权限的限制</li>
<li><p>如果用7个<code>exec</code>函数中的任何一个执行某个文件，则必须对该文件具有执行权限，且该文件必须是个普通文件</p>
<p>进程每次打开、创建、删除一个文件时，内核就进行文件访问权限测试。这种测试如下：</p>
</li>
<li><p>若进程的有效用户ID是0（超级用户），则对该文件的任何访问行为都批准</p>
</li>
<li>若进程的有效用户ID等于文件的所有者ID（也就是进程拥有此文件）：<ul>
<li>如果该文件的用户读权限开放，则内核允许进程读该文件</li>
<li>如果该文件的用户写权限开放，则内核允许进程写该文件</li>
<li>如果该文件的用户执行权限开放，则内核允许进程执行该文件</li>
</ul>
</li>
<li>若进程的有效组ID或者进程的附属组ID之一等于文件的组ID：<ul>
<li>如果该文件的组读权限开放，则内核允许进程读该文件</li>
<li>如果该文件的组写权限开放，则内核允许进程写该文件</li>
<li>如果该文件的用户执行权限开放，则内核允许进程执行该文件</li>
</ul>
</li>
<li><p>否则：</p>
<ul>
<li>如果该文件的其他读权限开放，则内核允许进程读该文件</li>
<li>如果该文件的其他写权限开放，则内核允许进程写该文件</li>
<li>如果该文件的其他户执行权限开放，则内核允许进程执行该文件</li>
</ul>
<p>只要有一个权限通过，则不再进行测试。若所有权限都不通过，则不允许访问。</p>
</li>
</ul>
</li>
<li><p>对一个目录的读权限和可执行权限是不同的：</p>
<ul>
<li>目录读权限：允许读目录，从而获得在该目录中所有文件名的列表</li>
<li>目录可执行权限：允许搜索该目录，从而寻找一个特定的文件名</li>
</ul>
</li>
<li><p>当一个进程通过<code>open</code>或者<code>creat</code>创建一个新文件时：</p>
<ul>
<li>新文件的用户ID被设置为进程的有效用户ID</li>
<li>新文件的组ID可以有两个值之一：<ul>
<li>进程的有效组ID</li>
<li>文件所在目录的组ID<blockquote>
<p>具体选择哪个，由具体操作系统决定</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>stat</code>和<code>lstat</code>示例：在<code>main</code>函数中调用<code>test_stat_lstat</code>函数：</p>
</li>
</ol>
<pre><code>void test_stat_lstat()
{
    M_TRACE(&quot;---------  Begin test_stat_lstat()  ---------\n&quot;);
    Stat stat_buf;
    My_stat(&quot;/home/huaxz1986/APUE/main.c&quot;,&amp;stat_buf); // regular file
    My_stat(&quot;/home/huaxz1986/APUE/&quot;,&amp;stat_buf); // dir file
    My_stat(&quot;/dev/loop0&quot;,&amp;stat_buf); // block file
    My_stat(&quot;/dev/mem&quot;,&amp;stat_buf); // char file
    My_lstat(&quot;/dev/cdrom&quot;,&amp;stat_buf); // link file
    My_stat(&quot;/run/systemd/initctl/fifo&quot;,&amp;stat_buf); // fifo file

    int fd=My_open_with_mode(&quot;test_stat&quot;,O_WRONLY|O_CREAT,S_IRUSR); // create a new file
    close(fd);
    My_stat(&quot;test_stat&quot;,&amp;stat_buf); // regular file
    M_TRACE(&quot;---------  End test_stat_lstat()  ---------\n\n&quot;);
}
</code></pre><pre><code>  ![stat](../imgs/file_dir/stat.JPG) 
</code></pre><h2 id="二、访问测试和文件模式创建屏蔽字"><a href="#二、访问测试和文件模式创建屏蔽字" class="headerlink" title="二、访问测试和文件模式创建屏蔽字"></a>二、访问测试和文件模式创建屏蔽字</h2><ol>
<li><p>当用<code>open()</code>函数打开一个文件时，内核根据进程的有效用户ID和有效组ID为依据来执行访问权限测试。但是如果你想测试进程的实际用户ID和实际组ID是否能够通过权限测试时，可以用下列两个函数：</p>
<pre><code> #include&lt;unistd.h&gt;
 int access(const char *pathname,int mode);
 int faccess(int fd,const char*pathname,int mode,int flag);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>pathname</code>：文件路径名</li>
<li><p><code>mode</code>：指定要测试的模式。</p>
<ul>
<li>如果要测试文件是否已存在，则<code>mode</code>设为<code>F_OK</code></li>
<li>如果要测试进程的实际用户ID和实际组ID的权限，则可以为下列常量的按位或<ul>
<li><code>R_OK</code>：测试读权限</li>
<li><code>W_OK</code>：测试写权限</li>
<li><code>X_OK</code>：测试执行权限</li>
</ul>
</li>
</ul>
<p>对于 <code>faccess</code>函数：</p>
</li>
<li><code>fd</code>：一个打开目录文件的描述符，或者<code>AT_FDCWD</code></li>
<li><code>pathname</code>：<ul>
<li>如果为绝对路径，则忽略<code>fd</code>参数</li>
<li>如果为相对路径，则相对路径的目录由<code>fd</code>指定。<ul>
<li>若<code>fd=AT_FDCWD</code>，则表示相对于当前工作目录</li>
<li>否则相对于<code>fd</code>对于的打开的目录</li>
</ul>
</li>
</ul>
</li>
<li><code>flag</code>：如果是<code>AT_EACCESS</code>，则访问检查使用进程的有效用户ID和有效组ID，而不是实际用户ID和实际组ID</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回0</li>
<li>出错： 返回 -1</li>
</ul>
</li>
</ul>
</li>
<li><p>文件模式创建屏蔽字：当进程创建一个新的目录或者文件时，会使用文件模式创建屏蔽字。在文件模式创建屏蔽字中为1的位，在文件<code>mode</code>中的相应位一定被关闭。设置进程的文件模式创建屏蔽字的函数为：</p>
<pre><code> #include&lt;sys/stat.h&gt;
 mode_t umask(mode_t cmask);
</code></pre><ul>
<li>参数： <ul>
<li><code>cmask</code>：要设置的新的文件模式创建屏蔽字</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：旧的文件模式创建屏蔽字</li>
<li>函数未指定失败时返回何值</li>
</ul>
<p>如果你在通过<code>creat</code>或者<code>open</code>函数指定了<code>mode</code>，那么该<code>mode</code>必须通过文件模式创建屏蔽字的屏蔽之后才是最终新创建的文件的权限模式。<code>umask</code>指定了哪个，哪个权限就被屏蔽了！</p>
<blockquote>
<p>shell 有一个<code>umask</code>命令。我们可以通过该命令来设置或者打印当前的文件模式创建屏蔽字</p>
</blockquote>
</li>
</ul>
</li>
<li><p>示例：测试 <code>umask</code>和<code>access</code>函数的用法：在<code>main</code>函数中调用<code>test_access_umask</code> 函数：</p>
</li>
</ol>
<pre><code>void test_access_umask()
{
    My_access(&quot;/no/exist&quot;,F_OK); // no exist
    My_access(&quot;/etc/shadow&quot;,W_OK);// can not write
    My_access(&quot;/home/huaxz1986/APUE&quot;,W_OK); // can write

    print_new_file_mode(&quot;test_umask1&quot;) ;// old umask
    //new umask
    My_umask(S_IRUSR|S_IRGRP|S_IROTH);
    print_new_file_mode(&quot;test_umask2&quot;) ;// new umask
}
</code></pre><p>  <img src="../imgs/file_dir/access_umask.JPG" alt="access_umask"> </p>
<p>可以看到：</p>
<ul>
<li><code>access</code>函数：对于不存在的文件名访问失败；对没有写权限的名字写访问失败</li>
<li>被创建的文件的访问权限是由文件创建屏蔽字、创建文件时指定的权限二者共同作用的</li>
</ul>
<h2 id="三、修改文件访问权限和文件所属用户"><a href="#三、修改文件访问权限和文件所属用户" class="headerlink" title="三、修改文件访问权限和文件所属用户"></a>三、修改文件访问权限和文件所属用户</h2><ol>
<li><p>修改文件的现有的访问权限：</p>
<pre><code> #include&lt;sys/stat.h&gt;
 int chmod(const char*pathname,mode_t mode);
 int fchmod(int fd,mode_t mode);
 int fchmodat(int fd,const char*pathname,mode_t mode,int flag);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>pathname</code>：文件路径名</li>
<li><p><code>mode</code>：文件修改后的权限。</p>
<p>对于 <code>fchmod</code>函数：</p>
</li>
<li><p><code>fd</code>：打开的文件描述符</p>
<p>对于 <code>fchmod</code>函数：</p>
</li>
<li><code>fd</code>：一个打开目录文件的描述符，或者<code>AT_FDCWD</code></li>
<li><code>pathname</code>：<ul>
<li>如果为绝对路径，则忽略<code>fd</code>参数</li>
<li>如果为相对路径，则相对路径的目录由<code>fd</code>指定。<ul>
<li>若<code>fd=AT_FDCWD</code>，则表示相对于当前工作目录</li>
<li>否则相对于<code>fd</code>对于的打开的目录</li>
</ul>
</li>
</ul>
</li>
<li><code>flag</code>：如果是<code>!AT_SYMLINK_FOLLOW</code>，则<code>fchmodtat</code>并不跟随符号链接</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回0</li>
<li>出错： 返回 -1</li>
</ul>
<p>参数<code>mode</code>可以是下面常量的按位或：（来自头文件<code>&lt;sys/stat.h&gt;</code></p>
</li>
<li><code>S_ISUID</code>：执行时设置用户ID</li>
<li><code>S_ISGID</code>：执行时设置组ID</li>
<li><code>S_ISVTX</code>：粘着位</li>
<li><code>S_IRWXU</code>：用户读、写和执行</li>
<li><code>S_IRUSR</code>：用户读</li>
<li><code>S_IWUSR</code>：用户写</li>
<li><code>S_IXUSR</code>：用户执行</li>
<li><code>S_IRWXG</code>：组读、写和执行</li>
<li><code>S_IRGRP</code>：用户读</li>
<li><code>S_IWGRP</code>：用户写</li>
<li><code>S_IXGRP</code>：用户执行</li>
<li><code>S_IRWXO</code>：其他读、写和执行</li>
<li><code>S_IROTH</code>：用户读</li>
<li><code>S_IWOTH</code>：用户写</li>
<li><p><code>S_IXOTH</code>：用户执行</p>
<p><code>chmod</code>函数更新的只是<code>i</code>节点最近一次被修改的时间。</p>
<p><code>chmod</code>函数在下列条件下自动清除两个权限位：</p>
</li>
<li>如果我们试图设置普通文件的粘着位，而且又没有超级用户权限，则<code>mod</code>中的粘着位被自动关闭。这意味着只有超级用户才能设置普通文件的粘着位</li>
<li>新创建文件的组<code>ID</code>可能不是调用进程所属的组<code>ID</code>，它可能是父目录的组<code>ID</code></li>
</ul>
</li>
<li><p>粘着位：如果对一个目录设置了粘着位，则任何对该目录具有写权限的进程都能够在该目录中创建文件。但是：只有满足下列条件之一的用户才能删除或者重命名该目录下的文件：</p>
<ul>
<li>拥有此文件</li>
<li>拥有此目录</li>
<li>是超级用户<blockquote>
<p>对于未设置粘着位的目录，则只要用户对该目录有写权限，那么就有修改和重命名该目录下其他文件的能力</p>
</blockquote>
</li>
</ul>
</li>
<li><p>修改用户的ID和组ID：</p>
<pre><code> #include&lt;unistd.h&gt;
 int chown(const char *pathname,uid_t owner,gid_t group);
 int fchown(int fd,uid_t owner,gid_t group);
 int fchownat(int fd,const char *pathname,uid_t owner,gid_t group,int flag);
 int lchown(const char *pathname,uid_t owner,gid_t group);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>pathname</code>：文件路径名</li>
<li><code>owner</code>：文件修改后的用户ID</li>
<li><p><code>group</code>：文件修改后的组ID</p>
<p>对于<code>fchown</code>函数：</p>
</li>
<li><p><code>fd</code>：打开的文件描述符，要修改的就是这个文件</p>
<p>对于 <code>fchmod</code>函数：</p>
</li>
<li><p><code>fd</code>：一个打开目录文件的描述符，或者<code>AT_FDCWD</code></p>
</li>
<li><code>pathname</code>：<ul>
<li>如果为绝对路径，则忽略<code>fd</code>参数</li>
<li>如果为相对路径，则相对路径的目录由<code>fd</code>指定。<ul>
<li>若<code>fd=AT_FDCWD</code>，则表示相对于当前工作目录</li>
<li>否则相对于<code>fd</code>对于的打开的目录</li>
</ul>
</li>
</ul>
</li>
<li><code>flag</code>：如果是<code>!AT_SYMLINK_FOLLOW</code>，则<code>fchmodtat</code>并不跟随符号链接，修改的是符号链接本身而不是符号链接指向的文件</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回 0</li>
<li>出错： 返回 -1</li>
</ul>
<p>有两点注意：</p>
</li>
<li><code>lchown</code>函数更改的是符号链接本身，而<code>chown</code>遇到符号链接时更改的是符号链接指向的文件</li>
<li>如果这些函数由非超级用户进程调用，则成功返回时，该文件的设置用户ID和设置组ID位都被清除</li>
</ul>
</li>
<li><p>示例：在 <code>main</code> 函数中调用<code>test_chmod_chown</code> 函数：</p>
</li>
</ol>
<pre><code>void test_chmod_chown()
{
    const char *file_name=&quot;test&quot;;
    Stat buf;

    My_stat(file_name,&amp;buf);
    My_chmod(file_name,S_IRWXU);
    My_chown(file_name,1,1);
}
</code></pre><pre><code>  ![chmod_chown](../imgs/file_dir/chmod_chown.JPG) 

可以看到：
- 修改文件所属的用户和组，需要超级用户权限。普通用户无法修改，即使该用户就是该文件的所有者也不行
</code></pre><h2 id="四、修改文件长度"><a href="#四、修改文件长度" class="headerlink" title="四、修改文件长度"></a>四、修改文件长度</h2><ol>
<li><p>文件长度：<code>stat.st_size</code>字段存放的是以字节为单位的文件的长度。此字段只对普通文件、目录文件、符号链接才有意义：</p>
<ul>
<li>对普通文件：其长度就是文件的大小。长度为0表示该文件为空</li>
<li>对目录文件：其长度通常是个整数（如16或者512）的整数倍</li>
<li><p>对符号链接：其长度是符号链接本身存放的某个文件名的实际字节数（它并不包含字符串的<code>null</code>字节，因为这些字符是存放在文件中，而不是存放在内存中的字符串）</p>
<p>另外<code>stat.st_blksize</code>存放的是对于文件 I/O 较合适的块长度；<code>stat.st_blocks</code>存放的是所分配的块的数量（一个块512字节）。注意：</p>
</li>
<li>对于普通文件，可能包含空洞。空洞是由于设置的文件偏移量超过了文件末尾，然后写入了某些数据造成的。对于空洞文件：<ul>
<li>空洞文件的存储需要的磁盘块数量可能远小于文件大小。文件大小是文件末尾到文件头的字节数</li>
<li>读取空洞文件的空洞时，对于没有写过的字节位置<code>read</code>返回的是字节0</li>
</ul>
</li>
</ul>
</li>
<li><p>截断文件：通常可以用带<code>O_TRUNC</code>选项的<code>open()</code>函数来清空一个文件（截断到0）。但是如果希望截断文件使得文件大小为指定字节数，则可以用下列的函数：</p>
<pre><code> #include&lt;unistd.h&gt;
 int truncate(const char*pathname,off_t length);
 int ftruncate(int fd,off_t length);
</code></pre><ul>
<li>参数：<ul>
<li><code>pathname</code>：文件路径名</li>
<li><code>length</code>：文件修改后大小（字节数）</li>
<li><code>fd</code>：打开的文件描述符，要修改的就是这个文件</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回 0</li>
<li>出错： 返回 -1</li>
</ul>
<p>有两点注意：</p>
</li>
<li>若<code>length</code>小于文件的原大小，则修改文件大小之后，文件新的尾端之后的位置不再可以访问</li>
<li>若<code>length</code>大于文件的原大小，则修改文件大小之后，会形成空洞。即从文件原大小新的尾端形成了空洞</li>
</ul>
</li>
<li><p>示例：在<code>main</code>函数中调用<code>test_truncate_size</code>函数：</p>
</li>
</ol>
<pre><code>void test_truncate_size()
{
    M_TRACE(&quot;---------  Begin test_truncate_size()  ---------\n&quot;);
    char buffer[100];
    int len;
    int fd=My_open_with_mode(&quot;test&quot;,O_CREAT|O_TRUNC|O_RDWR,S_IRWXU);
    My_write(fd,&quot;abcdefg&quot;,8);
    print_file_size(&quot;test&quot;);  // 打印文件大小
    //****  扩张文件 *******//
    My_truncate(&quot;test&quot;,20);  // 扩张文件
    My_lseek(fd,0,SEEK_SET);  // 读取之前先调整文件读取位置
    len=My_read(fd,buffer,20);
    printf(&quot;Read:&quot;);
    for (int i=0;i&lt;len;i++)  // 打印读取内容
        printf(&quot;\t0x%x,&quot;,buffer[i]);
    printf(&quot;\n&quot;);
    //****  截断文件 *******//
    My_truncate(&quot;test&quot;,5);   // 截断文件
    My_lseek(fd,0,SEEK_SET);  // 读取之前先调整文件读取位置
    len=My_read(fd,buffer,5);
    printf(&quot;Read:&quot;);
    for (int i=0;i&lt;len;i++)
        printf(&quot;\t0x%x,&quot;,buffer[i]);
    printf(&quot;\n&quot;);
    close(fd);
    M_TRACE(&quot;---------  End test_truncate_size()  ---------\n&quot;);
}
</code></pre><pre><code>  ![truncate](../imgs/file_dir/truncate.JPG) 

可以看到：
- 对于文件空洞，它不占用任何磁盘空间；空洞部分读出的内容全为0
- 对于非常小的文件，比如这里的 8 字节文字，磁盘分配了 8个块（4kb）。
</code></pre><h2 id="五、UNIX文件系统、硬链接、软链接、删除、重命名"><a href="#五、UNIX文件系统、硬链接、软链接、删除、重命名" class="headerlink" title="五、UNIX文件系统、硬链接、软链接、删除、重命名"></a>五、UNIX文件系统、硬链接、软链接、删除、重命名</h2><ol>
<li><p>UNIX文件系统简介(传统的基于BSD的UNIX文件系统，称作<code>UFS</code>）：</p>
<ul>
<li>一个磁盘可以划分成一个或者多个分区，每个分区可以包含一个文件系统。每个文件系统包含一些柱面组。每个柱面组包括：<ul>
<li>一个 i 节点图：用于指示哪些 i 节点已经被使用，哪些未被使用</li>
<li>一个 块位图：用于指示哪些数据块已经被使用，哪些为被使用</li>
<li>一个 i 节点组。它包含的是许多 i  节点。</li>
<li>一个数据区：存放具体的数据块和目录块</li>
</ul>
</li>
<li>数据区包含两种类型的块：<ul>
<li>目录块：它的内容是 <code>&lt;i 节点编号&gt;|&lt;文件名&gt;</code> 这种格式的记录的列表</li>
<li>数据块：它的内容就是具体文件的数据        </li>
</ul>
</li>
<li>i 节点是固定长度的记录项，它包含有关文件的大部分信息<ul>
<li>每个 i 节点都有一个链接计数，其值是指向 i 节点的目录的项数(这种链接类型称之为硬链接)。只有当该链接计数减少为0时，才可以删除该链接文件（也就是释放该文件占用的数据块）。<ul>
<li>在<code>stat</code>结构中，链接计数包含在<code>st_nlink</code>成员中（POSIX常量：<code>LINK_MAX</code>指定了一个文件链接数的最大值）         </li>
</ul>
</li>
<li>每个 i 节点包含了文件有关的所有信息：文件类型、文件权限访问位、文件长度和指向文件数据块的指针<ul>
<li><code>stat</code>结构中的大多数信息来自于 i  结点。只有两项重要数据存放在目录项中：文件名、i节点编号</li>
</ul>
</li>
<li>目录项中的 i 节点编号只能指向同一个文件系统中的相应的 i 节点。<blockquote>
<p>因此硬链接不能跨文件系统</p>
</blockquote>
</li>
<li>当在不更换文件系统的情况下重命名一个文件时，该文件的实际内容并未移动。只需要构造一个指向现有 i 节点的新目录项，并删除来的目录项。此时该 i节点的链接计数不会改变<blockquote>
<p>这就是 <code>mv</code>命令的操作方式</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>与硬链接对应的概念是软链接。软链接也称作符号链接，它是一种特殊的文件。该文件的实际内容（在数据块中）包含了该符号链接所指向的文件的名字。同时该文件的 i 节点指示了该文件类型是 <code>S_IFLNK</code>，于是系统知道了这个文件是个符号链接。</p>
<ul>
<li>硬链接直接指向文件的<code>i</code>节点</li>
<li><p>软链接是对一个文件的间接指针</p>
<p>引入符号链接的原因是为了避开硬链接的一些限制：</p>
</li>
<li>硬链接通常要求链接和文件位于同一个文件系统中</li>
<li><p>只有超级用户才能创建指向目录的硬链接（在底层文件系统支持的情况下）</p>
<p>对于符号链接以及它指向何种类型的文件并没有什么限制。任何用户都可以创建指向目录的符号链接。但是使用符号链接有可能在文件系统中引入循环</p>
<p>对于处理文件和目录的函数，如果传递的是一个符号链接的文件名，则应该注意：函数是否跟随符号链接，即函数是处理符号链接指向的文件，还是处理符号链接本身。</p>
</li>
<li><p>跟随符号链接（即处理符号链接指向的文件）的函数有：<code>access</code>、<code>chdir</code>、<code>chmod</code>、<code>chown</code>、<br><code>creat</code>、<code>exec</code>、<code>link</code>、<code>open</code>、<code>opendir</code>、<code>pathconf</code>、<code>stat</code>、<code>truncate</code></p>
</li>
<li>不跟随符号链接（即处理符号链接文件本身）的函数有：<code>lchown</code>、<code>lstat</code>、<code>readlink</code>、<code>remove</code>、<code>rename</code>、<code>unlink</code><ul>
<li>一个例外的情况：如果用<code>O_CREAT</code>和<code>O_EXCL</code>选项调用<code>open</code>，此时若参数是个符号链接的文件名，则<code>open</code>出错返回（并不考虑符号链接指向的文件是否存在），同时将<code>errno</code>设为<code>EEXIST</code></li>
</ul>
</li>
</ul>
</li>
<li><p>任何一个目录 <code>dirxxx</code> 的硬链接至少为2：</p>
<ul>
<li>该目录的内容中有一条名为的<code>.</code>记录，该记录的 <code>&lt;i节点编号&gt;</code> 指向<code>dirxxx</code>目录的节点</li>
<li>该目录的父目录的内容中有一条记录，记录的名字<code>dirxxx</code>，记录的 <code>&lt;i节点编号&gt;</code> 指向<code>dirxxx</code>目录的节点</li>
<li>若该目录有子目录。<code>dirxxx</code> 的任何子目录的内容有一条名为<code>..</code>的记录，该记录的 <code>&lt;i节点编号&gt;</code> 指向<code>dirxxx</code>目录的节点<blockquote>
<p>因此父目录中的每个子目录都使得父目录的链接计数加 1</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>link/linkat</code>函数：创建一个指向现有文件的硬链接</p>
<pre><code> #include&lt;unistd.h&gt;
 int link(const char *existingpath,const char *newpath);
 int linkat(int efd,const char*existingpath,int nfd,const char *newpath,int flag);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>existingpath</code>：现有的文件的文件名（新创建的硬链接指向它）</li>
<li><p><code>newpath</code>：新创建的目录项</p>
<ul>
<li>如果<code>newpath</code>已存在，则返回出错</li>
<li>只创建<code>newpath</code>中的最后一个分量，路径中的其他部分应当已经存在。<blockquote>
<p>假设 <code>newpath</code>为：<code>/home/aaa/b/c.txt</code>，则要求 <code>/home/aaa/b</code>已经存在，只创建<code>c.txt</code></p>
</blockquote>
</li>
</ul>
<p>对于<code>linkat</code>函数：</p>
</li>
<li>现有的文件名是通过<code>efd</code>和<code>existingpath</code>指定。<ul>
<li>若<code>existingpath</code>是绝对路径，则忽略<code>efd</code></li>
<li>若 <code>existingpath</code>是相对路径，则：<ul>
<li>若 <code>efd=AT_FDCWD</code>，则<code>existingpath</code>是相对于当前工作目录来计算</li>
<li>若 <code>efd</code>是一个打开的目录文件的文件描述符，则<code>existingpath</code>是相对于<code>efd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
<li>新建的文件名是通过<code>nfd</code>和<code>newpath</code>指定。<ul>
<li>若<code>newpath</code>是绝对路径，则忽略<code>nfd</code></li>
<li>若 <code>newpath</code>是相对路径，则：<ul>
<li>若 <code>nfd=AT_FDCWD</code>，则<code>newpath</code>是相对于当前工作目录来计算</li>
<li>若 <code>nfd</code>是一个打开的目录文件的文件描述符，则<code>newpath</code>是相对于<code>nfd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
<li><code>flag</code>：当现有文件是符号链接时的行为：<ul>
<li><code>flag=AT_SYMLINK_FOLLOW</code>：创建符号链接指向的文件的硬链接（跟随行为）</li>
<li><code>flag=!AT_SYMLINK_FOLLOW</code>:创建符号链接本身的硬链接（默认行为）</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回 0</li>
<li>失败： 返回 -1</li>
</ul>
<p>这两个函数创建新目录项并对链接计数加1。创建新目录项和增加链接计数是一个原子操作。</p>
<p>另外，大多数操作系统中，只有超级用户才能创建指向一个目录的硬链接，因为这样做很有可能在文件系统中形成循环。</p>
</li>
</ul>
</li>
<li><p><code>unlink</code>函数：删除一个现有的目录项</p>
<pre><code> #include&lt;unistd.h&gt;
 int unlink(const char*pathname);
 int unlinkat(int fd,const char*pathname,int flag);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><p><code>pathname</code>：现有的、待删除的目录项的完整路径名。</p>
<p>对于<code>unlinkat</code>函数：</p>
</li>
<li>现有的文件名是通过<code>fd</code>和<code>pathname</code>指定。<ul>
<li>若<code>pathname</code>是绝对路径，则忽略<code>fd</code></li>
<li>若 <code>pathname</code>是相对路径，则：<ul>
<li>若 <code>fd=AT_FDCWD</code>，则<code>pathname</code>是相对于当前工作目录来计算</li>
<li>若 <code>fd</code>是一个打开的目录文件的文件描述符，则<code>pathname</code>是相对于<code>fd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
<li><code>flag</code>：<ul>
<li><code>flag=AT_REMOVEDIR</code>：可以类似于<code>rmdir</code>一样的删除目录</li>
<li><code>flag=!AT_REMOVEDIR</code>:与<code>unlink</code>执行同样的操作</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回 0</li>
<li>失败： 返回 -1</li>
</ul>
<p>为了解除对文件的链接，必须对包含该目录项的目录具有写和执行权限。如果还对该目录设置了粘着位，则对该目录必须具有写权限以及下列三个条件之一：</p>
</li>
<li>拥有该文件</li>
<li>拥有该目录</li>
<li><p>具有超级用户权限</p>
<p>这两个函数删除目录项并对链接计数减1。创建新目录和增加链接计数是一个原子操作。</p>
</li>
<li>如果该文件的硬链接数不为0， 则还可以通过其他链接访问该文件的内容</li>
<li>如果该文件的硬链接数为0，而没有进程打开该文件，则该文件的内容才有被删除</li>
<li>如果该文件的硬链接数为0，但是有进程打开了该文件，则该文件的内容不能被删除。当进程关闭文件时，内核会检查打开该文件的进程个数；当这个数量为0，内核再去检查其链接计数。如果链接计数也是0，则就删除该文件的内容。<blockquote>
<p>这个特性常用于创建临时文件，先<code>open,create</code>一个文件，然后立即调用<code>unlink</code>。这样即使程序崩溃，它所创建的临时文件也不会遗留下来</p>
</blockquote>
</li>
<li><p>如果删除目录项出错，则不对该文件做任何更改</p>
<p>如果<code>pathname</code>是个符号链接，则<code>unlink</code>删除该符号链接，而不会删除由该符号链接所引用的文件。    </p>
<blockquote>
<p>如果仅仅给出符号链接的文件名，没有一个函数可以删除由该符号链接所引用的文件</p>
</blockquote>
<p>如果文件系统支持，超级用户可以调用<code>unlink</code>，其参数<code>pathname</code>指定一个目录</p>
<blockquote>
<p>通常推荐用<code>rmdir</code>函数，其语义更加清晰</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>link/unlink</code>实例：在<code>main</code>函数中调用<code>test_link_unlink</code>函数</p>
<pre><code>void test_link_unlink()
{
 M_TRACE(&quot;---------  Begin test_link_unlink()  ---------\n&quot;);
 assert(prepare_file(&quot;test&quot;,NULL,0,S_IRWXU)==0);
 un_prepare_file(&quot;test1&quot;);

 print_file_link_num(&quot;test&quot;);
 My_link(&quot;test&quot;,&quot;test1&quot;);
 My_unlink(&quot;test1&quot;);
 print_file_link_num(&quot;test&quot;);
 My_unlink(&quot;test1&quot;);
 My_unlink(&quot;test&quot;);
 print_file_link_num(&quot;test&quot;);

 un_prepare_file(&quot;test&quot;);
 un_prepare_file(&quot;test1&quot;);
 M_TRACE(&quot;---------  End test_link_unlink()  ---------\n\n&quot;);
}
</code></pre><p>   <img src="../imgs/file_dir/link_unlink.JPG" alt="link_unlink"> </p>
<p> 可以看到：</p>
<ul>
<li><code>test</code>和<code>new_test</code>这两个文件共享一个 i 结点。因此该节点的 硬链接数为2</li>
<li>一旦删除 <code>new_test</code>，则对<code>new_test</code>执行 <code>fstatat</code>失败（因为已经被<code>unlink</code>）。同时<code>test</code>的硬链接数为1</li>
<li>一旦<code>test</code>也被删除，则 <code>i</code>节点被释放。执行<code>unlink</code>失败。</li>
</ul>
</li>
<li><p><code>remove</code>函数：解除对一个目录或者文件的链接。</p>
<pre><code> #include&lt;stdio.h&gt;
 int remove(const char *pathname);
</code></pre><ul>
<li>参数<ul>
<li><code>pathname</code>：文件名或者目录名</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功：返回0</li>
<li>失败：返回 -1</li>
</ul>
<p>对于文件，<code>remove</code>功能与<code>unlink</code>相同；对于目录，<code>remove</code>功能与<code>rmdir</code>相同</p>
</li>
</ul>
</li>
<li><p><code>rename/renameat</code>函数：重命名文件或目录</p>
<pre><code> #inluce&lt;stdio.h&gt;
 int rename(const char*oldname,const char *newname);
 int renameat(int oldfd,const char*oldname,int newfd,const char* newname);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>oldname</code>：现有的文件名或者目录名</li>
<li><p><code>newname</code>：重命名的名字</p>
<ul>
<li>如果<code>oldname</code>是个文件名，则为该文件或者符号链接重命名。<ul>
<li>此时若<code>newname</code>已存在：若<code>newname</code>是个目录则报错；若<code>newname</code>不是个目录：则先将<code>newname</code>目录项删除，然后将<code>oldname</code>重命名为<code>newname</code></li>
<li>此时若<code>newname</code>不存在：则直接将<code>oldname</code>重命名为<code>newname</code>    </li>
</ul>
</li>
<li>如果<code>oldname</code>是个目录名，则为该目录重命名。<ul>
<li>此时若<code>newname</code>已存在：若<code>newname</code>是个目录且该目录是个空目录，则先将它删除，然后<code>oldname</code>重命名为<code>newname</code>；若<code>newname</code>是个目录且该目录不是个空目录，则报错；若<code>newname</code>不是个目录，则报错</li>
<li>此时若<code>newname</code>不存在：则直接将<code>oldname</code>重命名为<code>newname</code><blockquote>
<p><code>oldname</code> 不能是 <code>newname</code> 的前缀。因为重命名时，需要删除<code>oldname</code></p>
</blockquote>
</li>
</ul>
</li>
<li>如果<code>oldname</code>或者<code>newname</code>引用的是符号链接，则处理的是符号链接本身，而不是它引用的文件</li>
<li>不能对<code>.</code>和<code>..</code>重命名。即<code>.</code>和<code>..</code>不能出现在<code>oldname</code>和<code>newname</code>的最后部分</li>
<li>若<code>newname</code>和<code>oldname</code>引用同一个文件，则函数不作任何更改而成功返回</li>
</ul>
<p>对于<code>renameat</code>函数：</p>
</li>
<li>现有的文件名或目录名是通过<code>oldfd</code>和<code>oldname</code>指定。<ul>
<li>若<code>oldname</code>是绝对路径，则忽略<code>oldfd</code></li>
<li>若 <code>oldname</code>是相对路径，则：<ul>
<li>若 <code>oldfd=AT_FDCWD</code>，则<code>oldname</code>是相对于当前工作目录来计算</li>
<li>若 <code>oldfd</code>是一个打开的目录文件的文件描述符，则<code>oldname</code>是相对于<code>oldfd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
<li>重命名的文件名或目录名是通过<code>newfd</code>和<code>newname</code>指定。<ul>
<li>若<code>newname</code>是绝对路径，则忽略<code>newfd</code></li>
<li>若 <code>newname</code>是相对路径，则：<ul>
<li>若 <code>newfd=AT_FDCWD</code>，则<code>newname</code>是相对于当前工作目录来计算</li>
<li>若 <code>newfd</code>是一个打开的目录文件的文件描述符，则<code>newname</code>是相对于<code>newfd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
<li><code>flag</code>：当现有文件是符号链接时的行为：<ul>
<li><code>flag=AT_SYMLINK_FOLLOW</code>：创建符号链接指向的文件的硬链接（跟随行为）</li>
<li><code>flag=!AT_SYMLINK_FOLLOW</code>:创建符号链接本身的硬链接（默认行为）</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回 0</li>
<li>失败： 返回 -1</li>
</ul>
<p>对于包含<code>oldname</code>以及<code>newname</code>的目录，调用进程必须具有写和执行的权限，因为将同时更改这两个目录。</p>
</li>
</ul>
</li>
<li><p><code>symlink/symlinkat</code>函数：创建一个符号链接</p>
<pre><code> #include&lt;unistd.h&gt;
 int symlink(const char*actualpath,const char *sympath);
 int symlinkat(const char*actualpath,int fd,const char*sympath);
</code></pre><ul>
<li>参数：<ul>
<li><code>actualpath</code>：符号链接要指向的文件或者目录（可能尚不存在）</li>
<li><code>sympath</code>：符号链接的名字<blockquote>
<p>二者不要求位于同一个文件系统中</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre><code>    对于`symlinkat`函数：
    - 符号链接的名字是通过`fd`和`sympath`指定。
        - 若`sympath`是绝对路径，则忽略`fd`
        - 若 `sympath`是相对路径，则：
            - 若 `fd=AT_FDCWD`，则`sympath`是相对于当前工作目录来计算
            - 若 `fd`是一个打开的目录文件的文件描述符，则`sympath`是相对于`fd`对应的目录文件

- 返回值：
    - 成功： 返回 0
    - 失败： 返回 -1
</code></pre><ol>
<li><p><code>readlink/readlinkat</code>函数：打开符号链接本身</p>
<blockquote>
<p><code>open</code>函数是跟随链接的，即打开符号链接指向的文件</p>
</blockquote>
<pre><code>#include&lt;unistd.h&gt;
ssize_t readlink(const char *restrict pathname,char *restrict buf,size_t bufsize);
ssize_t readlinkat(int fd, const char* restrict pathname,char *restrict buf,
    size_t bufsize);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>pathname</code>：符号链接的名字</li>
<li><code>buf</code>：存放符号链接内容的缓冲区</li>
<li><p><code>bufsize</code>：期望读入缓冲区的字节数</p>
<p>对于<code>readlinkat</code>函数：</p>
</li>
<li><p>符号链接的名字是通过<code>fd</code>和<code>pathname</code>指定。</p>
<ul>
<li>若<code>pathname</code>是绝对路径，则忽略<code>fd</code></li>
<li>若 <code>pathname</code>是相对路径，则：<ul>
<li>若 <code>fd=AT_FDCWD</code>，则<code>pathname</code>是相对于当前工作目录来计算</li>
<li>若 <code>fd</code>是一个打开的目录文件的文件描述符，则<code>pathname</code>是相对于<code>fd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回实际上读取的字节数</li>
<li>失败： 返回 -1</li>
</ul>
</li>
</ul>
<p><code>readlink</code>和<code>readlinkat</code>函数组合了<code>open、read、close</code>函数的所有操作。</p>
<p>注意：读入<code>buf</code>中的符号链接的内容，并不是以<code>null</code>字节终止。</p>
<blockquote>
<p>以<code>null</code>字节终止的是内存中的字符串这种数据结构。而符号链接文件的内容是简单的字符序列，并不是字符串。</p>
</blockquote>
</li>
<li><p>符号链接示例：在<code>main</code>函数中调用<code>test_symlink_readlink</code>函数：</p>
<p>```<br>void test_symlink_readlink()<br>{<br>M_TRACE(“———  Begin test_symlink_readlink()  ———\n”);<br>assert(prepare_file(“test”,”abcdefg0123456”,14,S_IRWXU)==0); // 准备 test 文件<br>print_file_type(“test”); // 查看 test 文件类型</p>
<p>My_symlink(“test”,”test_symlink”); // 创建软连接 test_symlink 到 test<br>print_file_type(“test_symlink”); // 查看 test_symlink 文件类型<br>print_link_file(“test_symlink”); // 由于open 是链接跟随，所以这里打印 test 的内容</p>
<p>char buffer[128];<br>My_readlink(“test_symlink”,buffer,128);</p>
<p>un_prepare_file(“test”); // 删除 test 文件<br>un_prepare_file(“test_symlink”); // 删除 test_symlink 文件<br>M_TRACE(“———  End test_symlink_readlink()  ———\n\n”);<br>}</p>
</li>
</ol>
<pre><code>```

![symlink](../imgs/file_dir/symlink.JPG)  

可以看到：
- 符号链接文件的内容就是它链接到的那个文件的绝对路径名，其中路径名字符序列不包含 `null`字节
- 在 `ubuntu 16.04`中，经多次测试，符号链接文件和普通文件的 `st_mode`完全相同。
- `open`一个链接文件，然后`read`时发现读文件出错，原因是文件描述符有误（实际上打开文件时返回的文件描述符没问题）
</code></pre><h2 id="六、修改文件的时间"><a href="#六、修改文件的时间" class="headerlink" title="六、修改文件的时间"></a>六、修改文件的时间</h2><ol>
<li><p>文件的时间：在<code>stat</code>结构中存放着文件的三个时间：</p>
<ul>
<li><code>st_atim</code>：文件数据的最后访问时间</li>
<li><code>st_mtim</code>：文件数据的最后修改时间</li>
<li><p><code>st_ctim</code>： i 节点状态的最后更改时间</p>
<p>关于这三个时间：</p>
</li>
<li>有很多操作，比如修改文件权限，修改文件的所有者等操作，他们只修改 i 节点状态（只影响<code>st_ctim</code>），但是并不修改文件数据，也并不访问文件数据</li>
<li>系统并不维护对 <code>i</code> 节点的最后访问时间。因此对于 <code>access</code>函数和 <code>stat</code>函数，他们并不修改这三个时间中的任何一个</li>
<li>创建一个文件不仅影响了文件本身的这三个时间，也会影响该文件目录的这三个时间</li>
</ul>
</li>
<li><p><code>futimens/utimensat/utimes</code>函数：修改文件的访问和修改时间</p>
<pre><code> #include&lt;sys/stat.h&gt;
 int futimens(int fd,const struct timespec times[2]);
 int utimensat(int fd,const char*path,const struct timespec times[2],int flag);
 #include&lt;sys/time.h&gt;
 int utimes(const char*pathname,const struct timeval times[2]);
</code></pre><ul>
<li><p>参数：</p>
<p>  对于  <code>futimens</code>和 <code>utimensat</code>函数：</p>
<ul>
<li><p><code>times</code>：指向待修改文件的指定的文件数据访问和文件数据修改时间的指针。</p>
<blockquote>
<p>对于C语言，参数中的数组自动转换为指向数组的指针</p>
</blockquote>
<ul>
<li>这两个时间是日历时间，是自 1970:01:01–00:00:00 以来经历的秒数。不足秒的部分用纳秒表示</li>
<li>数组的第一个元素指定 <code>st_atim</code>；数组的第二个元素指定 <code>st_ctim</code></li>
<li><code>times</code>可以按照下列四种方式之一指定：<ul>
<li><code>times</code>为空指针： 则将文件的数据访问时间和文件数据修改时间设置为当前时间<blockquote>
<p> 此时要求进程的有效用户ID等于该文件所有者的ID；或者进程对该文件有写权限；或者进程是个超级用户进程</p>
</blockquote>
</li>
<li><code>times</code>参数是指向<code>timespec</code>数组的指针：<ul>
<li>若数组的任何一个元素的<code>tv_nsec</code>字段为 <code>UTIME_NOW</code>，则相应的时间戳就设置为当前时间，忽略相应的<code>tv_sec</code>字段<blockquote>
<p>此时要求进程的有效用户ID等于该文件所有者的ID；或者进程对该文件有写权限；或者进程是个超级用户进程</p>
</blockquote>
</li>
<li>若数组的任何一个元素的<code>tv_nsec</code>字段为 <code>UTIME_OMIT</code>，则相应的时间戳保持不变，忽略相应的<code>tv_sec</code>字段<blockquote>
<p>若两个时间戳都忽略，则不需要任何权限限制</p>
</blockquote>
</li>
<li>若数组的任何一个元素的<code>tv_nsec</code>字段为不是上面的两种之一，则相应的时间戳就设置为相应的<code>tv_sec</code>和<code>tv_nsec</code>字段<blockquote>
<p>此时要求进程的有效用户ID等于该文件所有者的ID；或者进程是个超级用户进程（对文件只有写权限是不够的）</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>对于 <code>utimes</code>函数：</p>
</li>
<li><code>pathname</code>：文件的路径名</li>
<li><p><code>times</code>：指向<code>timeval</code>数组的指针。 <code>timeval</code>结构用秒和微秒表示。</p>
<pre><code>  struct timeval{
      time_t tv_sec;//秒
      long tv_usec; //微秒
  };
</code></pre><p>对于 <code>futimens</code>函数：</p>
</li>
<li><p><code>fd</code>：待修改文件的打开的文件描述符</p>
<p>对于 <code>utimensat</code>函数：</p>
</li>
<li>待打开文件的名字是通过<code>fd</code>和<code>path</code>指定。<ul>
<li>若<code>path</code>是绝对路径，则忽略<code>fd</code></li>
<li>若 <code>path</code>是相对路径，则：<ul>
<li>若 <code>fd=AT_FDCWD</code>，则<code>path</code>是相对于当前工作目录来计算</li>
<li>若 <code>fd</code>是一个打开的目录文件的文件描述符，则<code>path</code>是相对于<code>fd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
<li><code>flag</code>：若待修改的文件是符号链接<ul>
<li>如果为<code>!AT_SYMLINK_FOLLOW</code>，则符号链接本身的时间就会被修改</li>
<li>默认情况下，修改的是符号链接指向的文件的时间（跟随行为）</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回 0</li>
<li>失败： 返回 -1</li>
</ul>
<p>我们不能对<code>st_ctim</code>（i节点最后被修改时间）指定一个值。这个时间是被自动更新的。</p>
</li>
</ul>
</li>
<li><p>示例：在 <code>main</code>函数中调用<code>test_utimes</code>函数： </p>
</li>
</ol>
<pre><code>void test_utimes()
{
    M_TRACE(&quot;---------  Begin test_utimes()  ---------\n&quot;);
    assert(prepare_file(&quot;test&quot;,NULL,0,S_IRWXU)==0); // 准备 test 文件
    print_file_time(&quot;test&quot;);
    sleep(2);
    My_access(&quot;test&quot;,F_OK); // 访问文件，但不修改文件
    print_file_time(&quot;test&quot;);
    sleep(2);
    My_chmod(&quot;test&quot;,S_IRUSR|S_IWUSR);//  修改文件状态
    print_file_time(&quot;test&quot;);

    struct timeval times[2];
    times[0].tv_usec=10;
    times[1].tv_sec=10;
    times[1].tv_usec=10;
    My_utimes(&quot;test&quot;,times);

    un_prepare_file(&quot;test&quot;); // 删除 test 文件
    M_TRACE(&quot;---------  End test_utimes()  ---------\n\n&quot;);
}
</code></pre><pre><code>  ![utimes](../imgs/file_dir/utimes.JPG)     
可以看到：
- `st_ctim`是由系统自动维护的，程序员无法手动指定
</code></pre><h2 id="七、目录操作"><a href="#七、目录操作" class="headerlink" title="七、目录操作"></a>七、目录操作</h2><ol>
<li><p><code>mkdir/mkdirat</code>函数创建一个空目录：</p>
<pre><code> #include&lt;sys/stat.h&gt;
 int mkdir(const char*pathname,mode_t mode);
 int mkdirat(int fd,const char *pathname,mode_t mode);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>pathname</code>:被创建目录的名字</li>
<li><p><code>mode</code>:被创建目录的权限</p>
<p>对于 <code>mkdirat</code>，被创建目录的名字是由<code>fd</code>和<code>pathname</code>共同决定的。</p>
</li>
<li>若<code>pathname</code>是绝对路径，则忽略<code>fd</code></li>
<li>若 <code>pathname</code>是相对路径，则：<ul>
<li>若 <code>fd=AT_FDCWD</code>，则<code>pathname</code>是相对于当前工作目录来计算</li>
<li>若 <code>fd</code>是一个打开的目录文件的文件描述符，则<code>pathname</code>是相对于<code>fd</code>对应的目录文件</li>
</ul>
</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回0</li>
<li>失败： 返回 -1</li>
</ul>
<p>注意：</p>
</li>
<li>他们创建的目录是空目录。</li>
<li>对于目录，通常至少要设置一个执行权限位，以允许访问该目录中的文件名</li>
</ul>
</li>
<li><p><code>rmdir</code>函数：删除一个空目录</p>
<pre><code> #include&lt;unistd.h&gt;
 int rmdir(const char *pathname);
</code></pre><ul>
<li><p>参数：</p>
<ul>
<li><code>pathname</code>：待删除的空目录的名字</li>
</ul>
</li>
<li><p>返回值：</p>
<ul>
<li>成功： 返回0</li>
<li>失败： 返回 -1</li>
</ul>
<p>如果调用此函数使得目录的链接计数为0时：    </p>
</li>
<li>如果此时没有其他进程打开该目录，则释放由此目录占用的空间。</li>
<li>如果此时有一个或者多个进程打开此目录，则在此函数返回时删除最后一个链接以及 <code>.</code>和<code>..</code>项，直到最后一个打开该目录的进程关闭该目录时此目录才真正被释放。<ul>
<li>此时，在此目录中不能再创建新文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>读、写目录：对于某个目录具有访问权限的任何用户都可以读该目录。但是为了防止文件系统产生混乱，只有内核才能写目录。</p>
<blockquote>
<p>一个目录的写权限和执行权限位决定了在该目录中能否创建新文件以及删除文件，它们并不能写目录本身</p>
</blockquote>
<pre><code> #include&lt;dirent.h&gt;
 DIR *opendir(const char *pathname);
 DIR *fdopendir(int fd);
 struct dirent *readdir(DIR *dp);
 void rewinddir(DIR *dp);
 int closedir(DIR *dp);
 long telldir(DIR *dp);
 void seekdir(DIR *dp,long loc);
</code></pre><p> 各个函数：</p>
<ul>
<li><code>opendir</code>：打开目录。<ul>
<li>参数：<code>pathname</code>：目录的名字</li>
<li>返回值：成功返回目录指针；失败返回 <code>NULL</code></li>
</ul>
</li>
<li><code>fdopendir</code>：打开目录。<ul>
<li>参数：<code>fd</code>：目录文件的文件描述符</li>
<li>返回值：成功返回目录指针；失败返回 <code>NULL</code></li>
</ul>
</li>
<li><code>readdir</code>：读取目录<ul>
<li>参数： <code>dp</code>：目录指针</li>
<li>返回值： 成功则返回目录项的指针；失败返回 <code>NULL</code></li>
</ul>
</li>
<li><code>rewinddir</code>:将目录的文件偏移量清零（这样下次读取就是从头开始）<ul>
<li>参数：<code>dp</code>：目录指针</li>
</ul>
</li>
<li><code>closedir</code>：关闭目录。<ul>
<li>参数：<code>dp</code>：目录指针</li>
<li>返回值：成功返回 0 ；失败返回 -1</li>
</ul>
</li>
<li><code>telldir</code>：返回目录的文件偏移量<ul>
<li>参数：<code>dp</code>：目录指针</li>
<li>返回值：成功返回目录的文件偏移量 ；失败返回 -1</li>
</ul>
</li>
<li><p><code>seekdir</code>：设置目录的当前位置</p>
<ul>
<li>参数：<code>dp</code>：目录指针；<code>loc</code>：要设定的文件偏移量</li>
</ul>
<p>对于 <code>DIR</code>结构，它是一个内部结构。起作用类似于 <code>FILE</code>结构。<br>对于<code>dirent</code>结构，它是定义在<code>&lt;dirent.h&gt;</code>头文件中。其与具体操作系统相关。但是它至少定义了两个成员：</p>
<pre><code>struct dirent{
ino_t d_ino; // i 节点编号
char d_name[];// 以 null 结尾的文件名字符串
}
</code></pre><blockquote>
<p><code>d_name</code>项的大小并没有指定，但必须保证它能包含至少 <code>NAME_MAX</code>个字节（不包含终止<code>null</code>字节）</p>
</blockquote>
<p>目录中各目录项的顺序与操作系统有关。它们通常不按照字母顺序排列</p>
</li>
</ul>
</li>
<li><p>当前工作目录：每个进程都有一个当前工作目录。此目录是搜索所有相对路径名的起点。</p>
<blockquote>
<p>当前工作目录是本进程的一个属性</p>
</blockquote>
<p> 与当前工作目录相关的有三个函数：</p>
<pre><code> #include&lt;unistd.h&gt;
 int chdir(const char *pathname);
 int fchdir(int fd);
 char *getcwd(char *buf,size_t size);
</code></pre><p> 各个函数：</p>
<ul>
<li><code>chdir</code>：更改当前工作目录。<ul>
<li>参数：<code>pathname</code>：将该目录作为当前工作目录</li>
<li>返回值：成功返回 0 ；失败返回 -1</li>
</ul>
</li>
<li><code>fchdir</code>：更改当前工作目录。<ul>
<li>参数：<code>fd</code>：将该 <code>fd</code> 文件描述符对应的目录作为当前工作目录</li>
<li>返回值：成功返回 0 ；失败返回 -1</li>
</ul>
</li>
<li><code>getcwd</code>：返回当前工作目录的名字<ul>
<li>参数： <code>buf</code>：缓冲区地址；<code>size</code>：缓冲区长度。这两个参数决定了当前工作目录名字字符串存放的位置。<blockquote>
<p>缓冲区必须足够长以容纳绝对路径名加上一个终止<code>null</code>字节。否则返回出错。</p>
</blockquote>
</li>
<li>返回值： 成功则返回 <code>buf</code>；失败返回 <code>NULL</code></li>
</ul>
</li>
</ul>
</li>
<li><p>示例： 在<code>main</code>函数中调用 <code>test_dir_operations</code> 函数：</p>
</li>
</ol>
<pre><code>void test_dir_operations()
{
    M_TRACE(&quot;---------  Begin test_dir_operations()  ---------\n&quot;);
    //*** 创建目录 ****
    My_mkdir(&quot;test&quot;,S_IRWXU);
    My_mkdir(&quot;test/test1&quot;,S_IRWXU);

    //*** 创建文件
    prepare_file(&quot;test/tfile_1&quot;,NULL,0,S_IRWXU);
    prepare_file(&quot;test/tfile_2&quot;,NULL,0,S_IRWXU);
    prepare_file(&quot;test/tfile_3&quot;,NULL,0,S_IRWXU);
    prepare_file(&quot;test/test1/tfile_11&quot;,NULL,0,S_IRWXU);
    prepare_file(&quot;test/test1/tfile_22&quot;,NULL,0,S_IRWXU);
    prepare_file(&quot;test/test1/tfile_33&quot;,NULL,0,S_IRWXU);

    print_dir(&quot;test&quot;);

    print_cwd();
    My_chdir(&quot;test&quot;);
    print_cwd();
    My_chdir(&quot;../&quot;); // 切换回来，否则后面的删除文件都会失败（因为都是相对路径）
    print_cwd();
    //***** 清理
    My_rmdir(&quot;test&quot;); // 目录非空，删除失败！
    un_prepare_file(&quot;test/tfile_1&quot;);
    un_prepare_file(&quot;test/tfile_2&quot;);
    un_prepare_file(&quot;test/tfile_3&quot;);
    un_prepare_file(&quot;test/test1/tfile_11&quot;);
    un_prepare_file(&quot;test/test1/tfile_22&quot;);
    un_prepare_file(&quot;test/test1/tfile_33&quot;);
    My_rmdir(&quot;test/test1&quot;); // 必须非空才能删除成功
    My_rmdir(&quot;test&quot;); // 必须非空才能删除成功
    M_TRACE(&quot;---------  End test_dir_operations()  ---------\n\n&quot;);
}
</code></pre><pre><code>  ![dir_function](../imgs/file_dir/dir_function.JPG) %                                                                    
</code></pre>]]></content>
      
        <categories>
            
            <category> apue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> apue,文件系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言指针&内存分配]]></title>
      <url>/2017/11/27/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88&amp;%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>指针也是一种数据类型。</p>
</blockquote>
<a id="more"></a>
<h2 id="对数据类型的认识"><a href="#对数据类型的认识" class="headerlink" title="对数据类型的认识"></a>对数据类型的认识</h2><h3 id="常见非指针类型"><a href="#常见非指针类型" class="headerlink" title="常见非指针类型"></a>常见非指针类型</h3><p><code>int型，char型，long型 ...</code><br><code>int a=10</code><br>中心：该内存空间<br>a ：内存空间代号<br>10：内存空间存放的数据<br>&amp;a：a对应的地址编号（该内存空间对应的地址编号）（32位系统编号有32位，64位系统编号有64位）</p>
<blockquote>
<p>小插曲，回顾32&amp;64位系统的变量类型的不同之处：</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">32(byte)</th>
<th>64(byte)</th>
</tr>
</thead>
<tbody>
<tr>
<td>long</td>
<td style="text-align:center">4</td>
<td>8</td>
</tr>
<tr>
<td>int *(指针型变量)</td>
<td style="text-align:center">4</td>
<td>8</td>
</tr>
</tbody>
</table>
<h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p><code>char * ,int *,long * ,...</code></p>
<pre><code>int b=10
int *a=&amp;b
</code></pre><p>中心：该内存空间（这条表达式是重点：<code>int *a=&amp;b</code>）<br>a: 该内存空间的代号<br>&amp;b：该内存空间中存放的数据（是一个地址编号，本例中是存放b的内存空间的地址编号）<br>&amp;a：a对应的地址编号（该内存空间对应的地址编号）</p>
<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>函数类型比较特殊：</p>
<pre><code>int func(){
    return 0;
}
</code></pre><p>在内存中函数存放与代码段地址空间（不可修改），所以对函数取地址<code>&amp;func</code>，得到的是代码段，该函数对应的地址。<br>有一个有趣的现象是，gdb调试时，<code>p func</code>,<code>p *func</code>,<code>p &amp;func</code>,得到的全是func函数对应的代码段地址。</p>
<pre><code>(gdb) p func
$1 = {int (int)} 0x6b0 &lt;func&gt;
(gdb) p *func
$2 = {int (int)} 0x6b0 &lt;func&gt;
(gdb) p &amp;func
$3 = (int (*)(int)) 0x6b0 &lt;func&gt;
</code></pre><p>也许函数名本本身就是一个特殊的指针变量，指向自己。但是（*func）好像没有意义。如果是自己定义的指针类型，是可以指向对应类型的函数的，这个时候和普通的指针类型是一样的。</p>
<pre><code class="C">9    int func(int a)
10    {
11        int b=10;
12        printf(&quot;a=%d\nb=%d\n&quot;,a,b);
13        return a*b;
14    }


15    int func1(int b){
16        return 0;
17    }

22    int main()
23    {
24        int a=12;
25        int (*pfunc)(int a)=&amp;func;
26        int b = (*pfunc)(a);
27        pfunc=&amp;func1;


(gdb) p pfunc 
$2 = (int (*)(int)) 0x5555555546e4 &lt;func1&gt;
(gdb) p func
$3 = {int (int)} 0x5555555546b0 &lt;func&gt;
(gdb) p func1
$4 = {int (int)} 0x5555555546e4 &lt;func1&gt;
(gdb) p main
$5 = {int ()} 0x5555555546f2 &lt;main&gt;
(gdb) p &amp;pfunc 
$6 = (int (**)(int)) 0x7fffffffe168
</code></pre>
<h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><ol>
<li>数组在虚拟内存中，是连续存储的。</li>
<li><code>char *s=&quot;fdl&quot;</code>,这种这是字符串常量定义的一种方式，不能做修改，如同<code>const int a=10</code>，此类常量存在于内存中的数据段。</li>
</ol>
<h2 id="内存组织形式"><a href="#内存组织形式" class="headerlink" title="内存组织形式"></a>内存组织形式</h2><p>参考：<a href="http://blog.csdn.net/gatieme/article/details/43567433" target="_blank" rel="external">C程序的内存布局(Memory Layout)</a></p>
<p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1511797169278.jpg" alt="C语言目标文件的内存布局"></p>
<p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1511797204333.jpg" alt="C语言可执行程序的内存分布"></p>
]]></content>
      
        <categories>
            
            <category> C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言,内存分配 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[celery学习笔记]]></title>
      <url>/2017/11/19/celery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在程序的运行过程中，我们经常会遇到一些耗时耗资源的操作，为了避免他们阻塞主程序的运行，我们经常会采用多线程或异步任务。比如，在web开发中，    对于新用户的注册，我们通常会给他们发送一封激活邮件，而发送邮件是个IO阻塞式任务，如果直接把它放到应用当中去，就需要等邮件发出去之后才能进行下一步操作，此时用户只能等待再等待，更好的方式是在业务逻辑中触发一个发送邮件的异步任务，而主程序可以继续往下执行。<br><a id="more"></a><br><a href="https://github.com/celery/celery" target="_blank" rel="external">Celery</a>是一个强大的<code>分布式任务队列</code>,他可以让任务执行完全脱离主程序，甚至他可以被分配到其他主机上运行。我们通常使用它来实现异步任务（async task）和定时任务（crontab）。它的架构组图如下：</p>
<p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1511082386190.jpg" alt="celery 架构图"></p>
<ul>
<li>任务模块Task<ul>
<li>包含异步和定时任务。其中，异步任务通常在业务逻辑中被触发然后发往任务队列中，而定时任务由Celery Beat 进程周期性地将任务发往任务队列。</li>
</ul>
</li>
<li>消息中间件Broker<ul>
<li>Broker，即任务调度队列，接受任务生产者发来的消息（即任务），将任务存入队列。Celery本身不提供队列服务，官方推荐使用RabbitMQ和Redis等。</li>
</ul>
</li>
<li>任务执行单元Worker<ul>
<li>Worker是执行任务的处理单元，它实时监控消息队列，获取队列中调度的任务，并执行它。</li>
</ul>
</li>
<li>任务结果存储Backend<pre><code>  - Backend用于存储任务的执行结果，以供查询。同消息中间件一样，存储也可以使用RabbitMQ，Radis，和MongoDB等。
</code></pre></li>
</ul>
<h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>使用celery实现异步任务主要包含三个步骤：</p>
<ol>
<li>创建一个celery实例</li>
<li>启动Celery Worker</li>
<li>应用程序调用异步任务<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3>正确安装celery，redis以及使用redis的celery相关依赖:</li>
</ol>
<pre><code class="shell?linenums">redis 我用的是容器，直接
docker pull redis
docker run -d -p 6379:6379 --name redis redis:latest

pip install celery
pip install &#39;celery[redis]&#39;
</code></pre>
<h4 id="创建Celery实例"><a href="#创建Celery实例" class="headerlink" title="创建Celery实例"></a>创建Celery实例</h4><p>编写tasks.py</p>
<pre><code class="python"># -*- coding: utf-8 -*-

import time
from celery import Celery

broker = &#39;redis://127.0.0.1:6379&#39;
backend = &#39;redis://127.0.0.1:6379/0&#39;

app = Celery(&#39;my_task&#39;, broker=broker, backend=backend)

@app.task
def add(x, y):
    time.sleep(5)     # 模拟耗时操作
    return x + y
</code></pre>
<p>上面代码，做了以下几件事情，</p>
<ul>
<li>创建了一个Celery实例app，名称为<code>my_task</code>;</li>
<li>指定消息中间件为redis，URL为 <code>redis://127.0.0.1:6379</code>;</li>
<li>指定存储用redis，URL为<code>redis://127.0.0.1:6379/0</code>; </li>
<li>创建了一个celery任务<code>add</code> ，当函数被<code>@app.task</code>装饰后，就成为可被Celery调度的任务。</li>
</ul>
<h4 id="启动Celery-Worker"><a href="#启动Celery-Worker" class="headerlink" title="启动Celery Worker"></a>启动Celery Worker</h4><p>在当前目录，使用如下方式启动Celery Worker</p>
<pre><code>$ celery worker -A tasks --loglevel=info
</code></pre><p>其中：</p>
<ul>
<li>参数 <code>-A</code> 指定了Celery实例的位置，本例是在 <code>tasks.py</code> 中，Celery会自动在该文件中寻找Celery对象实例，当然我们也可以指定，在本例中使用 <code>-A tasks.app</code> ;</li>
<li>参数 <code>--loglevel</code> 指定了日志的级别，默认为warning，也可以使用 <code>-l info</code> 来表示。</li>
</ul>
<p>在生产环境中，我们通常会使用Supervisor来控制Celery Worker 进程。<br>启动成功后，控制台会显示如下输出（最后两行输出是我调用了task后的输出，刚开始时没有）：<br><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1511101696833.jpg" alt="启动celery worker"></p>
<h4 id="调用任务"><a href="#调用任务" class="headerlink" title="调用任务"></a>调用任务</h4><p> 现在我们可以通过<code>delay()</code>和<code>apply_async()</code> 方法来调用任务。</p>
<p> 在当前目录打开Python控制台，输入以下代码：</p>
<pre><code class="python"> (qw_export_post_env) 
 日 19 11月 - 22:25  ~/code/py/celery 
 @dl  python 
Python 2.7.13+ (default, Jul 19 2017, 18:15:03) 
[GCC 6.4.0 20170704] on linux2
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; from tasks import add 
&gt;&gt;&gt; add.delay(2,1)
&lt;AsyncResult: d8be1e96-37bd-4868-9276-7bceafb99ae7&gt;
&gt;&gt;&gt; result=add.delay(2,1)
&gt;&gt;&gt; result.ready() # 使用 ready() 判断任务是否执行完毕
True
&gt;&gt;&gt; result.get() # 使用 get() 获取任务结果
3
&gt;&gt;&gt; result=add.delay(2,1)
&gt;&gt;&gt; result.get()
3
&gt;&gt;&gt; result=add.delay(2,1)
&gt;&gt;&gt; result.ready()
False
&gt;&gt;&gt; result.ready()
True
&gt;&gt;&gt; result.get()
3
</code></pre>
<p>在上面，我们从<code>tasks.py</code> 文件中导入了 <code>add</code> 任务对象，然后使用 <code>delay()</code> 方法将任务发送到消息中间件（Broker） ，Celery Worker进程监控到该任务后，就会进行执行。上面图片上最后两行输出，就是执行该任务的日志。这说明该任务已经被调度并执行成功。</p>
<p>上面我们是在 Python的环境中调用的任务。事实上，我们通常在应用程序中调用任务。比如我们将下面的程序保存为<code>client.py</code>:</p>
<pre><code class="python"># -*- coding: utf-8 -*-

from tasks import add

# 异步任务
add.delay(2, 8)

print &#39;hello world&#39;
</code></pre>
<h3 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h3><p>分离配置文件任务文件，以及应用程序。<br>在上面的例子中，我们直接把 Broker 和 Backend 的配置写在了程序当中，更好的做法是将配置项统一写入到一个配置文件中，通常我们将该文件命名为 <code>celeryconfig.py</code> 。    Celery 的配置比较多，可以在<a href="http://docs.celeryproject.org/en/latest/userguide/configuration.html" target="_blank" rel="external">官方文档</a>查询每个配置项的含义。</p>
<p>下面，我们再看一个例子。项目结构如下：</p>
<pre><code>celery_demo                    # 项目根目录
    ├── celery_app             # 存放 celery 相关文件
    │   ├── __init__.py
    │   ├── celeryconfig.py    # 配置文件
    │   ├── task1.py           # 任务文件 1
    │   └── task2.py           # 任务文件 2
    └── client.py              # 应用程序`
</code></pre><p><code>__init__.py</code> 代码如下：</p>
<pre><code># -*- coding: utf-8 -*-

from celery import Celery

app = Celery(&#39;demo&#39;)                                # 创建 Celery 实例
app.config_from_object(&#39;celery_app.celeryconfig&#39;)   # 通过 Celery 实例加载配置模块
</code></pre><p><code>celeryconfig.py</code> 代码如下：</p>
<pre><code>BROKER_URL = &#39;redis://127.0.0.1:6379&#39;               # 指定 Broker
CELERY_RESULT_BACKEND = &#39;redis://127.0.0.1:6379/0&#39;  # 指定 Backend

CELERY_TIMEZONE=&#39;Asia/Shanghai&#39;                     # 指定时区，默认是 UTC
# CELERY_TIMEZONE=&#39;UTC&#39;                             

CELERY_IMPORTS = (                                  # 指定导入的任务模块
    &#39;celery_app.task1&#39;,
    &#39;celery_app.task2&#39;
)
</code></pre><p><code>task1.py</code> 代码如下：</p>
<pre><code>import time
from celery_app import app

@app.task
def add(x, y):
    time.sleep(2)
    return x + y
</code></pre><p><code>task2.py</code> 代码如下：</p>
<pre><code>import time
from celery_app import app

@app.task
def multiply(x, y):
    time.sleep(2)
    return x * y
</code></pre><p><code>client.py</code> 代码如下：</p>
<pre><code class="python">#!/usr/bin/env python
# coding=utf-8
from celery_app import task1
from celery_app import task2
import time

result1=task1.add.apply_async(args=[2,8])
result2=task2.multiply.apply_async(args=[3,8])

print &quot;hello&quot; 

while(not result1.ready() or not result2.ready()):
    time.sleep(0.5)
    print result1.ready()
print result1.get()
print result2.get()
</code></pre>
<p>现在，让我们启动 Celery Worker 进程，在项目的根目录下执行下面命令：</p>
<pre><code>celery_demo $ celery -A celery_app worker --loglevel=info
</code></pre><p>接着，运行 <code>$ python client.py</code> ，它会发送两个异步任务到 Broker，在 Worker 的窗口我们可以看到如下输出：</p>
<pre><code>[2017-11-19 22:50:39,573: INFO/MainProcess] Received task: celery_app.task1.add[b6e8b247-9f94-4b77-8181-2613247df0f6]  
[2017-11-19 22:50:39,575: INFO/MainProcess] Received task: celery_app.task2.multiply[c578f21b-d8c6-453f-8d2f-f9d1f16a57fd]  
[2017-11-19 22:50:41,585: INFO/ForkPoolWorker-1] Task celery_app.task1.add[b6e8b247-9f94-4b77-8181-2613247df0f6] succeeded in 2.010242356s: 10
[2017-11-19 22:50:41,585: INFO/ForkPoolWorker-3] Task celery_app.task2.multiply[c578f21b-d8c6-453f-8d2f-f9d1f16a57fd] succeeded in 2.009279021s: 24
</code></pre><p>执行输出：</p>
<pre><code class="python"> @dl  python client.py 
hello
False
False
False
False
10
24
</code></pre>
<h3 id="delay-和-apply-async"><a href="#delay-和-apply-async" class="headerlink" title="delay 和 apply_async"></a>delay 和 apply_async</h3><p>在前面的例子中，我们使用 <code>delay()</code> 或 <code>apply_async()</code> 方法来调用任务。事实上，<code>delay</code> 方法封装了 <code>apply_async</code>，如下：</p>
<pre><code>def delay(self, *partial_args, **partial_kwargs):
    &quot;&quot;&quot;Shortcut to :meth:`apply_async` using star arguments.&quot;&quot;&quot;
    return self.apply_async(partial_args, partial_kwargs)
</code></pre><p>也就是说，<code>delay</code> 是使用 <code>apply_async</code> 的快捷方式。<code>apply_async</code> 支持更多的参数，它的一般形式如下：</p>
<pre><code>apply_async(args=(), kwargs={}, route_name=None, **options)
</code></pre><p><code>apply_async</code> 常用的参数如下：</p>
<ul>
<li>countdown：指定多少秒后执行任务<pre><code>task1.apply_async(args=(2, 3), countdown=5)    # 5 秒后执行任务
</code></pre></li>
<li>eta (estimated time of arrival)：指定任务被调度的具体时间，参数类型是 datetime<pre><code>from datetime import datetime, timedelta
# 当前 UTC 时间再加 10 秒后执行任务
task1.multiply.apply_async(args=[3, 7], eta=datetime.utcnow() + timedelta(seconds=10))
</code></pre></li>
<li>expires：任务过期时间，参数类型可以是 int，也可以是 datetime<pre><code>task1.multiply.apply_async(args=[3, 7], expires=10)    # 10 秒后过期
</code></pre>更多的参数列表可以在<a href="http://docs.celeryproject.org/en/latest/reference/celery.app.task.html#celery.app.task.Task.apply_async" target="_blank" rel="external">官方文档</a>中查看。</li>
</ul>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>Celery 除了可以执行<strong>异步任务</strong>，也支持执行<strong>周期性任务（Periodic Tasks）</strong>，或者说定时任务。Celery Beat 进程通过读取配置文件的内容，周期性地将定时任务发往任务队列。</p>
<p>让我们看看例子，项目结构如下：</p>
<pre><code>celery_demo                    # 项目根目录
    ├── celery_app             # 存放 celery 相关文件
        ├── __init__.py
        ├── celeryconfig.py    # 配置文件
        ├── task1.py           # 任务文件
        └── task2.py           # 任务文件
</code></pre><p><code>__init__.py</code> 代码如下：</p>
<pre><code># -*- coding: utf-8 -*-

from celery import Celery

app = Celery(&#39;demo&#39;)
app.config_from_object(&#39;celery_app.celeryconfig&#39;)
celeryconfig.py 代码如下：

# -*- coding: utf-8 -*-

from datetime import timedelta
from celery.schedules import crontab

# Broker and Backend
BROKER_URL = &#39;redis://127.0.0.1:6379&#39;
CELERY_RESULT_BACKEND = &#39;redis://127.0.0.1:6379/0&#39;

# Timezone
CELERY_TIMEZONE=&#39;Asia/Shanghai&#39;    # 指定时区，不指定默认为 &#39;UTC&#39;
# CELERY_TIMEZONE=&#39;UTC&#39;

# import
CELERY_IMPORTS = (
    &#39;celery_app.task1&#39;,
    &#39;celery_app.task2&#39;
)

# schedules
CELERYBEAT_SCHEDULE = {
    &#39;add-every-30-seconds&#39;: {
         &#39;task&#39;: &#39;celery_app.task1.add&#39;,
         &#39;schedule&#39;: timedelta(seconds=30),       # 每 30 秒执行一次
         &#39;args&#39;: (5, 8)                           # 任务函数参数
    },
    &#39;multiply-at-some-time&#39;: {
        &#39;task&#39;: &#39;celery_app.task2.multiply&#39;,
        &#39;schedule&#39;: crontab(hour=9, minute=50),   # 每天早上 9 点 50 分执行一次
        &#39;args&#39;: (3, 7)                            # 任务函数参数
    }
}
</code></pre><p><code>task1.py</code> 代码如下：</p>
<pre><code>import time
from celery_app import app

@app.task
def add(x, y):
    time.sleep(2)
    return x + y
</code></pre><p><code>task2.py</code> 代码如下：</p>
<pre><code>import time
from celery_app import app

@app.task
def multiply(x, y):
    time.sleep(2)
    return x * y
</code></pre><p>现在，让我们启动 <code>Celery Worker</code> 进程，在项目的根目录下执行下面命令：</p>
<pre><code>celery_demo $ celery -A celery_app worker --loglevel=info
</code></pre><p>接着，启动 <code>Celery Beat</code> 进程，定时将任务发送到 <code>Broker</code>，在项目根目录下执行下面命令：</p>
<pre><code>celery_demo $ celery beat -A celery_app
celery beat v4.0.1 (latentcall) is starting.
__    -    ... __   -        _
LocalTime -&gt; 2016-12-11 09:48:16
Configuration -&gt;
    . broker -&gt; redis://127.0.0.1:6379//
    . loader -&gt; celery.loaders.app.AppLoader
    . scheduler -&gt; celery.beat.PersistentScheduler
    . db -&gt; celerybeat-schedule
    . logfile -&gt; [stderr]@%WARNING
    . maxinterval -&gt; 5.00 minutes (300s)
</code></pre><p>之后，在 Worker 窗口我们可以看到，任务 task1 每 30 秒执行一次，而 task2 每天早上 9 点 50 分执行一次。</p>
<p>在上面，我们用两个命令启动了 Worker 进程和 Beat 进程，我们也可以将它们放在一个命令中：</p>
<pre><code>$ celery -B -A celery_app worker --loglevel=info
</code></pre><p>Celery 周期性任务也有多个配置项，可参考<a href="http://docs.celeryproject.org/en/latest/userguide/periodic-tasks.html" target="_blank" rel="external">官方文档</a>。</p>
<p><a href="http://geek.csdn.net/news/detail/128791" target="_blank" rel="external">转载自</a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python,web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OJ查重设计]]></title>
      <url>/2017/11/14/OJ%E6%9F%A5%E9%87%8D%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>因为OJ有一个查重功能需要完善，所以我今天查阅了百度和google，目前可以用的有standford的moss和<a href="https://dickgrune.com/" target="_blank" rel="external">Dick grune</a>的<a href="https://dickgrune.com/Programs/similarity_tester/" target="_blank" rel="external">sim</a>。<br><a id="more"></a></p>
<h2 id="sim"><a href="#sim" class="headerlink" title="sim"></a>sim</h2><blockquote>
<p>一个实用的代码查重工具</p>
</blockquote>
<p>点击上面的sim就可以下载，支持Unix like OS 和windows。<br>支持的语言有： C, C++, Java, Pascal, Modula-2, Lisp, Miranda and<br>natural language text.</p>
<h3 id="Linux安装sim"><a href="#Linux安装sim" class="headerlink" title="Linux安装sim"></a>Linux安装sim</h3><p>依赖下面几个程序：</p>
<ul>
<li>gcc, <code>flex</code>, cp, ln, echo, rm, and wc</li>
<li>其中flex可能需要单独安装</li>
</ul>
<p>有个小坑，sim-***.zip文件是直接在项目根目录里面压缩的，所以解压时（unzip）先新建一个文件夹，把zip放进去，在解压。</p>
<p>然后，需要修改Makefile后才能安装。<br>不然Make会出错。</p>
<p>打开Makefile，大概是55-72行，是windows的安装选项，我们实在linux下安装，所以不需要，把这些行删除掉。然后修改44,45,46行，我修改后如下：</p>
<pre><code>DIR =        /home/dl
BINDIR =    /usr/bin
MAN1DIR =    /usr/share/man/man1
</code></pre><p>Ubuntu的话，直接照抄我的，保存就可以。这个DIR变量不重要，BINDIR表示生成的可执行文件存放的位置，放在/usr/bin下可以直接执行sim的这些命令，因为<code>/usr/bin</code>一般都存在与环境变量下。MANDIR表示man手册的安装位置，ubuntu（debian系）的是这个，其他的不太清楚。<br>然后，就可以执行make的相关命令了，可以先执行<code>make help</code>查看make相关命令。<br>make test<br>生成sim_c , 并执行sim_c的相关案例。没问题的话，就可以执行：</p>
<pre><code>make clean
make install
</code></pre><p>执行完成后，sim就安装完毕了。以下命令就安装好了，分别支持对应的语言。</p>
<pre><code>sim_c     sim_c++   sim_java  sim_lisp  sim_m2    sim_mira  sim_pasc  sim_text
</code></pre><h3 id="sim-使用"><a href="#sim-使用" class="headerlink" title="sim 使用"></a>sim 使用</h3><p>查看sim.pdf,好吧，看这个如果英语不好的话，很痛苦。我列举以下常用的：</p>
<pre><code>-r N：显示重复百分比大于N的比较项。（没有-r参数的话，N默认24）
-w N：设置输出显示的行宽（没有-w参数的话，N默认80）
-p：输出百分比.（默认是对比每两个文件握一次手，以前面的文件为主，共【（n^2-n）/2】次。
-o file：将输出的内容重定向到file文件
-O：在命令执行的开始显示每个参数代表的含义。（我就是利用这个参数快速学会了sim的使用）
-M：在最后显示内存使用情况。
-a:对比所有，目前还不太清楚。（每个文件都与其他的文件握一次手，【n^2-n】次）
-e:单独对比每一个。（比较次数同-p，但是比较内容策略，与-a，-p有何不同，还没弄清楚）
</code></pre><h3 id="后期工作"><a href="#后期工作" class="headerlink" title="后期工作"></a>后期工作</h3><p>基于sim，利用python，封装一个独立的、方便使用的查重工具。<br>python 取得代码<br>sim<br>python 后台数据库过滤，取得代码，存入文件，文件名为username_time.language,存在一个以该用户名命名的文件夹下。然后执行三种语言的查重。并且输出结果。结果以文本显示。</p>
<h3 id="window安装"><a href="#window安装" class="headerlink" title="window安装"></a>window安装</h3><p>我没有尝试文档上，说需要MSDOS+MinGW。<br>另外Makefile的编辑，肯定是先删除unix like配置部分，然后修改BINDIR和MAN1DIR。自行发挥，自求多福。</p>
<h2 id="moss"><a href="#moss" class="headerlink" title="moss"></a>moss</h2><p>还没有看呢，感觉sim就挺好的了。有时间看一下moss。比较一下哪个封装起来更容易。</p>
]]></content>
      
        <categories>
            
            <category> OJ研发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 查重,OJ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS学习笔记2进阶]]></title>
      <url>/2017/11/12/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<p>JS学习笔记2进阶篇</p>
<a id="more"></a>
<p>注意别吧关键字敲错了。。。</p>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="变量命名规则："><a href="#变量命名规则：" class="headerlink" title="变量命名规则："></a>变量命名规则：</h3><p>1.必须以字母、下划线或美元符号开头，后面可以跟字母、下划线、美元符号和数字。如下:<br>正确:<code>mysum</code>，<code>_mychar</code>，<code>$numa1</code><br>2.变量名区分大小写，如:A与a是两个不同变量。<br>3.不允许使用JavaScript关键字和保留字做变量名<br><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1510456490936.jpg" alt="关键字&amp;保留字"></p>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>同C语言：<br>！ &gt; 算术运算符 &gt; 关系运算符 &gt; &amp;&amp; &gt; || &gt; 赋值运算符<br><a href="http://www.jb51.net/article/37282.htm" target="_blank" rel="external">优先级参考</a></p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre><code>var myarr=new Array();
var myarr=new Array(3);//数组长度为3
var myarr=new Array(3,4);//数组长度为2，第一个元素为3，第二个元素为4
myarr.length  //myarr的长度
myarr.splice(a,b);从myarr[a]开始删除b个元素

字符串类型有split方法，分割字符串。

sort方法，
arr.sort(function(a, b){
    if(a.length &gt; b.length){
        return 1
    }else if(a.length &lt; b.length){
        return -1
    }else{
        return 0
    }
})
//长度短的在前

二维数组定义方式：
var myarr=new Array();  //先声明一维 
for(var i=0;i&lt;2;i++){   //一维长度为2
   myarr[i]=new Array();  //再声明二维 
   for(var j=0;j&lt;3;j++){   //二维长度为3
   myarr[i][j]=i+j;   // 赋值，每个数组元素的值为i+j
   }
 }

 或者：

 var Myarr = [[0 , 1 , 2 ],[1 , 2 , 3]]//表示的是值
</code></pre><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p>if,else:<br><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1510471496920.jpg" alt="if else"></p>
<p>switch：</p>
<pre><code>switch(表达式)
{
case值1:
  执行代码块 1
  break;
case值2:
  执行代码块 2
  break;
...
case值n:
  执行代码块 n
  break;
default:
  与 case值1 、 case值2...case值n 不同时执行的代码
}
</code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>for循环：</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
var num=1;
for (num=1;num&lt;=6;num++)  //初始化值；循环条件；循环后条件值更新
{   document.write(&quot;取出第&quot;+num+&quot;个球&lt;br /&gt;&quot;);
}
&lt;/script&gt;
</code></pre><p>while循环：</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
var num=0;  //初始化值
while (num&lt;=6)   //条件判断
{
  document.write(&quot;取出第&quot;+num+&quot;个球&lt;br /&gt;&quot;);
  num=num+1;  //条件值更新
}
&lt;/script&gt;
</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote>
<p>JavaScript 创建动态页面。事件是可以被 JavaScript 侦测到的行为。 网页中的每个元素都可以产生某些可以触发 JavaScript 函数或程序的事件。<br>比如说，当用户单击按钮或者提交表单数据时，就发生一个鼠标单击（onclick）事件，需要浏览器做出处理，返回给用户一个结果。</p>
</blockquote>
<pre><code>&lt;input name=&quot;点击我&quot; type=&quot;button&quot; value=&quot;点击我&quot; onclick=&quot;openwin()&quot;/&gt;
&lt;input name=&quot;确定&quot; type=&quot;button&quot; value=&quot;确定&quot; onmouseover=&quot;message()&quot;/&gt;
&lt;form onmouseout=&quot;message()&quot;&gt;&lt;a href=&quot;http://www.imooc.com&quot; &gt;点击我&lt;/a&gt;&lt;/form&gt;
onfocus=&quot;message()&quot;
onblur事件与onfocus是相对事件，当光标离开当前获得聚焦对象的时候，触发onblur事件，同时执行被调用的程序。
&lt;input name=&quot;username&quot; type=&quot;text&quot; value=&quot;请输入用户名！&quot; onblur=&quot;message()&quot;&gt;
&lt;textarea name=&quot;summary&quot; cols=&quot;60&quot; rows=&quot;5&quot; onselect=&quot;message()&quot;&gt;请写入个人简介，不少于200字！&lt;/textarea&gt;
&lt;textarea name=&quot;summary&quot; cols=&quot;60&quot; rows=&quot;5&quot; onchange=&quot;message()&quot;&gt;请写入个人简介，不少于200字！&lt;/textarea&gt;
&lt;body onload=&quot;message()&quot;&gt;事件会在页面加载完成后，立即发生，同时执行被调用的程序。
注意：1. 加载页面时，触发onload事件，事件写在&lt;body&gt;标签内。

&lt;script type=&quot;text/javascript&quot;&gt;   
     window.onunload = onunload_message;   
     function onunload_message(){   
        alert(&quot;您确定离开该网页吗？&quot;);   
    }   
&lt;/script&gt;
</code></pre><p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1510481297715.jpg" alt="事件"></p>
<h2 id="javascript内置对象"><a href="#javascript内置对象" class="headerlink" title="javascript内置对象"></a>javascript内置对象</h2><h3 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h3><h3 id="String字符串对象"><a href="#String字符串对象" class="headerlink" title="String字符串对象"></a>String字符串对象</h3><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><h3 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h3><h2 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h2><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><h3 id="JavaScript计时器"><a href="#JavaScript计时器" class="headerlink" title="JavaScript计时器"></a>JavaScript计时器</h3><h3 id="History对象"><a href="#History对象" class="headerlink" title="History对象"></a>History对象</h3><h3 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h3><h3 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h3><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
  var b=navigator.appName;
  var b_c=navigator.appCodeName;
  var b_v=navigator.appVersion;
  var p=navigator.platform;
  var ua=navigator.userAgent;
  document.write(&quot;1:&quot;+b+&quot;&lt;br&gt;&quot;);
  document.write(&quot;2:&quot;+b_c+&quot;&lt;br&gt;&quot;);
  document.write(&quot;3:&quot;+b_v+&quot;&lt;br&gt;&quot;);
  document.write(&quot;4:&quot;+p+&quot;&lt;br&gt;&quot;);
  document.write(&quot;5:&quot;+ua+&quot;&lt;br&gt;&quot;);
&lt;/script&gt;
</code></pre><h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><h2 id="DOM对象，控制HTML元素"><a href="#DOM对象，控制HTML元素" class="headerlink" title="DOM对象，控制HTML元素"></a>DOM对象，控制HTML元素</h2>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js,前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[32位和64位系统区别及int字节数]]></title>
      <url>/2017/11/12/32%E4%BD%8D%E5%92%8C64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%8C%BA%E5%88%AB%E5%8F%8Aint%E5%AD%97%E8%8A%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="64位系统和32位有什么区别？"><a href="#64位系统和32位有什么区别？" class="headerlink" title="64位系统和32位有什么区别？"></a>64位系统和32位有什么区别？</h2><p>1、64bit CPU拥有更大的寻址能力，最大支持到16GB内存，而32bit只支持4G内存</p>
<p>2、64位CPU一次可提取64位数据，比32位提高了一倍，理论上性能会提升1倍。但这是建立在64bit操作系统，64bit软件的基础上的。</p>
<a id="more"></a>
<h3 id="什么是64位处理器？"><a href="#什么是64位处理器？" class="headerlink" title="什么是64位处理器？"></a>什么是64位处理器？</h3><p>之所以叫做“64位处理器”，是因为电脑内部都是实行2进制运算，处理器（CPU）一次处理数据的能力也是2的倍数。8位处理器、16位处理器、32位处理器和64位处理器，其计数都是2的倍数。一次处理的数据越大，该电脑处理信息的能力越来越大；因此64位处理在先天就比32位处理器具有快速的能力。那为什么不用更高级的128位处理器呢？因为位数越高，处理器芯片的设计也就越复杂，目前的技术水平暂时无法制造这么复杂的芯片。</p>
<h3 id="64位处理器之失"><a href="#64位处理器之失" class="headerlink" title="64位处理器之失"></a>64位处理器之失</h3><p>※硬件———缺乏驱动程序，很多现有硬件无法使用</p>
<p>※软件———操作系统不是问题，但是软件出现不兼容难题</p>
<h3 id="64位处理器之得"><a href="#64位处理器之得" class="headerlink" title="64位处理器之得"></a>64位处理器之得</h3><p>※硬件———更快的执行速度，更大的内存管理</p>
<p>※软件———最新的尖端软件首先出现在64位平台</p>
<h2 id="数据类型对应字节数"><a href="#数据类型对应字节数" class="headerlink" title="数据类型对应字节数"></a>数据类型对应字节数</h2><h3 id="程序运行平台"><a href="#程序运行平台" class="headerlink" title="程序运行平台"></a>程序运行平台</h3><p>不同的平台上对不同数据类型分配的字节数是不同的。<br>个人对平台的理解是CPU+OS+Compiler，是因为：<br>      1、64位机器也可以装32位系统（x64装XP）；<br>      2、32位机器上可以有16/32位的编译器（XP上有tc是16位的，其他常见的是32位的）；<br>      3、即使是32位的编译器也可以弄出64位的integer来（int64）。<br>      以上这些是基于常见的wintel平台，加上我们可能很少机会接触的其它平台（其它的CPU和OS），所以个人认为所谓平台的概念是三者的组合。<br>      虽然三者的长度可以不一样，但显然相互配合（即长度相等，32位的CPU+32位的OS+32位的Compiler）发挥的能量最大。<br>      理论上来讲 我觉得数据类型的字节数应该是由CPU决定的，但是实际上主要由编译器决定(占多少位由编译器在编译期间说了算)。</p>
<h3 id="常用数据类型对应字节数"><a href="#常用数据类型对应字节数" class="headerlink" title="常用数据类型对应字节数"></a>常用数据类型对应字节数</h3><p>  可用如<code>sizeof（char),sizeof(char*)</code>等得出</p>
<h4 id="32位编译器："><a href="#32位编译器：" class="headerlink" title="32位编译器："></a>32位编译器：</h4><pre><code>  char ：1个字节
  char*（即指针变量）: 4个字节（32位的寻址空间是2^32, 即32个bit，也就是4个字节。同理64位编译器）
  short int : 2个字节
  int：  4个字节
  unsigned int : 4个字节
  float:  4个字节
  double:   8个字节
  long:   4个字节
  long long:  8个字节
  unsigned long:  4个字节
</code></pre><h4 id="64位编译器："><a href="#64位编译器：" class="headerlink" title="64位编译器："></a>64位编译器：</h4><pre><code>  char ：1个字节
  char*(即指针变量): 8个字节
  short int : 2个字节
  int：  4个字节
  unsigned int : 4个字节
  float:  4个字节
  double:   8个字节
  long:   8个字节
  long long:  8个字节
  unsigned long:  8个字节
</code></pre>]]></content>
      
        <categories>
            
            <category> C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C,Cpp,面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS学习笔记1入门]]></title>
      <url>/2017/11/12/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>JS学习笔记1入门篇<br><a id="more"></a><br>document.write();是追加写，不是覆盖写。<br>html是顺序读取的，所以插入到html中的js也是顺序执行的。<br>JS中区分大小写；<br>引用外部js文件<br><code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code><br>定义函数：</p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
    function funcname(){
        alert(&quot;hello world!&quot;);
    }
&lt;/script&gt;

//调用

&lt;form&gt;
    &lt;input type=&quot;butten&quot; value=&quot;按钮&quot; submit=&quot;funcname()&quot; /&gt;
&lt;/form&gt;
</code></pre><p>常用命令：</p>
<pre><code>document.write(&quot;向网页中写入内容&quot;);
alert(&quot;弹窗&quot;);
confirm(&quot;确定与否，确定返回真，取消返回假！&quot;);
prompt(str1, str2);//弹窗，显示str1和文本框，文本框中为str2。确定返回文本框中的值，取消返回null。

window.open(&#39;URL&#39;,&#39;窗口名（新建窗口的位置）&#39;,&#39;参数&#39;)
URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。
窗口名称：可选参数，被打开窗口的名称。
    1.该名称由字母、数字和下划线字符组成。
    2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。
       _blank：在新窗口显示目标网页
       _self：在当前窗口显示目标网页
       _top：框架网页中在上部窗口中显示目标网页
    3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。
   4.name 不能包含有空格。
参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。
</code></pre><p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1510450850257.jpg" alt="参数"></p>
<pre><code>window.close();//关闭窗口
object=document.getElementById(&quot;id_num&quot;);//返回html对应DOM对象
Object.innerHTML //用于获取或替换 HTML 元素的内容
Object.style.property=newstyle;
基本属性表（property）:
</code></pre><p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1510453299235.jpg" alt="常用属性"></p>
<pre><code>Object.style.display = &quot;value&quot;
value取值
</code></pre><p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1510453214953.jpg" alt="value取值"></p>
<pre><code>var object=document.getElementById(&quot;p1&quot;);
object.className = &quot;classname&quot;;//控制类名（className 属性）
</code></pre><p>实例：</p>
<pre><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;txttent-Type&quot; txttent=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;javascript&lt;/title&gt;
&lt;style type=&quot;text/css&quot;&gt;
body{font-size:12px;}
#txt{
    height:400px;
    width:600px;
    border:#333 solid 1px;
    padding:5px;}
p{
    line-height:18px;
    text-indent:2em;}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h2 id=&quot;con&quot;&gt;JavaScript课程&lt;/H2&gt;
  &lt;div id=&quot;txt&quot;&gt; 
     &lt;h5&gt;JavaScript为网页添加动态效果并实现与用户交互的功能。&lt;/h5&gt;
        &lt;p&gt;1. JavaScript入门篇，让不懂JS的你，快速了解JS。&lt;/p&gt;
        &lt;p&gt;2. JavaScript进阶篇，让你掌握JS的基础语法、函数、数组、事件、内置对象、BOM浏览器、DOM操作。&lt;/p&gt;
        &lt;p&gt;3. 学完以上两门基础课后，在深入学习JavaScript的变量作用域、事件、对象、运动、cookie、正则表达式、ajax等课程。&lt;/p&gt;
  &lt;/div&gt;
  &lt;form&gt;
  &lt;!--当点击相应按钮，执行相应操作，为按钮添加相应事件--&gt;
    &lt;input type=&quot;button&quot; value=&quot;改变颜色&quot; onclick=&quot;set.changeColor()&quot;&gt;  
    &lt;input type=&quot;button&quot; value=&quot;改变宽高&quot; onclick=&quot;set.changeSize()&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;隐藏内容&quot; onclick=&quot;set.objHide()&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;显示内容&quot; onclick=&quot;set.objShow()&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;取消设置&quot; onclick=&quot;set.offSet()&quot;&gt;
  &lt;/form&gt;
  &lt;script type=&quot;text/javascript&quot;&gt;
   var txt=document.getElementById(&quot;txt&quot;);
   var set={
    changeColor:function(){
        txt.style.color=&quot;red&quot;;
        txt.style.backgroundColor=&quot;#ccc&quot;;
    },
    changeSize:function(){
        txt.style.width=&quot;300px&quot;;
        txt.style.height=&quot;300px&quot;;
    },
    objHide:function(){
        txt.style.display=&quot;none&quot;;
    },
    objShow:function(){
        txt.style.display=&quot;block&quot;;
    },
    offSet:function(){
        var message=confirm(&quot;你确定要重置所有设置么？&quot;);
        if(message==true){
            txt.removeAttribute(&#39;style&#39;);
        }
    }
  }
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js,前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[毕业设计]]></title>
      <url>/2017/11/03/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="定题"><a href="#定题" class="headerlink" title="定题"></a>定题</h2><blockquote>
<p>面向容器级别的虚拟化存储研究</p>
</blockquote>
<a id="more"></a>
<h2 id="案例研究"><a href="#案例研究" class="headerlink" title="案例研究"></a>案例研究</h2><p>speedy，容器镜像高性能存储解决方案。<br><a href="https://github.com/jcloudpub/speedy" target="_blank" rel="external">https://github.com/jcloudpub/speedy</a><br>田琪：我们通过Docker搭建了我们的弹性计算云平台，服务于公司内外各项业务。在搭建整个平台过程中遇到了很多问题，存储是其中一项待解决的问题。Docker官方提供了Docker Registry服务，但是最终的镜像文件落地存储并没有提供，目前支持的第三方存储服务主要是S3、Swift等。</p>
<p>我们也调研了一些开源分布式存储项目。发现主要存在几个问题：一是架构上倾向于无中心，或者一致性哈希等方式管理存储节点，运维方面我们比较担心可控性问题，另外增减机器都需要涉及文件数据的迁移，不利于线上系统稳定。二是大多开源方案都没有提供高性能的存储引擎，即只提供了数据分布的算法，但数据落地没有提供存储层的优化，这样产生大量文件时就会存在性能问题。三是针对大文件没有特别的优化措施。</p>
<p>认识到这些问题后，我们决定自己研发分布式存储系统，来解决和优化上述的问题。<br><img src="https://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=205537733&amp;idx=1&amp;sn=454c3ae65e684a8d0058f67bb50b2462&amp;scene=2&amp;from=timeline&amp;isappinstalled=0#rd" alt="京东开源的Docker镜像存储系统"></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>C语言编写的存储引擎高性能，高效率</li>
<li>高可用，存储实例多副本和无状态前后端代理的镜像服务器</li>
<li>高可控，弱化中心主节点，上传和下载不会通过中心主节点</li>
<li>高可扩展性，动态添加存储实例，前后端无状态镜像服务器</li>
<li>大文件被分成小块，从而可以快速并发的上传和下载这些块</li>
<li>仪表盘存储监控系统</li>
<li>仪表盘丰富的操控工具</li>
<li>支持docker 仓库1.0 API</li>
</ol>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="http://p.dearamaze.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/speedy-arch.png" alt="enter description here" title="speedy-arch"></p>
<h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><h4 id="docker-registry-speedy-driver"><a href="#docker-registry-speedy-driver" class="headerlink" title="docker-registry-speedy-driver"></a>docker-registry-speedy-driver</h4><h4 id="imageserver-镜像服务器"><a href="#imageserver-镜像服务器" class="headerlink" title="imageserver 镜像服务器"></a>imageserver 镜像服务器</h4><h4 id="块服务器主节点"><a href="#块服务器主节点" class="headerlink" title="块服务器主节点"></a>块服务器主节点</h4><h4 id="块服务器"><a href="#块服务器" class="headerlink" title="块服务器"></a>块服务器</h4><p>Docker Registry Driver是一个遵照Docker Registry 1.0协议实现的驱动，完成Docker Registry与后端存储系统的对接工作。<br>ChunkServer与ChunkMaster组成了一个通用的对象存储服务，ChunkMaster是中心节点，缓存了所有ChunkServer的信息，ChunkServer本身是最终镜像数据落地的存储节点，多个ChunkServer会构成一个组，拥有唯一的组ID，上传这个组内的所有ChunkServer都成功才算成功，下载可以随机选择其中一个节点下载。<br>ImageServer本身是一个无状态的Proxy服务，它相当于是后面通用对象存储服务的一个接入层，Driver发起的镜像上传/下载操作会直接发给ImageServer, ImageServer里面缓存了ChunkMaster中的存储节点信息，通过这些信息，ImageServer会进行ChunkServer节点的选择操作，找到一组合适的ChunkServer机器完成镜像的上传或下载操作。</p>
<h4 id="元数据服务器"><a href="#元数据服务器" class="headerlink" title="元数据服务器"></a>元数据服务器</h4><p>他是另外一个分布式的键值存储，尚未开源。你可以利用mysql代替他存储镜像层的元数据信息。</p>
<h3 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h3><p>1.metaserver<br>2.chunkmaster<br>3.chunkserver<br>4.imageserver<br>5.docker-registry</p>
<p>After that you can push and pull docker images.</p>
<h3 id="上传流程："><a href="#上传流程：" class="headerlink" title="上传流程："></a>上传流程：</h3><p>首先我们通过docker push命令发起上传镜像的操作，docker本身会进行多次与后端存储系统的交互，最后一次交互是上传image的layer数据到Docker Registry。</p>
<blockquote>
<p>这里我要简单吐个槽，合理的情况是这个结构化数据和非结构化数据分开存储，docker本身用json表示结构化的描述信息，也是上传到后端存储系统的，个人觉得docker的元数据管理方面很混乱。</p>
</blockquote>
<p>如果使用默认的本地存储，Docker Registry就直接把数据写到了磁盘上，我们这里通过自己实现的Driver完成与后端对象存储系统的上传工作。</p>
<p>我们的Driver首先会对源源不断上传过来的字节流进行切割，按照配置的固定大小并发上传到ImageServer中，并在上传的http请求中携带了该分片的索引及位置信息。</p>
<p>ImageServer在收到该分片上传请求后，根据自己从ChunkMaster中同步过来的chunk信息来动态选择一组ChunkServer，并将分片上传到该组ChunkServer中的所有实例上，都成功才返回成功。并将分片索引位置信息及上传成功返回的文件ID提交给MetaServer保存.</p>
<p>Driver在收到所有分片的上传成功返回后，再返回给前端Docker，整个上传流程结束。</p>
<h3 id="下载流程："><a href="#下载流程：" class="headerlink" title="下载流程："></a>下载流程：</h3><p>首先docker通过docker pull请求下载镜像，同样在真正下载数据开始前，docker同Docker Registry以及后端的存储系统间也会产生多次的数据交互，这里省略，最后一步是下载对应的Image Layer数据。</p>
<p>Docker Registry在收到下载请求后首先通过ImageServer从MetaServer里获取到该文件path对应的分片信息，主要是分片的个数，及每一片的索引，然后将这些分片下载请求并发的发送给ImageServer服务器。</p>
<p>ImageServer收到分片下载请求后，查询MetaServer获得对应的文件ID，该文件ID中包含有ChunkServer的位置信息，随后请求相应ChunkServer下载数据并返回给Driver。</p>
<p>Driver收到分片下载的数据后，会根据分片的位置索引进行排序，按文件分片顺序返回给Docker。</p>
<h2 id="研究内容"><a href="#研究内容" class="headerlink" title="研究内容"></a>研究内容</h2><ol>
<li>metadata组织形式（他是没有开源的）。</li>
<li>另外一个就是driver部分，他目前用的是device-mapper，他也提到overlayfs。<br> a. 我们可以在dm上面做文章，加上我们的重删。<br> b. 利用overlayfs，做driver，这个工作量估计有点大。</li>
</ol>
<p>1、Docker镜像存储技术探秘</p>
<p>我们首先思考一个问题，docker本质上都涉及了哪些方面的技术：</p>
<p>Linux内核系统技术，如：Namespace, Cgroup等；<br>存储技术，如：镜像的存储，镜像的CoW所需的文件系统，如：overlayfs, aufs, dm等；<br>网络技术，如：libnetwork，flannel等开源项目主要来解决容器的网络互通及SDN等问题。<br>我们今天的话题主要集中在存储技术方面，也就是和镜像相关，docker依赖的存储技术方面也是分为两个方面：</p>
<p>单机内核层存储技术，也就是overlayfs, aufs等主要用于提供镜像的CoW机制，解决的是一台物理资源跑多个容器，多个容器之间共享同一个rootfs，然后各自修改是通过CoW完成的，这样解决存储空间等问题。这个话题我已经公开分享过很多次，不再多说了。<br>另一层面，当我们使用Docker过程中，可能会使用到很多不同的镜像，这些镜像本身也是需要存储的，我们需要一个靠可用的可扩展的分布式存储系统。<br>我们今天就详细讨论这两个方面的技术选型，Docker镜像驱动的选择。默认支持的驱动主要有这几个：</p>
<p>Docker<br>btrfs<br>aufs<br>overlayfs<br>device mapper<br>vfs<br>个人认为我们的选择主要是在overlayfs与device mapper之间，btrfs因为目前还没有production ready，生产环境用的公司应该很少，aufs因为没有进入主线内核，且代码庞大书写风格又比较混乱，所以也不是很看好，目前只有少数发行版默认支持这个文件系统。</p>
<p>而vfs则是完全没有解决任何问题，比如一台物理机跑100个容器，则相应的rootfs会独立保存100份，这个完全没法接受，所以最终我们很可能是在overlayfs与device mapper之间进行选择。</p>
<p>ovelayfs简介：</p>
<p>overlayfs本身是一个叠加文件系统，用于叠合多个文件系统形成一个新的文件系统，使用方式如下：</p>
<p>mount -t overlay overlay -olowerdir=/lower, upperdir=/upper, workdir=/work /merged</p>
<p>简单的说overlayfs通过Linux内核VFS层的灵活性能够将对文件A的修改变成对B的修改，利用这种灵活性来完成文件系统叠加的效果。比如指令：</p>
<p>/lower：是下层的文件系统，通常是只读的。可以放我们的镜像模板的rootfs 如果我们要对其中某个文件做修改，比如文件A，则overlayfs会将该文件拷贝到/upper目录中修改，也就是实现了文件级别的CoW。<br>/merged ：是最终叠加后形成的文件系统，也就是用户实际使用看到叠加效果后的文件系统。<br>device-mapper简介：</p>
<p>device-mapper(后面简称dm)本身是一个位于内核通用块层的一个框架，完成内核IO的一些策略定制等功能，比如可以通过dm完成磁盘的软raid功能，比如facebook前些时间开源的flashcache缓存方案也是基于device-mapper的。</p>
<p>DM是一个框架，提供了通用的一套框架完成IO的重定向及定制等策略，它包含很多具体的策略实现，Docker用到的是其中的thin-provision。thin-provision本质上提供两个功能：</p>
<p>磁盘空间按需分配，这个特点决定了如果Docker使用dm驱动，则对应的盘大小默认10G，实际是不占任何空间的，直到你真正写入数据，才会占用实际的磁盘空间。<br>基于block块粒度的CoW，如上面overlayfs原理类似，我要修改一个文件，thin-provision会将修改的部分对应的磁盘块单独拷贝出来一份修改，这里粒度是要小于overlayfs的。<br>dm与overlayfs之间的选择：</p>
<p>从上面原理上分析不难得出一个结论，dm的CoW的粒度是要比overlayfs的小的，也就是说如果用overlayfs做驱动，存在的问题是如果模板rootfs中有个比较大的文件在大多数容器中都可能会动态修改，则这个文件需要整个copyup到上层文件系统，而用dm则只需要CoW修改的那个块。</p>
<p>从这方面讲dm是占优的，但是dm在使用中存在很多功能限制，因为它本身是一个块设备，所以并不了解上层文件系统的细节，使用中存在种种限制，并且在文件系统缓存这层也没有overlayfs有效。但是overlayfs需要3.18以上kernel才支持。大多数Linux发行版还不支持这么高的内核版本，所以需要单独编译。</p>
<p>综合考虑，个人认为当前用dm是可以接受的选择，未来可能会切换到overlayfs上。</p>
]]></content>
      
        <categories>
            
            <category> 存储 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容器,计划 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python time datetime学习]]></title>
      <url>/2017/10/25/python%20time%20datetime%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python,时间处理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据可视化echarts]]></title>
      <url>/2017/10/25/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96bokeh/</url>
      <content type="html"><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><blockquote>
<p>展示数据</p>
</blockquote>
<p>就是向人家写好的框架里面填充数据。调参侠！</p>
<a id="more"></a>
<h2 id="常用图形"><a href="#常用图形" class="headerlink" title="常用图形"></a>常用图形</h2><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h2 id="前后端代码模板"><a href="#前后端代码模板" class="headerlink" title="前后端代码模板"></a>前后端代码模板</h2>]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python,数据分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb 学习笔记]]></title>
      <url>/2017/10/23/mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="mongodb简介"><a href="#mongodb简介" class="headerlink" title="mongodb简介"></a>mongodb简介</h2><a id="more"></a>
<h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><h2 id="mongodb常用命令"><a href="#mongodb常用命令" class="headerlink" title="mongodb常用命令"></a>mongodb常用命令</h2><h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><p><code>show dbs</code></p>
<h3 id="显示该数据库下所有集合（表）"><a href="#显示该数据库下所有集合（表）" class="headerlink" title="显示该数据库下所有集合（表）"></a>显示该数据库下所有集合（表）</h3><p><code>show collections</code><br>或者<br><code>show tables</code></p>
<h3 id="显示集合中所有数据（查询）"><a href="#显示集合中所有数据（查询）" class="headerlink" title="显示集合中所有数据（查询）"></a>显示集合中所有数据（查询）</h3><pre><code># 输出
&gt; db.col.find()
{ &quot;_id&quot; : ObjectId(&quot;59edaea04995c58db2af8d2d&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;by&quot; : &quot;NB教程&quot; }
{ &quot;_id&quot; : ObjectId(&quot;59edafca4995c58db2af8d2e&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;NB教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 }

# 格式化输出
&gt; db.col.find().pretty()
{
    &quot;_id&quot; : ObjectId(&quot;59edaea04995c58db2af8d2d&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;by&quot; : &quot;NB教程&quot;
}
{
    &quot;_id&quot; : ObjectId(&quot;59edafca4995c58db2af8d2e&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
    &quot;by&quot; : &quot;NB教程&quot;,
    &quot;url&quot; : &quot;http://www.runoob.com&quot;,
    &quot;tags&quot; : [
        &quot;mongodb&quot;,
        &quot;database&quot;,
        &quot;NoSQL&quot;
    ],
    &quot;likes&quot; : 100
}
</code></pre><table class="reference"><br>    <thead><br>    <tr><br>    <th>操作</th><br>    <th>格式</th><br>    <th>范例</th><br>    <th>RDBMS中的类似语句</th><br>    </tr><br>    </thead><br>    <tbody><br>    <tr><br>    <td>等于</td><br>    <td><code>{&lt;key&gt;:&lt;value&gt;</code>}</td><br>    <td><code>db.col.find({“by”:”菜鸟教程”}).pretty()</code></td><br>    <td><code>where by = ‘菜鸟教程’</code></td><br>    </tr><br>    <tr><br>    <td>小于</td><br>    <td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><br>    <td><code>db.col.find({“likes”:{$lt:50}}).pretty()</code></td><br>    <td><code>where likes &lt; 50</code></td><br>    </tr><br>    <tr><br>    <td>小于或等于</td><br>    <td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><br>    <td><code>db.col.find({“likes”:{$lte:50}}).pretty()</code></td><br>    <td><code>where likes &lt;= 50</code></td><br>    </tr><br>    <tr><br>    <td>大于</td><br>    <td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><br>    <td><code>db.col.find({“likes”:{$gt:50}}).pretty()</code></td><br>    <td><code>where likes &gt; 50</code></td><br>    </tr><br>    <tr><br>    <td>大于或等于</td><br>    <td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><br>    <td><code>db.col.find({“likes”:{$gte:50}}).pretty()</code></td><br>    <td><code>where likes &gt;= 50</code></td><br>    </tr><br>    <tr><br>    <td>不等于</td><br>    <td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><br>    <td><code>db.col.find({“likes”:{$ne:50}}).pretty()</code></td><br>    <td><code>where likes != 50</code></td><br>    </tr><br>    </tbody><br></table>

<h4 id="AND-和-OR-联合使用"><a href="#AND-和-OR-联合使用" class="headerlink" title="AND 和 OR 联合使用"></a>AND 和 OR 联合使用</h4><pre><code>以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为： &#39;where likes&gt;50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;)&#39;

&gt;db.col.find({&quot;likes&quot;: {$gt:50}, $or: [{&quot;by&quot;: &quot;菜鸟教程&quot;},{&quot;title&quot;: &quot;MongoDB 教程&quot;}]}).pretty()
{
        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),
        &quot;title&quot; : &quot;MongoDB 教程&quot;,
        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
        &quot;by&quot; : &quot;菜鸟教程&quot;,
        &quot;url&quot; : &quot;http://www.runoob.com&quot;,
        &quot;tags&quot; : [
                &quot;mongodb&quot;,
                &quot;database&quot;,
                &quot;NoSQL&quot;
        ],
        &quot;likes&quot; : 100
}
</code></pre><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>使用用户名和密码连接登陆到指定数据库，格式如下：<br><code>mongodb://admin:123456@localhost/test</code></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>use dbname</code><br>如果数据库存在，则切换到dbname，如果不存在，则创建。<br>刚创建完成后，使用<code>show dbs</code>命令，看不到dbname，必须向dbname中添加数据后才能显示。</p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre><code>&gt; show dbs 
admin  0.000GB
fdl    0.000GB
local  0.000GB
test   0.000GB
&gt; use fdl
switched to db fdl
&gt; db.dropDatabase()
2017-10-23T16:54:13.853+0800 I COMMAND  [conn1] dropDatabase fdl starting
2017-10-23T16:54:13.857+0800 I COMMAND  [conn1] dropDatabase fdl finished
{ &quot;dropped&quot; : &quot;fdl&quot;, &quot;ok&quot; : 1 }
&gt; show dbs
admin  0.000GB
local  0.000GB
test   0.000GB
</code></pre><h3 id="向collection添加数据"><a href="#向collection添加数据" class="headerlink" title="向collection添加数据"></a>向collection添加数据</h3><p><code>db.collectionname.insert({&quot;name&quot;:&quot;fandeliang&quot;})</code></p>
<pre><code class="shell?linenums">#  插入单条数据

&gt; var document = db.collection.insertOne({&quot;a&quot;: 3})
&gt; document
{
        &quot;acknowledged&quot; : true,
        &quot;insertedId&quot; : ObjectId(&quot;571a218011a82a1d94c02333&quot;)
}

#  插入多条数据
&gt; var res = db.collection.insertMany([{&quot;b&quot;: 3}, {&#39;c&#39;: 4}])
&gt; res
{
        &quot;acknowledged&quot; : true,
        &quot;insertedIds&quot; : [
                ObjectId(&quot;571a22a911a82a1d94c02337&quot;),
                ObjectId(&quot;571a22a911a82a1d94c02338&quot;)
        ]
}
</code></pre>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>注意加不加<code>$set:</code>的区别。</p>
<pre><code>&gt; use test
switched to db test
&gt; db.col.insert({
...     title: &#39;MongoDB 教程&#39;, 
...     description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
...     by: &#39;菜鸟教程&#39;,
...     url: &#39;http://www.runoob.com&#39;,
...     tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
...     likes: 100
... })
WriteResult({ &quot;nInserted&quot; : 1 })
&gt; show tables;
col
runoob
&gt; db.col.find()
{ &quot;_id&quot; : ObjectId(&quot;59edaea04995c58db2af8d2d&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 }
&gt; db.col.update({&quot;title&quot;:&quot;MongoDB 教程&quot;},{&quot;title&quot;:&quot;MongoDB&quot;,&quot;by&quot;:&quot;NB教程&quot;})
WriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 })
&gt; db.col.find()
{ &quot;_id&quot; : ObjectId(&quot;59edaea04995c58db2af8d2d&quot;), &quot;title&quot; : &quot;MongoDB&quot;, &quot;by&quot; : &quot;NB教程&quot; }
&gt; db.col.find().pretty()
{
    &quot;_id&quot; : ObjectId(&quot;59edaea04995c58db2af8d2d&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;by&quot; : &quot;NB教程&quot;
}
&gt; db.col.insert({
...     title: &#39;MongoDB 教程&#39;, 
...     description: &#39;MongoDB 是一个 Nosql 数据库&#39;,
...     by: &#39;菜鸟教程&#39;,
...     url: &#39;http://www.runoob.com&#39;,
...     tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],
...     likes: 100
... })
WriteResult({ &quot;nInserted&quot; : 1 })
&gt; db.col.update({&quot;title&quot;:&quot;MongoDB 教程&quot;},{$set:{&quot;title&quot;:&quot;MongoDB&quot;,&quot;by&quot;:&quot;NB教程&quot;}})
WriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 })
&gt; db.col.find().pretty()
{
    &quot;_id&quot; : ObjectId(&quot;59edaea04995c58db2af8d2d&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;by&quot; : &quot;NB教程&quot;
}
{
    &quot;_id&quot; : ObjectId(&quot;59edafca4995c58db2af8d2e&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
    &quot;by&quot; : &quot;NB教程&quot;,
    &quot;url&quot; : &quot;http://www.runoob.com&quot;,
    &quot;tags&quot; : [
        &quot;mongodb&quot;,
        &quot;database&quot;,
        &quot;NoSQL&quot;
    ],
    &quot;likes&quot; : 100
}

更多实例
只更新第一条记录：
db.col.update( { &quot;count&quot; : { $gt : 1 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} } );
全部更新：
db.col.update( { &quot;count&quot; : { $gt : 3 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} },false,true );
只添加第一条：
db.col.update( { &quot;count&quot; : { $gt : 4 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,false );
全部添加加进去:
db.col.update( { &quot;count&quot; : { $gt : 5 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,true );
全部更新：
db.col.update( { &quot;count&quot; : { $gt : 15 } } , { $inc : { &quot;count&quot; : 1} },false,true );
只更新第一条记录：
db.col.update( { &quot;count&quot; : { $gt : 10 } } , { $inc : { &quot;count&quot; : 1} },false,false );
</code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><pre><code>&gt; db.col.find().pretty()
{
    &quot;_id&quot; : ObjectId(&quot;59edaea04995c58db2af8d2d&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;by&quot; : &quot;NB教程&quot;
}
{
    &quot;_id&quot; : ObjectId(&quot;59edafca4995c58db2af8d2e&quot;),
    &quot;title&quot; : &quot;MongoDB&quot;,
    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,
    &quot;by&quot; : &quot;NB教程&quot;,
    &quot;url&quot; : &quot;http://www.runoob.com&quot;,
    &quot;tags&quot; : [
        &quot;mongodb&quot;,
        &quot;database&quot;,
        &quot;NoSQL&quot;
    ],
    &quot;likes&quot; : 100
}
&gt; db.col.remove({&#39;title&#39;:&quot;MongoDB&quot;})
WriteResult({ &quot;nRemoved&quot; : 2 })
&gt; db.col.find().pretty()
&gt; 
db.collection.remove(
   &lt;query&gt;,
   {
     justOne: &lt;boolean&gt;,
     writeConcern: &lt;document&gt;
   }
)
参数说明：
query :（可选）删除的文档的条件。
justOne : （可选）如果设为 true 或 1，则只删除一个文档。
writeConcern :（可选）抛出异常的级别。

如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：
&gt;db.col.remove({})
&gt;db.col.find()
&gt;
</code></pre><h3 id="type-操作符"><a href="#type-操作符" class="headerlink" title="$type 操作符"></a>$type 操作符</h3><blockquote>
<p>MongoDB 中可以使用的类型如下表所示：<br>类型    数字    备注<br>Double    1<br>String    2<br>Object    3<br>Array    4<br>Binary data    5<br>Undefined    6    已废弃。<br>Object id    7<br>Boolean    8<br>Date    9<br>Null    10<br>Regular Expression    11<br>JavaScript    13<br>Symbol    14<br>JavaScript (with scope)    15<br>32-bit integer    16<br>Timestamp    17<br>64-bit integer    18<br>Min key    255    Query with -1.<br>Max key    127     </p>
</blockquote>
<pre><code>如果想获取 &quot;col&quot; 集合中 title 为 String 的数据，你可以使用以下命令：

db.col.find({&quot;title&quot; : {$type : 2}})

输出结果为：
{ &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 }
{ &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 }
{ &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 }
</code></pre><h3 id="Limit-Skip-和sort-方法"><a href="#Limit-Skip-和sort-方法" class="headerlink" title="Limit , Skip 和sort()方法"></a>Limit , Skip 和sort()方法</h3><blockquote>
<p>如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。<br>我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。<br>在MongoDB中使用使用sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列。<br>当查询时同时使用sort,skip,limit，无论位置先后，最先执行顺序 sort再skip再limit。</p>
</blockquote>
<pre><code>想要读取从 10 条记录后 100 条记录，相当于 sql 中limit (10,100)。
&gt; db.COLLECTION_NAME.find().skip(10).limit(100)
以上实例在集合中跳过前面 10 条返回 100 条数据。
skip 和 limit 结合就能实现分页。

db.col.find({},{&quot;title&quot;:1,_id:0}).limit(2)
补充说明：
第一个 {} 放 where 条件，为空表示返回集合中所有文档。
第二个 {} 指定那些列显示和不显示 （0表示不显示 1表示显示)。

&gt;db.col.find({},{&quot;title&quot;:1,_id:0}).sort({&quot;likes&quot;:-1})
{ &quot;title&quot; : &quot;PHP 教程&quot; }
{ &quot;title&quot; : &quot;Java 教程&quot; }
{ &quot;title&quot; : &quot;MongoDB 教程&quot; }
&gt;
</code></pre><p>### </p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb,数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux镜像源整理]]></title>
      <url>/2017/09/30/Linux%E9%95%9C%E5%83%8F%E6%BA%90%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<p><a href="http://mirrors.ustc.edu.cn/help/" target="_blank" rel="external">各种Linux发行版源配置</a><br><a href="http://blog.csdn.net/bleachswh/article/details/51423585" target="_blank" rel="external">Linux国内常用源的介绍和使用</a><br><a href="http://blog.csdn.net/u013005025/article/details/60777128" target="_blank" rel="external">Linux镜像源 国内列表</a></p>
<a id="more"></a>
<p><a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8" target="_blank" rel="external">Ubuntu源配置</a></p>
<h2 id="站点版"><a href="#站点版" class="headerlink" title="站点版"></a>站点版</h2><h3 id="企业站"><a href="#企业站" class="headerlink" title="企业站"></a>企业站</h3><p>1.搜狐：<a href="http://mirrors.sohu.com/" target="_blank" rel="external">http://mirrors.sohu.com/</a><br>2.网易：<a href="http://mirrors.163.com/" target="_blank" rel="external">http://mirrors.163.com/</a><br>3.阿里云：<a href="http://mirrors.aliyun.com/" target="_blank" rel="external">http://mirrors.aliyun.com/</a><br>4.腾讯：<a href="http://android-mirror.bugly.qq.com:8080/（仅针对APP开发的软件，限流，不推荐）" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/（仅针对APP开发的软件，限流，不推荐）</a></p>
<h3 id="教育站"><a href="#教育站" class="headerlink" title="教育站"></a>教育站</h3><p>1.上海交通大学：<a href="http://ftp.sjtu.edu.cn/html/resources.xml（部分移动运营商出口状况不佳，无法访问）" target="_blank" rel="external">http://ftp.sjtu.edu.cn/html/resources.xml（部分移动运营商出口状况不佳，无法访问）</a><br>2.华中科技大学：<a href="http://mirror.hust.edu.cn/（当前已用容量估计：4.83T）" target="_blank" rel="external">http://mirror.hust.edu.cn/（当前已用容量估计：4.83T）</a><br>3.清华大学：<a href="http://mirrors.tuna.tsinghua.edu.cn/（当前已用容量估计：9.8T）" target="_blank" rel="external">http://mirrors.tuna.tsinghua.edu.cn/（当前已用容量估计：9.8T）</a><br>4.北京理工大学：<a href="http://mirror.bit.edu.cn/web/" target="_blank" rel="external">http://mirror.bit.edu.cn/web/</a><br>5.兰州大学：<a href="http://mirror.lzu.edu.cn/" target="_blank" rel="external">http://mirror.lzu.edu.cn/</a><br>6.中国科技大学：<a href="http://mirrors.ustc.edu.cn/（当前已用容量估计：21.32T）" target="_blank" rel="external">http://mirrors.ustc.edu.cn/（当前已用容量估计：21.32T）</a><br>7.大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/（当前已用容量估计：2.5T）" target="_blank" rel="external">http://mirrors.neusoft.edu.cn/（当前已用容量估计：2.5T）</a><br>8.东北大学：<a href="http://mirror.neu.edu.cn/" target="_blank" rel="external">http://mirror.neu.edu.cn/</a><br>9.大连理工大学：<a href="http://mirror.dlut.edu.cn/" target="_blank" rel="external">http://mirror.dlut.edu.cn/</a><br>10.哈尔滨工业大学：<a href="http://run.hit.edu.cn/html/（部分联通运营商出口状况不佳，无法访问）" target="_blank" rel="external">http://run.hit.edu.cn/html/（部分联通运营商出口状况不佳，无法访问）</a><br>11.北京交通大学：<a href="http://mirror.bjtu.edu.cn/cn/" target="_blank" rel="external">http://mirror.bjtu.edu.cn/cn/</a><br>12.天津大学：<a href="http://mirror.tju.edu.cn（无法访问，ping超时）" target="_blank" rel="external">http://mirror.tju.edu.cn（无法访问，ping超时）</a><br>13.中国地质大学：<a href="http://mirrors.cug.edu.cn/（当前已用容量估计：2.3T）" target="_blank" rel="external">http://mirrors.cug.edu.cn/（当前已用容量估计：2.3T）</a><br>14.浙江大学：<a href="http://mirrors.zju.edu.cn/" target="_blank" rel="external">http://mirrors.zju.edu.cn/</a><br>15.厦门大学：<a href="http://mirrors.xmu.edu.cn/" target="_blank" rel="external">http://mirrors.xmu.edu.cn/</a><br>16.中山大学：<a href="http://mirror.sysu.edu.cn/" target="_blank" rel="external">http://mirror.sysu.edu.cn/</a><br>17.重庆大学：<a href="http://mirrors.cqu.edu.cn/（当前已用容量估计：3.93T）" target="_blank" rel="external">http://mirrors.cqu.edu.cn/（当前已用容量估计：3.93T）</a><br>18.北京化工大学：<a href="http://ubuntu.buct.edu.cn/（Android" target="_blank" rel="external">http://ubuntu.buct.edu.cn/（Android</a> SDK镜像仅供校内使用，当前已用容量估计：1.72T）<br>19.南阳理工学院：<a href="http://mirror.nyist.edu.cn/" target="_blank" rel="external">http://mirror.nyist.edu.cn/</a><br>20.中国科学院：<a href="http://www.opencas.org/mirrors/" target="_blank" rel="external">http://www.opencas.org/mirrors/</a><br>21.电子科技大学：<a href="http://ubuntu.uestc.edu.cn/（无法访问，ping超时）" target="_blank" rel="external">http://ubuntu.uestc.edu.cn/（无法访问，ping超时）</a><br>22.电子科技大学星辰工作室：<a href="http://mirrors.stuhome.net/（当前已用容量估计：1.08T）" target="_blank" rel="external">http://mirrors.stuhome.net/（当前已用容量估计：1.08T）</a><br>23.西北农林科技大学：<a href="http://mirrors.nwsuaf.edu.cn/（只做CentOS镜像，当前已用容量估计：140GB）" target="_blank" rel="external">http://mirrors.nwsuaf.edu.cn/（只做CentOS镜像，当前已用容量估计：140GB）</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1.首都在线科技股份有限公司（英文名Capital Online Data Service）：<a href="http://mirrors.yun-idc.com/" target="_blank" rel="external">http://mirrors.yun-idc.com/</a><br>2.中国电信天翼云：<a href="http://mirrors.ctyun.cn/" target="_blank" rel="external">http://mirrors.ctyun.cn/</a><br>3.noc.im：<a href="http://mirrors.noc.im/（当前已用容量估计：3.74T）" target="_blank" rel="external">http://mirrors.noc.im/（当前已用容量估计：3.74T）</a><br>4.常州贝特康姆软件技术有限公司：<a href="http://centos.bitcomm.cn/（只做CentOS镜像，当前已用容量估计：140GB）" target="_blank" rel="external">http://centos.bitcomm.cn/（只做CentOS镜像，当前已用容量估计：140GB）</a><br>5.公云PubYun（母公司为贝特康姆）：<a href="http://mirrors.pubyun.com/" target="_blank" rel="external">http://mirrors.pubyun.com/</a><br>6.Linux运维派：<a href="http://mirrors.skyshe.cn/（使用阿里云服务器，界面使用浙江大学的模板，首页维护，内容可访问）" target="_blank" rel="external">http://mirrors.skyshe.cn/（使用阿里云服务器，界面使用浙江大学的模板，首页维护，内容可访问）</a><br>7.中国互联网络信息中心：<a href="http://mirrors.cnnic.cn/（只做Apache镜像，当前已用容量估计：120GB）" target="_blank" rel="external">http://mirrors.cnnic.cn/（只做Apache镜像，当前已用容量估计：120GB）</a><br>8.Fayea工作室：<a href="http://apache.fayea.com/（只做Apache镜像，当前已用容量估计：120GB）" target="_blank" rel="external">http://apache.fayea.com/（只做Apache镜像，当前已用容量估计：120GB）</a></p>
<h2 id="软件版"><a href="#软件版" class="headerlink" title="软件版"></a>软件版</h2><h3 id="操作系统类"><a href="#操作系统类" class="headerlink" title="操作系统类"></a>操作系统类</h3><p>1.Ubuntu<br>阿里云：<a href="http://mirrors.aliyun.com/ubuntu-releases/" target="_blank" rel="external">http://mirrors.aliyun.com/ubuntu-releases/</a><br>网易：<a href="http://mirrors.163.com/ubuntu-releases/" target="_blank" rel="external">http://mirrors.163.com/ubuntu-releases/</a><br>搜狐：<a href="http://mirrors.sohu.com/ubuntu-releases/（搜狐在12年之后似乎不同步了）" target="_blank" rel="external">http://mirrors.sohu.com/ubuntu-releases/（搜狐在12年之后似乎不同步了）</a><br>首都在线科技股份有限公司：<a href="http://mirrors.yun-idc.com/ubuntu-releases/" target="_blank" rel="external">http://mirrors.yun-idc.com/ubuntu-releases/</a></p>
<p>2.centos<br>网易：<a href="http://mirrors.163.com/centos/" target="_blank" rel="external">http://mirrors.163.com/centos/</a><br>搜狐：<a href="http://mirrors.sohu.com/centos/" target="_blank" rel="external">http://mirrors.sohu.com/centos/</a><br>阿里云：<a href="http://mirrors.aliyun.com/centos/" target="_blank" rel="external">http://mirrors.aliyun.com/centos/</a></p>
<h3 id="服务器类"><a href="#服务器类" class="headerlink" title="服务器类"></a>服务器类</h3><p>1.tomcat、Apache<br>中国互联网络信息中心：<a href="http://mirrors.cnnic.cn/apache/" target="_blank" rel="external">http://mirrors.cnnic.cn/apache/</a><br>华中科技大学：<a href="http://mirrors.hust.edu.cn/apache/" target="_blank" rel="external">http://mirrors.hust.edu.cn/apache/</a><br>北京理工大学：<a href="http://mirror.bit.edu.cn/apache/" target="_blank" rel="external">http://mirror.bit.edu.cn/apache/</a></p>
<p>2.MySQL<br>北京理工大学：<a href="http://mirror.bit.edu.cn/mysql/Downloads/" target="_blank" rel="external">http://mirror.bit.edu.cn/mysql/Downloads/</a><br>中国电信天翼云：<a href="http://mirrors.ctyun.cn/Mysql/" target="_blank" rel="external">http://mirrors.ctyun.cn/Mysql/</a></p>
<p>3.PostgreSQL<br>浙江大学：<a href="http://mirrors.zju.edu.cn/postgresql/" target="_blank" rel="external">http://mirrors.zju.edu.cn/postgresql/</a></p>
<p>4.MariaDB<br>中国电信天翼云：<a href="http://mirrors.ctyun.cn/MariaDB/" target="_blank" rel="external">http://mirrors.ctyun.cn/MariaDB/</a></p>
<p>5.VideoLAN<br>大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/videolan/" target="_blank" rel="external">http://mirrors.neusoft.edu.cn/videolan/</a><br>中国科技大学：<a href="http://mirrors.ustc.edu.cn/videolan-ftp/" target="_blank" rel="external">http://mirrors.ustc.edu.cn/videolan-ftp/</a></p>
<h3 id="开发工具类"><a href="#开发工具类" class="headerlink" title="开发工具类"></a>开发工具类</h3><p>1.eclipse<br>中国科技大学：<a href="http://mirrors.ustc.edu.cn/eclipse/" target="_blank" rel="external">http://mirrors.ustc.edu.cn/eclipse/</a><br>中国科学院：<a href="http://mirrors.opencas.cn/eclipse/" target="_blank" rel="external">http://mirrors.opencas.cn/eclipse/</a><br>东北大学：<a href="http://ftp.neu.edu.cn/mirrors/eclipse/，http://mirror.neu.edu.cn/eclipse/" target="_blank" rel="external">http://ftp.neu.edu.cn/mirrors/eclipse/，http://mirror.neu.edu.cn/eclipse/</a></p>
<p>2.安卓SDK<br>中国科学院：<a href="http://mirrors.opencas.ac.cn/android/repository/" target="_blank" rel="external">http://mirrors.opencas.ac.cn/android/repository/</a><br>南洋理工学院：<a href="http://mirror.nyist.edu.cn/android/repository/" target="_blank" rel="external">http://mirror.nyist.edu.cn/android/repository/</a><br>中国科学院：<a href="http://mirrors.opencas.cn/android/repository/" target="_blank" rel="external">http://mirrors.opencas.cn/android/repository/</a><br>腾讯：<a href="http://android-mirror.bugly.qq.com:8080/android/repository/（限流，不推荐）" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/android/repository/（限流，不推荐）</a><br>大连东软信息学院：<a href="http://mirrors.neusoft.edu.cn/android/repository/（同步效果不如中科院的镜像，不推荐）" target="_blank" rel="external">http://mirrors.neusoft.edu.cn/android/repository/（同步效果不如中科院的镜像，不推荐）</a></p>
<p>3.Xcode<br>腾讯：<a href="http://android-mirror.bugly.qq.com:8080/Xcode/（从7.2之后不再更新，建议直接从官网下载）" target="_blank" rel="external">http://android-mirror.bugly.qq.com:8080/Xcode/（从7.2之后不再更新，建议直接从官网下载）</a></p>
<h2 id="官方镜像列表状态地址"><a href="#官方镜像列表状态地址" class="headerlink" title="官方镜像列表状态地址"></a>官方镜像列表状态地址</h2><p>CentOS：<a href="http://mirror-status.centos.org/#cn" target="_blank" rel="external">http://mirror-status.centos.org/#cn</a><br>Archlinux：<a href="https://www.archlinux.org/mirrors/status/" target="_blank" rel="external">https://www.archlinux.org/mirrors/status/</a><br>Ubuntu：<a href="https://launchpad.net/ubuntu/+cdmirrors" target="_blank" rel="external">https://launchpad.net/ubuntu/+cdmirrors</a><br>Debian：<a href="http://mirror.debian.org/status.html" target="_blank" rel="external">http://mirror.debian.org/status.html</a><br>Fedora Linux/Fedora EPEL：<a href="https://admin.fedoraproject.org/mirrormanager/mirrors" target="_blank" rel="external">https://admin.fedoraproject.org/mirrormanager/mirrors</a><br>Apache：<a href="http://www.apache.org/mirrors/#cn" target="_blank" rel="external">http://www.apache.org/mirrors/#cn</a><br>Cygwin：<a href="https://www.cygwin.com/mirrors.html" target="_blank" rel="external">https://www.cygwin.com/mirrors.html</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux,运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tcpdump 学习笔记]]></title>
      <url>/2017/09/29/tcpdump%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>dump the traffic on a network，根据使用者的定义对网络上的数据包进行截获的包分析工具。 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p>
</blockquote>
<h3 id="Linux-抓包原理"><a href="#Linux-抓包原理" class="headerlink" title="Linux 抓包原理"></a>Linux 抓包原理</h3><blockquote>
<p>Linux抓包是通过注册一种虚拟的底层网络协议来完成对网络报文(准确的说是网络设备)消息的处理权。当网卡接收到一个网络报文之后，它会遍历系统中所有已经注册的网络协议，例如以太网协议、x25协议处理模块来尝试进行报文的解析处理，这一点和一些文件系统的挂载相似，就是让系统中所有的已经注册的文件系统来进行尝试挂载，如果哪一个认为自己可以处理，那么就完成挂载。</p>
<p>当抓包模块把自己伪装成一个网络协议的时候，系统在收到报文的时候就会给这个伪协议一次机会，让它来对网卡收到的报文进行一次处理，此时该模块就会趁机对报文进行窥探，也就是把这个报文完完整整的复制一份，假装是自己接收到的报文，汇报给抓包模块。</p>
</blockquote>
<a id="more"></a>
<h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h3><p>Wireshark是一个网络协议检测工具，支持Windows平台、Unix平台、Mac平台，一般只在图形界面平台下使用Wireshark，如果是Linux的话，直接使用tcpdump了，因为一般而言Linux都自带的tcpdump，或者用tcpdump抓包以后用Wireshark打开分析。</p>
<p>在Mac平台下，Wireshark通过WinPcap进行抓包，封装的很好，使用起来很方便，可以很容易的制定抓包过滤器或者显示过滤器，具体简单使用下面会介绍。Wireshark是一个免费的工具，只要google一下就能很容易找到下载的地方。</p>
<p>所以，tcpdump是用来抓取数据非常方便，Wireshark则是用于分析抓取到的数据比较方便。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>tcpdump [ -AdDefIKlLnNOpqRStuUvxX ] [ -B buffer_size ] [ -c count ]
    [ -C file_size ] [ -G rotate_seconds ] [ -F file ]
    [ -i interface ] [ -m module ] [ -M secret ]
    [ -r file ] [ -s snaplen ] [ -T type ] [ -w file ]
    [ -W filecount ]
    [ -E spi@ipaddr algo:secret,...  ]
    [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]
    [ expression ]
</code></pre><h4 id="类型关键字"><a href="#类型关键字" class="headerlink" title="类型关键字"></a>类型关键字</h4><blockquote>
<p>host(缺省类型): 指明一台主机，如：host 210.27.48.<br>net: 指明一个网络地址，如：net 202.0.0.0<br>port: 指明端口号，如：port 23</p>
</blockquote>
<h4 id="确定方向关键字"><a href="#确定方向关键字" class="headerlink" title="确定方向关键字"></a>确定方向关键字</h4><blockquote>
<p>src: src 210.27.48.2, IP包源地址是210.27.48.2<br>dst: dst net 202.0.0.0, 目标网络地址是202.0.0.0<br>dst or src(缺省值)<br>dst and src</p>
</blockquote>
<h4 id="协议的关键字：缺省值是监听所有协议的信息包"><a href="#协议的关键字：缺省值是监听所有协议的信息包" class="headerlink" title="协议的关键字：缺省值是监听所有协议的信息包"></a>协议的关键字：缺省值是监听所有协议的信息包</h4><blockquote>
<p>fddi<br>ip<br>arp<br>rarp<br>tcp<br>udp</p>
</blockquote>
<h4 id="其他关键字"><a href="#其他关键字" class="headerlink" title="其他关键字"></a>其他关键字</h4><blockquote>
<p>gateway<br>broadcast<br>less<br>greater</p>
</blockquote>
<h4 id="常用表达式：多条件时可以用括号，但是得用-转义"><a href="#常用表达式：多条件时可以用括号，但是得用-转义" class="headerlink" title="常用表达式：多条件时可以用括号，但是得用\转义"></a>常用表达式：多条件时可以用括号，但是得用\转义</h4><blockquote>
<p>非：! or “not” (去掉双引号)<br>且：&amp;&amp; or “and”<br>或：|| or “or”</p>
</blockquote>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><pre><code>-A：以ASCII编码打印每个报文（不包括链路层的头），这对分析网页来说很方便；
-a：将网络地址和广播地址转变成名字； 
-c&lt;数据包数目&gt;：在收到指定的包的数目后，tcpdump就会停止；
-C：用于判断用 -w 选项将报文写入的文件的大小是否超过这个值，如果超过了就新建文件（文件名后缀是1、2、3依次增加）；
-d：将匹配信息包的代码以人们能够理解的汇编格式给出； 
-dd：将匹配信息包的代码以c语言程序段的格式给出； 
-ddd：将匹配信息包的代码以十进制的形式给出；
-D：列出当前主机的所有网卡编号和名称，可以用于选项 -i；
-e：在输出行打印出数据链路层的头部信息； 
-f：将外部的Internet地址以数字的形式打印出来； 
-F&lt;表达文件&gt;：从指定的文件中读取表达式,忽略其它的表达式； 
-i&lt;网络界面&gt;：监听主机的该网卡上的数据流，如果没有指定，就会使用最小网卡编号的网卡（在选项-D可知道，但是不包括环路接口），linux 2.2 内核及之后的版本支持 any 网卡，用于指代任意网卡； 
-l：如果没有使用 -w 选项，就可以将报文打印到 标准输出终端（此时这是默认）； 
-n：显示ip，而不是主机名； 
-N：不列出域名； 
-O：不将数据包编码最佳化； 
-p：不让网络界面进入混杂模式； 
-q：快速输出，仅列出少数的传输协议信息； 
-r&lt;数据包文件&gt;：从指定的文件中读取包(这些包一般通过-w选项产生)； 
-s&lt;数据包大小&gt;：指定抓包显示一行的宽度，-s0表示可按包长显示完整的包，经常和-A一起用，默认截取长度为60个字节，但一般ethernet MTU都是1500字节。所以，要抓取大于60字节的包时，使用默认参数就会导致包数据丢失； 
-S：用绝对而非相对数值列出TCP关联数； 
-t：在输出的每一行不打印时间戳； 
-tt：在输出的每一行显示未经格式化的时间戳记； 
-T&lt;数据包类型&gt;：将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议）； 
-v：输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息； 
-vv：输出详细的报文信息； 
-x/-xx/-X/-XX：以十六进制显示包内容，几个选项只有细微的差别，详见man手册； 
-w&lt;数据包文件&gt;：直接将包写入文件中，并不分析和打印出来；
expression：用于筛选的逻辑表达式；
</code></pre><h3 id="命令实践"><a href="#命令实践" class="headerlink" title="命令实践"></a>命令实践</h3><ol>
<li><p>直接启动tcpdump，将抓取所有经过第一个网络接口上的数据包</p>
<pre><code>tcpdump
</code></pre><p>控制台输出：</p>
<pre><code>@dl  sudo tcpdump
[sudo] dl 的密码：
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on wlp2s0, link-type EN10MB (Ethernet), capture size 262144 bytes
23:56:46.929328 IP 192.168.1.131.50220 &gt; 192.168.1.1.domain: 47168+ A? baidu.com. (27)
23:56:46.929357 IP 192.168.1.131.50220 &gt; 192.168.1.1.domain: 10125+ AAAA? baidu.com. (27)
23:56:46.929918 IP 192.168.1.131.40552 &gt; 192.168.1.1.domain: 15187+ PTR? 1.1.168.192.in-addr.arpa. (42)
23:56:46.936167 ARP, Request who-has 192.168.1.131 tell 192.168.1.1, length 28
</code></pre></li>
<li><p>抓取所有经过 en0，目的或源地址是 10.37.63.255 的网络数据：</p>
</li>
</ol>
<pre><code class="shell">tcpdump -i en0 host 10.37.63.255
</code></pre>
<ol>
<li>抓取主机10.37.63.255和主机10.37.63.61或10.37.63.95的通信：</li>
</ol>
<pre><code class="shell?linenums">tcpdump host 10.37.63.255 and \(10.37.63.61 or 10.37.63.95 \)

taomingkais-MacBook-Pro:~ TaoBangren$ sudo tcpdump host 10.37.63.255 and \(10.37.63.61 or 10.37.63.95 \)
tcpdump: data link type PKTAP
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on pktap, link-type PKTAP (Packet Tap), capture size 262144 bytes
11:10:38.395320 IP 10.37.63.61.netbios-ns &gt; 10.37.63.255.netbios-ns: NBT UDP PACKET(137): QUERY; REQUEST; BROADCAST
11:10:39.234047 IP 10.37.63.61.netbios-ns &gt; 10.37.63.255.netbios-ns: NBT UDP PACKET(137): QUERY; REQUEST; BROADCAST
11:10:39.962286 IP 10.37.63.61.netbios-ns &gt; 10.37.63.255.netbios-ns: NBT UDP PACKET(137): QUERY; REQUEST; BROADCAST
11:10:48.422443 IP 10.37.63.61.netbios-ns &gt; 10.37.63.255.netbios-ns: NBT UDP PACKET(137): QUERY; REQUEST; BROADCAST
11:10:49.153630 IP 10.37.63.61.netbios-ns &gt; 10.37.63.255.netbios-ns: NBT UDP PACKET(137): QUERY; REQUEST; BROADCAST
11:10:49.894146 IP 10.37.63.61.netbios-ns &gt; 10.37.63.255.netbios-ns: NBT UDP PACKET(137): QUERY; REQUEST; BROADCAST
11:10:52.600297 IP 10.37.63.61.netbios-ns &gt; 10.37.63.255.netbios-ns: NBT UDP PACKET(137): QUERY; REQUEST; BROADCAST
</code></pre>
<ol>
<li><p>抓取主机10.37.63.3所有在TCP 80端口接收到的数据包：</p>
<pre><code>tcpdump -i en0 host 10.37.63.3 and dst tcp port 80
</code></pre></li>
<li><p>抓取所有经过 en0，目标 MAC 地址是 00:01:02:03:04:05 的 ICMP 数据</p>
<pre><code>tcpdump -i eth1 &#39;((icmp) and ((ether dst host 00:01:02:03:04:05)))&#39;
</code></pre></li>
<li><p>抓SYN，ACK</p>
<pre><code>tcpdump -i en0 &#39;tcp[tcpflags] &amp; tcp-syn != 0 and tcp[tcpflags] &amp; tcp-ack != 0&#39;
</code></pre></li>
<li><p>抓 SMTP 数据，抓取数据区开始为”MAIL”的包，”MAIL”的十六进制为 0x4d41494c</p>
</li>
</ol>
<pre><code class="shell">tcpdump -i en0 &#39;((port 25) and (tcp[(tcp[12]&gt;&gt;2):4] = 0x4d41494c))&#39;
</code></pre>
<ol>
<li>抓 HTTP GET 数据，”GET “的十六进制是 0x47455420<br>```<br>tcpdump -i en0 ‘tcp[(tcp[12]&gt;&gt;2):4] = 0x47455420’</li>
</ol>
<h1 id="0x4745-为”GET”前两个字母”GE”-0x4854-为”HTTP”前两个字母”HT”"><a href="#0x4745-为”GET”前两个字母”GE”-0x4854-为”HTTP”前两个字母”HT”" class="headerlink" title="0x4745 为”GET”前两个字母”GE”,0x4854 为”HTTP”前两个字母”HT”"></a>0x4745 为”GET”前两个字母”GE”,0x4854 为”HTTP”前两个字母”HT”</h1><p>tcpdump  -XvvennSs 0 -i en0 tcp[20:2]=0x4745 or tcp[20:2]=0x4854</p>
<pre><code>
9. 抓 SSH 返回，&quot;SSH-&quot;的十六进制是 0x5353482D
</code></pre><p>tcpdump -i en0 ‘tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D’</p>
<h1 id="抓老版本的-SSH-返回信息，如”SSH-1-99-”"><a href="#抓老版本的-SSH-返回信息，如”SSH-1-99-”" class="headerlink" title="抓老版本的 SSH 返回信息，如”SSH-1.99..”"></a>抓老版本的 SSH 返回信息，如”SSH-1.99..”</h1><p>tcpdump -i en0 ‘(tcp[(tcp[12]&gt;&gt;2):4] = 0x5353482D) and (tcp[((tcp[12]&gt;&gt;2)+4):2] = 0x312E)’</p>
<pre><code>10. 高级包头过滤
**如前两个的包头过滤，首先了解如何从包头过滤信息：**

    proto[x:y]          : 过滤从x字节开始的y字节数。比如ip[2:2]过滤出3、4字节（第一字节从0开始排）
    proto[x:y] &amp; z = 0  : proto[x:y]和z的与操作为0
    proto[x:y] &amp; z !=0  : proto[x:y]和z的与操作不为0
    proto[x:y] &amp; z = z  : proto[x:y]和z的与操作为z
    proto[x:y] = z      : proto[x:y]等于z

&gt;操作符 : &gt;, &lt;, &gt;=, &lt;=, =, !=

**抓取端口大于1024的TCP数据包：**
``` shell
tcpdump -i en0 &#39;tcp[0:2] &gt; 1024&#39;
</code></pre><ol>
<li>抓 DNS 请求数据</li>
</ol>
<pre><code class="shell">tcpdump -i en0 udp dst port 53
</code></pre>
<ol>
<li>其他<br>-c 参数对于运维人员来说也比较常用，因为流量比较大的服务器，靠人工 CTRL+C 还是抓的太多，于是可以用-c 参数指定抓多少个包。<pre><code class="shell">time tcpdump -nn -i en0 &#39;tcp[tcpflags] = tcp-syn&#39; -c 10000 &gt; /dev/null
</code></pre>
上面的命令计算抓 10000 个 SYN 包花费多少时间，可以判断访问量大概是多少。</li>
</ol>
<p>实时抓取端口号8000的GET包，然后写入GET.log</p>
<pre><code class="shell">tcpdump -i en0 &#39;((port 8000) and (tcp[(tcp[12]&gt;&gt;2):4]=0x47455420))&#39; -nnAl -w /tmp/GET.log
</code></pre>
<pre><code>转自：
    作者：陶邦仁
    链接：http://www.jianshu.com/p/a62ed1bb5b20
    來源：简书
</code></pre>]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell,网络,运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络常见面试题]]></title>
      <url>/2017/06/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="OSI，TCP-IP，五层协议的体系结构"><a href="#OSI，TCP-IP，五层协议的体系结构" class="headerlink" title="OSI，TCP/IP，五层协议的体系结构"></a>OSI，TCP/IP，五层协议的体系结构</h2><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><ul>
<li><strong>OSI分层（7层）：</strong>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</li>
<li><strong>TCP/IP分层（4层）：</strong>网络接口层、网际层、运输层、应用层。</li>
<li><p><strong>五层协议（5层）：</strong>物理层、数据链路层、网络层、运输层、应用层。</p>
<a id="more"></a>
<h3 id="每一层的作用"><a href="#每一层的作用" class="headerlink" title="每一层的作用"></a>每一层的作用</h3></li>
<li><p><strong>物理层：</strong>激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性。该层为上层协议提供了一个传输数据的物理媒体。</p>
</li>
<li><p><strong>数据链路层：</strong>数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。</p>
</li>
<li><p><strong>网络层：</strong>网络层负责对子网间的数据包进行路由选择。此外，网络层还可以实现拥塞控制、网际互连等功能。</p>
</li>
<li><p><strong>传输层：</strong>第一个端到端，即主机到主机的层次。传输层负责将上层数据分段并提供端到端的、可靠的或不可靠的传输。此外，传输层还要处理端到端的差错控制和流量控制问题。</p>
</li>
<li><p><strong>会话层：</strong>会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。</p>
</li>
<li><p><strong>表示层：</strong>表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。</p>
</li>
<li><p><strong>应用层：</strong>为操作系统或网络应用程序提供访问网络服务的接口。</p>
</li>
</ul>
<h3 id="每一层的协议"><a href="#每一层的协议" class="headerlink" title="每一层的协议"></a>每一层的协议</h3><ul>
<li><strong>物理层</strong>：<code>RJ45、CLOCK、IEEE802.3</code>   （中继器，集线器，网关） </li>
<li><strong>数据链路</strong>：<code>PPP、FR、HDLC、VLAN、MAC</code>  （网桥，交换机） </li>
<li><strong>网络层</strong>：<code>IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）</code></li>
<li><strong>传输层</strong>：<code>TCP、UDP、SPX</code></li>
<li><strong>会话层</strong>：<code>NFS、SQL、NETBIOS、RPC</code></li>
<li><strong>表示层</strong>：<code>JPEG、MPEG、ASII</code> </li>
<li><strong>应用层</strong>：<code>FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS</code></li>
</ul>
<h2 id="IP地址的分类"><a href="#IP地址的分类" class="headerlink" title="IP地址的分类"></a>IP地址的分类</h2><ul>
<li><strong>A类地址：</strong>以0开头，第一个字节范围：0~127.0.0.0 - 126.255.255.255）；   </li>
<li><p><strong>B类地址：</strong>以10开头，第一个字节范围：128~191（128.0.0.0 - 191.255.255.255）；</p>
</li>
<li><p><strong>C类地址：</strong>以110开头，第一个字节范围：192~223（192.0.0.0 - 223.255.255.255）；</p>
</li>
<li><p><strong>D类地址：</strong>以1110开头，第一个字节范围为224~239；</p>
</li>
<li><strong>内网地址: </strong>10.0.0.0—10.255.255.255， 172.16.0.0—172.31.255.255， 192.168.0.0—192.168.255.255。（Internet上保留地址用于内部）</li>
<li><strong><em>IP地址与子网掩码相与得到主机号</em></strong></li>
</ul>
<h2 id="ARP协议的工作原理"><a href="#ARP协议的工作原理" class="headerlink" title="ARP协议的工作原理"></a>ARP协议的工作原理</h2><p>首先，每台主机都会在自己的ARP缓冲区中建立一个 ARP列表，以表示IP地址和MAC地址的对应关系。当源主机需要将一个数据包要发送到目的主机时，会首先检查自己 ARP列表中是否存在该 IP地址对应的MAC地址，如果有，就直接将数据包发送到这个MAC地址；如果没有，就向本地网段发起一个ARP请求的广播包，查询此目的主机对应的MAC地址。此ARP请求数据包里包括源主机的IP地址、硬件地址、以及目的主机的IP地址。网络中所有的主机收到这个ARP请求后，会检查数据包中的目的IP是否和自己的IP地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的MAC地址和IP地址添加到自己的ARP列表中，如果ARP表中已经存在该IP的信息，则将其覆盖，然后给源主机发送一个 ARP响应数据包，告诉对方自己是它需要查找的MAC地址；源主机收到这个ARP响应数据包后，将得到的目的主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息开始数据的传输。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p>
<h2 id="RARP协议"><a href="#RARP协议" class="headerlink" title="RARP协议"></a>RARP协议</h2><pre><code>将局域网中某个主机的物理地址转换为IP地址，比如局域网中有一台主机只知道物理地址而不知道IP地址，那么可以通过RARP协议发出征求自身IP地址的广播请求，然后由RARP服务器负责回答。RARP协议广泛应用于无盘工作站引导时获取IP地址。

RARP允许局域网的物理机器从网管服务器ARP表或者缓存上请求其IP地址。
</code></pre><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol>
<li><p>主机发送一个本地的RARP广播，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址。</p>
</li>
<li><p>本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址。</p>
</li>
<li><p>如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用。</p>
</li>
<li><p>如果不存在，RARP服务器对此不做任何的响应。</p>
</li>
<li><p>源主机收到从RARP服务器的响应信息，就利用得到的IP地址进行通讯；如果一直没有收到RARP服务器的响应信息，表示初始化失败。</p>
</li>
</ol>
<h2 id="常见的路由选择协议，以及它们的区别"><a href="#常见的路由选择协议，以及它们的区别" class="headerlink" title="常见的路由选择协议，以及它们的区别"></a>常见的路由选择协议，以及它们的区别</h2><p>常见的路由选择协议有：RIP协议、OSPF协议。</p>
<h3 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h3><p>底层是贝尔曼福特算法，它选择路由的度量标准（metric)是跳数，最大跳数是15跳，如果大于15跳，它就会丢弃数据包。</p>
<h3 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h3><p>底层是迪杰斯特拉算法，是链路状态路由选择协议，它选择路由的度量标准是带宽，延迟。</p>
<h2 id="各种协议"><a href="#各种协议" class="headerlink" title="各种协议"></a>各种协议</h2><pre><code>  ICMP协议：
因特网控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。

  TFTP协议：
是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。

  HTTP协议：
超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。 

  DHCP协议：
动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。  

  NAT协议：
网络地址转换属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，  

  DHCP协议：
一个局域网的网络协议，使用UDP协议工作，用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。
</code></pre><h2 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h2><ul>
<li><p>UDP是面向无连接的，不可靠的数据报服务；</p>
</li>
<li><p>TCP是面向连接的，可靠的字节流服务。</p>
</li>
<li><p>TCP的可靠性如何保证？<br>TCP的可靠性是通过顺序编号和确认（ACK）来实现的。</p>
</li>
</ul>
<h2 id="TCP三次握手和四次挥手的全过程"><a href="#TCP三次握手和四次挥手的全过程" class="headerlink" title="TCP三次握手和四次挥手的全过程"></a>TCP三次握手和四次挥手的全过程</h2><p><img src="http://p.dearamaze.com/17-6-11/36414953.jpg" alt=""><br><img src="http://function.dearamaze.com//17-6-11/52895012.jpg" alt=""></p>
<h2 id="在浏览器中输入www-baidu-com后执行的全部过程"><a href="#在浏览器中输入www-baidu-com后执行的全部过程" class="headerlink" title="在浏览器中输入www.baidu.com后执行的全部过程"></a>在浏览器中输入www.baidu.com后执行的全部过程</h2><p>现在假设如果我们在客户端（客户端）浏览器中输入 <a href="http://www.baidu.com" target="_blank" rel="external">http://www.baidu.com</a> ,而 baidu.com 为要访问的服务器（服务器），下面详细分析客户端为了访问服务器而执行的一系列关于协议的操作：</p>
<p>  1、客户端浏览器通过DNS解析到www.baidu.com的IP地址220.181.27.48，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个HTTP会话到220.161.27.48，然后通过TCP进行封装数据包，输入到网络层。</p>
<p>  2、在客户端的传输层，把HTTP会话请求分成报文段，添加源和目的端口，如服务器使用80端口监听客户端的请求，客户端由系统随机选择一个端口如5000，与服务器进行交换，服务器把相应的请求返回给客户端的5000端口。然后使用IP层的IP地址查找目的端。</p>
<p>  3、客户端的网络层不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。</p>
<p>  4、客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定IP地址的MAC地址，然后发送ARP请求查找目的地址，如果得到回应后就可以使用ARP的请求应答交换的IP数据包现在就可以传输了，然后发送IP数据包到达服务器的地址。</p>
<h2 id="HTTP协议包括哪些请求？"><a href="#HTTP协议包括哪些请求？" class="headerlink" title="HTTP协议包括哪些请求？"></a>HTTP协议包括哪些请求？</h2><p>GET：请求读取由URL所标志的信息。</p>
<p>POST：给服务器添加信息（如注释）。</p>
<p>PUT：在给定的URL下存储一个文档。</p>
<p>DELETE：删除给定的URL所标志的资源。</p>
<h2 id="HTTP中，POST与GET的区别"><a href="#HTTP中，POST与GET的区别" class="headerlink" title="HTTP中，POST与GET的区别"></a>HTTP中，POST与GET的区别</h2><p>(1)Get是从服务器上获取数据，Post是向服务器传送数据。</p>
<p>(2)Get是把参数数据队列加到提交表单的Action属性所指向的URL中，值和表单内各个字段一一对应，在URL中可以看到。</p>
<p>(3)Get传送的数据量小，不能大于2KB；post传送的数据量较大，一般被默认为不受限制。</p>
<p>(4)根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p>
<p>I.所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p>
<p>II.幂等的意味着对同一URL的多个请求应该返回同样的结果。</p>
<h2 id="TCP对应的协议和UDP对应的协议"><a href="#TCP对应的协议和UDP对应的协议" class="headerlink" title="TCP对应的协议和UDP对应的协议"></a>TCP对应的协议和UDP对应的协议</h2><h3 id="TCP对应的协议："><a href="#TCP对应的协议：" class="headerlink" title="TCP对应的协议："></a>TCP对应的协议：</h3><p>（1） FTP：定义了文件传输协议，使用21端口。常说某某计算机开了FTP服务便是启动了文件传输服务。下载文件，上传主页，都要用到FTP服务。</p>
<p>（2） Telnet：它是一种用于远程登陆的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口可以提供一种基于DOS模式下的通信服务。如以前的BBS是-纯字符界面的，支持BBS的服务器将23端口打开，对外提供服务。</p>
<p>（3） SMTP：定义了简单邮件传送协议，现在很多邮件服务器都用的是这个协议，用于发送邮件。如常见的免费邮件服务中用的就是这个邮件服务端口，所以在电子邮件设置-中常看到有这么SMTP端口设置这个栏，服务器开放的是25号端口。</p>
<p>（4） POP3：它是和SMTP对应，POP3用于接收邮件。通常情况下，POP3协议所用的是110端口。也是说，只要你有相应的使用POP3协议的程序（例如Fo-xmail或Outlook），就可以不以Web方式登陆进邮箱界面，直接用邮件程序就可以收到邮件（如是163邮箱就没有必要先进入网易网站，再进入自己的邮-箱来收信）。</p>
<p>（5）HTTP协议：是从Web服务器传输超文本到本地浏览器的传送协议。</p>
<h3 id="UDP对应的协议："><a href="#UDP对应的协议：" class="headerlink" title="UDP对应的协议："></a>UDP对应的协议：</h3><p>（1） DNS：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。</p>
<p>（2） SNMP：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</p>
<p>（3） TFTP(Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口69上使用UDP服务。</p>
<h2 id="NAT协议、DHCP协议、DNS协议的作用"><a href="#NAT协议、DHCP协议、DNS协议的作用" class="headerlink" title="NAT协议、DHCP协议、DNS协议的作用"></a>NAT协议、DHCP协议、DNS协议的作用</h2><p>NAT协议：网络地址转换(NAT,Network AddressTranslation)属接入广域网(WAN)技术，</p>
<p>是一种将私有（保留）地址转化为合法IP地址的转换技术，它被广泛应用于各种类型Internet接入方式和各种类型的网络中。原因很简单，NAT不仅完美地解决了lP地址不足的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p>
<p>DHCP协议：动态主机设置协议（Dynamic Host ConfigurationProtocol, DHCP）</p>
<p>是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p>
<p>DNS协议：DNS 是域名系统 (Domain Name System) 的缩写，是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</p>
<h2 id="了解交换机、路由器、网关的概念，并知道各自的用途"><a href="#了解交换机、路由器、网关的概念，并知道各自的用途" class="headerlink" title="了解交换机、路由器、网关的概念，并知道各自的用途"></a>了解交换机、路由器、网关的概念，并知道各自的用途</h2><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><pre><code>在计算机网络系统中，交换机是针对共享工作模式的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背
部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的MAC（网卡的硬件地址）的NIC（网卡）挂接在哪个端口上，通过内部
交换矩阵迅速将数据包传送到目的端口。目的MAC若不存在，交换机才广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表
中。  

交换机工作于OSI参考模型的第二层，即数据链路层。交换机内部的CPU会在每个端口成功连接时，通过ARP协议学习它的MAC地址，保存成一张
ARP表。在今后的通讯中，发往该MAC地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不
能划分网络层广播，即广播域。  
 交换机被广泛应用于二层网络交换，俗称“二层交换机”。  

交换机的种类有：二层交换机、三层交换机、四层交换机、七层交换机分别工作在OSI七层模型中的第二层、第三层、第四层盒第七层，并因此而得名。  
</code></pre><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><pre><code>路由器（Router）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过
的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转
送。路由工作在OSI模型的第三层——即网络层，例如网际协议。  


路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。 路由器与交换器的差别，路由器是属于OSI第三层的产品，交换器是OSI第二层的产品(这里特指二层交换机)。  
</code></pre><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><pre><code>网关（Gateway），网关顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关TCP/IP
的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的IP），经常在家
庭中或者小型企业网络中使用，用于连接局域网和Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。  

在传统TCP/IP术语中，网络设备只分成两种，一种为网关（gateway），另一种为主机（host）。网关能在网络间转递数据包，但主机不能
转送数据包。在主机（又称终端系统，end system）中，数据包需经过TCP/IP四层协议处理，但是在网关（又称中介系
统，intermediate system）只需要到达网际层（Internet layer），决定路径之后就可以转送。在当时，网关
（gateway）与路由器（router）还没有区别。  

在现代网络术语中，网关（gateway）与路由器（router）的定义不同。网关（gateway）能在不同协议间移动数据，而路由器（router）是在不同网络间移动数据，相当于传统所说的IP网关（IP gateway）。  


网关是连接两个网络的设备，对于语音网关来说，他可以连接PSTN网络和以太网，这就相当于VOIP，把不同电话中的模拟信号通过网关而转换成数字信号，而且加入协议再去传输。在到了接收端的时候再通过网关还原成模拟的电话信号，最后才能在电话机上听到。  

对于以太网中的网关只能转发三层以上数据包，这一点和路由是一样的。而不同的是网关中并没有路由表，他只能按照预先设定的不同网段来进行转发。网关最重要的一点就是端口映射，子网内用户在外网看来只是外网的IP地址对应着不同的端口，这样看来就会保护子网内的用户。
</code></pre><h2 id="TCP的流量控制和拥塞控制"><a href="#TCP的流量控制和拥塞控制" class="headerlink" title="TCP的流量控制和拥塞控制"></a>TCP的流量控制和拥塞控制</h2><p>见<a href="http://blog.sina.com.cn/s/blog_6988593e01015wu0.html" target="_blank" rel="external">链接</a></p>
]]></content>
      
        <categories>
            
            <category> 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vsftpd配置文件]]></title>
      <url>/2017/06/09/vsftpd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>vsftpd配置文件</p>
<a id="more"></a>
<pre><code class="conf">#禁用匿名用户登陆
anonymous_enable=NO

#允许本地用户登陆
local_enable=YES

#允许本地用户写入
write_enable=YES

#注意：这个地方如果不配置，就会出现只有root用户可以登陆，普通用户不可以
check_shell=NO

#掩码，决定了上传上来的文件的权限。设置为000使之有最大权限
local_umask=000

#允许记录日志
xferlog_enable=YES

#允许数据流从20端口传输
connect_from_port_20=YES

#日志路径
xferlog_file=/var/log/vsftpd.log

#ftp欢迎语，可以随便设置
ftpd_banner=hi,guys!

#注意：这个选项可以保证用户锁定在指定的家目录里，防止系统文件被修改。
chroot_local_user=YES

#注意：这个不配置有可能出现只能下载不能上传
allow_writeable_chroot=YES

#配置了可以以stand alone模式运行
listen=YES

#注意：该选项不配置可能导致莫名其妙的530问题
seccomp_sandbox=NO

#说明我们要指定一个userlist，里边放的是允许ftp登陆的本地用户。如果设置为YES，则文件里设置的是不允许登陆的本地用户
userlist_deny=NO
userlist_enable=YES

#记录允许本地登陆用户名的文件
userlist_file=/etc/vsftpd/allowed_users
</code></pre>
]]></content>
      
        <categories>
            
            <category> 配置文件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ftp </tag>
            
            <tag> 配置文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell知识遗漏2]]></title>
      <url>/2017/06/09/shell%E7%9F%A5%E8%AF%86%E9%81%97%E6%BC%8F2/</url>
      <content type="html"><![CDATA[<h2 id="比较与测试"><a href="#比较与测试" class="headerlink" title="比较与测试"></a>比较与测试</h2><ol>
<li>if条件</li>
<li>else if 和 else</li>
</ol>
<a id="more"></a>
<pre><code class="shell">#!/bin/bash
read i
if [ $i -gt 10 ];then
    echo &quot;i&gt;=10&quot;
elif [ $i -le 10 ]&amp;&amp;[ $i -gt 0 ];then
    echo &quot;0&lt;i&lt;=10&quot;
else
    echo &quot;i&lt;=0&quot;
fi
</code></pre>
<p>3.小技巧</p>
<blockquote>
<p>if 和 else 语句可以进行嵌套。 if 的条件判断部分可能会变得很长,<br>但可以用逻辑运算符将它变得简洁一些:</p>
</blockquote>
<pre><code>[ condition ] &amp;&amp; action; # 如果 condition 为真,则执行 action ;
[ condition ] || action; # 如果 condition 为假,则执行 action 。

&amp;&amp; 是逻辑与运算符, || 是逻辑或运算符。编写Bash脚本时,这是一
个很有用的技巧。现在来了解一下条件和比较操作。
</code></pre><p>4.比较运算符</p>
<p>算数运算符:</p>
<pre><code>-gt :大于。
-lt :小于。
-ge :大于或等于。
-le :小于或等于。
</code></pre><p>文件系统相关测试:</p>
<pre><code class="shell">我们可以使用不同的条件标志测试不同的文件系统相关的属性。
[ -f $file_var ] :如果给定的变量包含正常的文件路径或文件名,则返回真。(判断给定的文件,是否存在!只能判断文件!)
[ -x $var ] :如果给定的变量包含的文件可执行,则返回真。
[ -d $var ] :如果给定的变量包含的是目录,则返回真。
[ -e $var ] :如果给定的变量包含的文件(文件文件夹都可以)存在,则返回真。
[ -c $var ] :如果给定的变量包含的是一个字符设备文件的路径,则返回真。
[ -b $var ] :如果给定的变量包含的是一个块设备文件的路径,则返回真。
[ -w $var ] :如果给定的变量包含的文件可写,则返回真。
[ -r $var ] :如果给定的变量包含的文件可读,则返回真。
[ -L $var ] :如果给定的变量包含的是一个符号链接,则返回真。
使用方法如下:
fpath=&quot;/etc/passwd&quot;
if [ -e $fpath ]; then
    echo File exists;
else
    echo Does not exist;
fi
</code></pre>
<p>字符串比较:</p>
<pre><code>使用字符串比较时,最好用双中括号,因为有时候采用单个中括号会产生错误,所以最
好避开它们。
可以用下面的方法检查两个字符串,看看它们是否相同。
[[ $str1 = $str2 ]] :当 str1 等于 str2 时,返回真。也就是说, str1 和 str2 包含的文本是一模一样的。
[[ $str1 == $str2 ]] :这是检查字符串是否相等的另一种写法。
也可以检查两个字符串是否不同。

[[ $str1 != $str2 ]] :如果 str1 和 str2 不相同,则返回真。
我们还可以检查字符串的字母序情况,具体如下所示。
[[ $str1 &gt; $str2 ]] :如果 str1 的字母序比 str2 大,则返回真。
[[ $str1 &lt; $str2 ]] :如果 str1 的字母序比 str2 小,则返回真。
[[ -z $str1 ]] :如果 str1 包含的是空字符串,则返回真。
[[ -n $str1 ]] :如果 str1 包含的是非空字符串,则返回真。

注意在 = 前后各有一个空格。如果忘记加空格,那就不是比较关系了,而变成了赋值语句。
</code></pre><p>多条件组合</p>
<pre><code>使用逻辑运算符 &amp;&amp; 和 || 能够很容易地将多个条件组合起来:
if [[ -n $str1 ]] &amp;&amp; [[ -z $str2 ]] ;
then
    commands;
fi
例如:
str1=&quot;Not empty &quot;
str2=&quot;&quot;
if [[ -n $str1 ]] &amp;&amp; [[ -z $str2 ]];
then
    echo str1 is nonempty and str2 is empty string.
fi

输出如下:
str1 is nonempty and str2 is empty string.
</code></pre><p>test命令</p>
<pre><code class="SHELL">test 命令可以用来执行条件检测。用 test 可以避免使用过多的括号。之前讲过的 [] 中的测试条件同样可以用于 test 命令。
例如:
if  [ $var -eq 0 ]; then echo &quot;True&quot;; fi
也可以写成:
if  test $var -eq 0 ; then echo &quot;True&quot;; fi
</code></pre>
<h2 id="录制并回放终端回话"><a href="#录制并回放终端回话" class="headerlink" title="录制并回放终端回话"></a>录制并回放终端回话</h2><p>暂且跳过,用的不多</p>
<p>## </p>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[py自动化运维第一章]]></title>
      <url>/2017/06/07/py%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      <content type="html"><![CDATA[<h1 id="第一章-系统基础信息模块详解"><a href="#第一章-系统基础信息模块详解" class="headerlink" title="第一章 系统基础信息模块详解"></a>第一章 系统基础信息模块详解</h1><h2 id="系统性能信息模块psutil"><a href="#系统性能信息模块psutil" class="headerlink" title="系统性能信息模块psutil"></a>系统性能信息模块<code>psutil</code></h2><p>实例：<a href="https://github.com/giampaolo/psutil" target="_blank" rel="external">https://github.com/giampaolo/psutil</a></p>
<p>文档：<a href="https://pythonhosted.org/psutil/#recipes/" target="_blank" rel="external">https://pythonhosted.org/psutil/#recipes/</a></p>
<a id="more"></a>
<h3 id="shell中常用监控命令"><a href="#shell中常用监控命令" class="headerlink" title="shell中常用监控命令"></a>shell中常用监控命令</h3><p>ps:<br>top:<br>lsof:<br>netstat:<br>ifconfig:<br>who:<br>df:<br>kill:<br>free:<br>nice:<br>ionice:<br>iostat:<br>iotop:<br>uptime:<br>pidof:<br>tty:<br>taskset:<br>pmap:</p>
<!--more-->
<h3 id="获取系统性能信息"><a href="#获取系统性能信息" class="headerlink" title="获取系统性能信息"></a>获取系统性能信息</h3><ol>
<li>CPU信息<br>```python <blockquote>
<blockquote>
<blockquote>
<p>import psutil<br>psutil.cpu_times()<br>scputimes(user=3961.46, nice=169.729, system=2150.659, idle=16900.540, iowait=629.59, irq=0.0, softirq=19.42, steal=0.0, guest=0, nice=0.0)</p>
<p>for x in range(3):<br>…     psutil.cpu_percent(interval=1)<br>…<br>4.0<br>5.9<br>3.8</p>
<p>for x in range(3):<br>…     psutil.cpu_percent(interval=1, percpu=True)<br>…<br>[4.0, 6.9, 3.7, 9.2]<br>[7.0, 8.5, 2.4, 2.1]<br>[1.2, 9.0, 9.9, 7.2]</p>
<p>for x in range(3):<br>…     psutil.cpu_times_percent(interval=1, percpu=False)<br>…<br>scputimes(user=1.5, nice=0.0, system=0.5, idle=96.5, iowait=1.5, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)<br>scputimes(user=1.0, nice=0.0, system=0.0, idle=99.0, iowait=0.0, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)<br>scputimes(user=2.0, nice=0.0, system=0.0, idle=98.0, iowait=0.0, irq=0.0, softirq=0.0, steal=0.0, guest=0.0, guest_nice=0.0)</p>
<p>psutil.cpu_count()<br>4<br>psutil.cpu_count(logical=False)<br>2</p>
<p>psutil.cpu_stats()<br>scpustats(ctx_switches=20455687, interrupts=6598984, soft_interrupts=2134212, syscalls=0)</p>
<p>psutil.cpu_freq()<br>scpufreq(current=931.42925, min=800.0, max=3500.0)</p>
</blockquote>
</blockquote>
</blockquote>
</li>
</ol>
<pre><code>tip:

    irq:硬件中断
    softirq：软件中断
2. 内存信息
```python
&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.virtual_memory() #内存完整信息
svmem(total=10367352832, available=6472179712, percent=37.6, used=8186245120, free=2181107712, active=4748992512, inactive=2758115328, buffers=790724608, cached=3500347392, shared=787554304)
&gt;&gt;&gt; psutil.swap_memory() #获取交换分区信息
sswap(total=2097147904, used=296128512, free=1801019392, percent=14.1, sin=304193536, sout=677842944)
&gt;&gt;&gt;
</code></pre><p>tip:</p>
<pre><code>total:内存总数
used：已经使用的内存数
free：空闲内存数
buffers：缓冲使用数
cache：缓冲使用数
swap：交换分区使用数
</code></pre><p><a href="http://www.cnblogs.com/chenpingzhao/p/5161844.html" target="_blank" rel="external">free命令中cached和buffers的区别</a></p>
<ol>
<li><p>磁盘信息</p>
<pre><code class="python">&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.disk_partitions()
[sdiskpart(device=&#39;/dev/sda1&#39;, mountpoint=&#39;/&#39;, fstype=&#39;ext4&#39;, opts=&#39;rw,nosuid&#39;),
sdiskpart(device=&#39;/dev/sda2&#39;, mountpoint=&#39;/home&#39;, fstype=&#39;ext, opts=&#39;rw&#39;)]
&gt;&gt;&gt;
&gt;&gt;&gt; psutil.disk_usage(&#39;/&#39;)
sdiskusage(total=21378641920, used=4809781248, free=15482871808, percent=22.5)
&gt;&gt;&gt;
&gt;&gt;&gt; psutil.disk_io_counters(perdisk=False)
sdiskio(read_count=719566, write_count=1082197, read_bytes=18626220032, write_bytes=24081764352, read_time=5023392, write_time=63199568, read_merged_count=619166, write_merged_count=812396, busy_time=4523412)
&gt;&gt;&gt;
</code></pre>
</li>
<li><p>网络信息</p>
<pre><code class="python">&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.net_io_counters(pernic=True)
{&#39;eth0&#39;: netio(bytes_sent=485291293, bytes_recv=6004858642, packets_sent=3251564, packets_recv=4787798, errin=0, errout=0, dropin=0, dropout=0),
&#39;lo&#39;: netio(bytes_sent=2838627, bytes_recv=2838627, packets_sent=30567, packets_recv=30567, errin=0, errout=0, dropin=0, dropout=0)}
&gt;&gt;&gt;
&gt;&gt;&gt; psutil.net_connections()
[pconn(fd=115, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=(&#39;10.0.0.1&#39;, 48776), raddr=(&#39;93.186.135.91&#39;, 80), status=&#39;ESTABLISHED&#39;, pid=1254),
pconn(fd=117, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=(&#39;10.0.0.1&#39;, 43761), raddr=(&#39;72.14.234.100&#39;, 80), status=&#39;CLOSING&#39;, pid=2987),
pconn(fd=-1, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=(&#39;10.0.0.1&#39;, 60759), raddr=(&#39;72.14.234.104&#39;, 80), status=&#39;ESTABLISHED&#39;, pid=None),
pconn(fd=-1, family=&lt;AddressFamily.AF_INET: 2&gt;, type=&lt;SocketType.SOCK_STREAM: 1&gt;, laddr=(&#39;10.0.0.1&#39;, 51314), raddr=(&#39;72.14.234.83&#39;, 443), status=&#39;SYN_SENT&#39;, pid=None)
...]
&gt;&gt;&gt;
&gt;&gt;&gt; psutil.net_if_addrs()
{&#39;lo&#39;: [snic(family=&lt;AddressFamily.AF_INET: 2&gt;, address=&#39;127.0.0.1&#39;, netmask=&#39;255.0.0.0&#39;, broadcast=&#39;127.0.0.1&#39;, ptp=None),
     snic(family=&lt;AddressFamily.AF_INET6: 10&gt;, address=&#39;::1&#39;, netmask=&#39;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&#39;, broadcast=None, ptp=None),
     snic(family=&lt;AddressFamily.AF_LINK: 17&gt;, address=&#39;00:00:00:00:00:00&#39;, netmask=None, broadcast=&#39;00:00:00:00:00:00&#39;, ptp=None)],
&#39;wlan0&#39;: [snic(family=&lt;AddressFamily.AF_INET: 2&gt;, address=&#39;192.168.1.3&#39;, netmask=&#39;255.255.255.0&#39;, broadcast=&#39;192.168.1.255&#39;, ptp=None),
        snic(family=&lt;AddressFamily.AF_INET6: 10&gt;, address=&#39;fe80::c685:8ff:fe45:641%wlan0&#39;, netmask=&#39;ffff:ffff:ffff:ffff::&#39;, broadcast=None, ptp=None),
        snic(family=&lt;AddressFamily.AF_LINK: 17&gt;, address=&#39;c4:85:08:45:06:41&#39;, netmask=None, broadcast=&#39;ff:ff:ff:ff:ff:ff&#39;, ptp=None)]}
&gt;&gt;&gt;
&gt;&gt;&gt; psutil.net_if_stats()
{&#39;eth0&#39;: snicstats(isup=True, duplex=&lt;NicDuplex.NIC_DUPLEX_FULL: 2&gt;, speed=100, mtu=1500),
&#39;lo&#39;: snicstats(isup=True, duplex=&lt;NicDuplex.NIC_DUPLEX_UNKNOWN: 0&gt;, speed=0, mtu=65536)}
&gt;&gt;&gt;
</code></pre>
</li>
<li>其他系统信息<pre><code class="python">&gt;&gt;&gt; import psutil
&gt;&gt;&gt; psutil.users()
[suser(name=&#39;giampaolo&#39;, terminal=&#39;pts/2&#39;, host=&#39;localhost&#39;, started=1340737536.0, pid=1352),
suser(name=&#39;giampaolo&#39;, terminal=&#39;pts/3&#39;, host=&#39;localhost&#39;, started=1340737792.0, pid=1788)]
&gt;&gt;&gt;
&gt;&gt;&gt; psutil.boot_time()
1365519115.0
&gt;&gt;&gt;
</code></pre>
</li>
</ol>
<h3 id="系统进程管理方法"><a href="#系统进程管理方法" class="headerlink" title="系统进程管理方法"></a>系统进程管理方法</h3><ol>
<li><p>进程信息<br>插入一条关于进程控制信号捕获的博客，常考笔试题（sigkill和sigstop不可被捕捉，sigint可以被捕捉）：<a href="http://blog.csdn.net/madpointer/article/details/13091705" target="_blank" rel="external">http://blog.csdn.net/madpointer/article/details/13091705</a></p>
</li>
<li><p>popen类的使用</p>
</li>
</ol>
<pre><code class="python">&gt;&gt;&gt; import psutil
&gt;&gt;&gt; from subprocess import PIPE
&gt;&gt;&gt; p = psutil.Popen([&quot;/usr/bin/python&quot;, &quot;-c&quot;, &quot;print(&#39;hello&#39;)&quot;], stdout=PIPE)
&gt;&gt;&gt; p.name()
&#39;python&#39;
&gt;&gt;&gt; p.username()
&#39;giampaolo&#39;
&gt;&gt;&gt; p.communicate()
(&#39;hello\n&#39;, None)
&gt;&gt;&gt; p.wait(timeout=2)
0
&gt;&gt;&gt;
</code></pre>
<h2 id="实用的IP地址处理模块IPy"><a href="#实用的IP地址处理模块IPy" class="headerlink" title="实用的IP地址处理模块IPy"></a>实用的IP地址处理模块<code>IPy</code></h2><pre><code class="python">#!/usr/bin/env python

from IPy import IP

ip_s = raw_input(&#39;Please input an IP or net-range: &#39;)
ips = IP(ip_s)


if len(ips) &gt; 1:
    print(&#39;net: %s&#39; % ips.net()) #输出网络地址
    print(&#39;netmask: %s&#39; % ips.netmask()) #输出网络掩码地址
    print(&#39;broadcast: %s&#39; % ips.broadcast())  #输出广播地址
    print(&#39;reverse address: %s&#39; % ips.reverseNames()[0])  #输出地址反向解析
    print(&#39;subnet: %s&#39; % len(ips)) #输出网络子网数
else:
    print(&#39;reverse address: %s&#39; % ips.reverseNames()[0])

print(&#39;hexadecimal: %s&#39; % ips.strHex()) #十六进制地址
print(&#39;binary ip: %s&#39; % ips.strBin()) #二进制地址
print(&#39;iptype: %s&#39; % ips.iptype()) #地址类型
</code></pre>
<h2 id="DNS处理模块dnspython"><a href="#DNS处理模块dnspython" class="headerlink" title="DNS处理模块dnspython"></a>DNS处理模块<code>dnspython</code></h2><p>插播新知识：<a href="http://roclinux.cn/?p=2449" target="_blank" rel="external">dig命令</a></p>
<h3 id="模块域名解析方法详解"><a href="#模块域名解析方法详解" class="headerlink" title="模块域名解析方法详解"></a>模块域名解析方法详解</h3><h4 id="常见的DNS解析类型"><a href="#常见的DNS解析类型" class="headerlink" title="常见的DNS解析类型"></a>常见的DNS解析类型</h4><p>A记录： 将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录</p>
<p>CNAME记录： 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。这个域名一般是主机服务商提供的一个域名</p>
<p>MX记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录</p>
<p>NS记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录</p>
<p>TXT记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录</p>
<p>AAAA记录： 将主机名（或域名）指向一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1），需要添加AAAA记录</p>
<p>SRV记录： 添加服务记录服务器服务记录时会添加此项，SRV记录了哪台计算机提供了哪个服务。格式为：服务的名字.协议的类型（例如：_example-server._tcp）。</p>
<p>SOA记录： SOA叫做起始授权机构记录，NS用于标识多台域名解析服务器，SOA记录用于在众多NS记录中那一台是主服务器</p>
<p>PTR记录： PTR记录是A记录的逆向记录，又称做IP反查记录或指针记录，负责将IP反向解析为域名</p>
<p>显性URL转发记录： 将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址。例如：将www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址为：www.itbilu.com。</p>
<p>隐性UR转发记录L： 将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址，隐性转发会隐藏真实的目标地址。例如：将www.liuht.cn显性转发到www.itbilu.com后，访问www.liuht.cn时，地址栏显示的地址仍然是：www.liuht.cn。</p>
<ol>
<li>DNS解析中一些问题</li>
</ol>
<p>2.1 A记录与CNAME记录</p>
<p>A记录是把一个域名解析到一个IP地址，而CNAME记录是把域名解析到另外一个域名，而这个域名最终会指向一个A记录，在功能实现在上A记录与CNAME记录没有区别。</p>
<p>CNAME记录在做IP地址变更时要比A记录方便。CNAME记录允许将多个名字映射到同一台计算机，当有多个域名需要指向同一服务器IP，此时可以将一个域名做A记录指向服务器IP，然后将其他的域名做别名(即：CNAME)到A记录的域名上。当服务器IP地址变更时，只需要更改A记录的那个域名到新IP上，其它做别名的域名会自动更改到新的IP地址上，而不必对每个域名做更改。</p>
<p>2.2 A记录与AAAA记录</p>
<p>二者都是指向一个IP地址，但对应的IP版本不同。A记录指向IPv4地址，AAAA记录指向IPv6地址。AAAA记录是A记录的升级版本。</p>
<p>2.3 IPv4与IPv6</p>
<p>IPv4，是互联网协议（Internet Protocol，IP）的第四版，也是第一个被广泛使用的版本，是构成现今互联网技术的基础协议。IPv4 的下一个版本就是IPv6，在将来将取代目前被广泛使用的IPv4。</p>
<p>IPv4中规定IP地址长度为32位（按TCP/IP参考模型划分) ，即有2^32-1个地址。IPv6的提出最早是为了解决，随着互联网的迅速发展IPv4地址空间将被耗尽的问题。为了扩大地址空间，IPv6将IP地址的长度由32位增加到了128位。在IPv6的设计过程中除了一劳永逸地解决了地址短缺问题以外，还解决了IPv4中的其它问题，如：端到端IP连接、服务质量（QoS）、安全性、多播、移动性、即插即用等。</p>
<p>2.4 TTL值</p>
<p>TTL－生存时间（Time To Live），表示解析记录在DNS服务器中的缓存时间，TTL的时间长度单位是秒，一般为3600秒。比如：在访问www.itbilu.com时，如果在DNS服务器的缓存中没有该记录，就会向某个NS服务器发出请求，获得该记录后，该记录会在DNS服务器上保存TTL的时间长度，在TTL有效期内访问www.itbilu.com，DNS服务器会直接缓存中返回刚才的记录。</p>
<h3 id="DNS轮询（不完善）"><a href="#DNS轮询（不完善）" class="headerlink" title="DNS轮询（不完善）"></a>DNS轮询（不完善）</h3><pre><code class="python">#!/usr/bin/python
#coding:utf-8

import dns.resolver
import os
import httplib

iplist=[]    #定义域名IP列表变量
appdomain=&quot;fdl66.github.io&quot;    #定义业务域名

def get_iplist(domain=&quot;&quot;):    #域名解析函数，解析成功IP将追加到iplist
    try:
        cname = dns.resolver.query(domain, &#39;CNAME&#39;)
        domains = []
        for i in cname.response.answer:
            for j in i.items:
                print j.to_text()+&quot;debug&quot;
                domains.append(j)
        for dom in domains:
            A=dns.resolver.query(str(dom),&#39;A&#39;)  # 解析A记录类型
            for i in A.response.answer:
                for j in i.items:
                    print j.address+&quot;debug&quot;
                    iplist.append(j.address)  # 追加到iplist
    except Exception,e:
        print &quot;dns resolver error:&quot;+str(e)
        return
    return True

def checkip(ip):
    checkurl=ip+&quot;:80&quot;
    getcontent=&quot;&quot;
    httplib.socket.setdefaulttimeout(5)    #定义http连接超时时间(5秒)
    conn=httplib.HTTPConnection(checkurl)    #创建http连接对象

    try:
        conn.request(&quot;GET&quot;, &quot;/&quot;,headers = {&quot;Host&quot;: appdomain})  #发起URL请求，添加host主机头
        r=conn.getresponse()
        getcontent =r.read(15)   #获取URL页面前15个字符，以便做可用性校验
    finally:
        print getcontent+&quot;debug&quot;
        if getcontent==&quot;&lt;!doctype html&gt;&quot;:  #监控URL页的内容一般是事先定义好，比如“HTTP200”等
            print ip+&quot; [OK]&quot;
        else:
            print ip+&quot; [Error]&quot;    #此处可放告警程序，可以是邮件、短信通知

if __name__==&quot;__main__&quot;:
    if get_iplist(appdomain) and len(iplist)&gt;0:    #条件：域名解析正确且至少要返回一个IP
        for ip in iplist:
            checkip(ip)
    else:
        print &quot;dns resolver error.&quot;
</code></pre>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> 运维 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[逻辑块与物理块的对应关系]]></title>
      <url>/2017/06/07/%E9%80%BB%E8%BE%91%E5%9D%97%E4%B8%8E%E7%89%A9%E7%90%86%E5%9D%97%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h2 id="物理块的大小设定"><a href="#物理块的大小设定" class="headerlink" title="物理块的大小设定"></a>物理块的大小设定</h2><p>我们把Ext2、Minix、Ext等实际可使用的文件系统称为具体文件系统。具体文件系统管理的是一个逻辑空间，这个逻辑空间就象一个大的数组，数组的每个元素就是文件系统操作的基本单位——逻辑块，逻辑块是从0开始编号的，而且，逻辑块是连续的。与逻辑块相对的是物理块，物理块是数据在磁盘上的存取单位，也就是每进行一次I/O操作，最小传输的数据大小。我们知道数据是存储在磁盘的扇区中的，那么扇区是不是物理块呢？或者物理块是多大呢？这涉及到文件系统效率的问题。</p>
<a id="more"></a>
<p>如果物理块定的比较大，比如一个柱面大小，这时，即使是1个字节的文件都要占用整个一个柱面，假设Linux环境下文件的平均大小为1K，那么分配32K的柱面将浪费97%的磁盘空间，也就是说，大的存取单位将带来严重的磁盘空间浪费。另一方面，如果物理块过小，则意味着对一个文件的操作将进行更多次的寻道延迟和旋转延迟，因而读取由小的物理块组成的文件将非常缓慢！可见，时间效率和空间效率在本质上是相互冲突的。</p>
<p>因此，最优的方法是计算出Linux环境下文件的平均大小，然后将物理块大小定为最接近扇区的整数倍大小。在Ext2中，物理块的大小是可变化的，这取决于你在创建文件系统时的选择，之所以不限制大小，也正体现了Ext2的灵活性和可扩充性，一是因为要适应近年来文件的平均长度缓慢增长的趋势，二是为了适应不同的需要。比如，如果一个文件系统主要用于BBS服务，考虑到BBS上的文章通常很短小，所以，物理块选的小一点是恰当的。通常，Ext2的物理块占一个或几个连续的扇区，显然，物理块的数目是由磁盘容量等硬件因素决定的。逻辑块与物理块的关系类似于虚拟内存中的页与物理内存中的页面的关系。</p>
<h2 id="逻辑块与物理块之间的关系"><a href="#逻辑块与物理块之间的关系" class="headerlink" title="逻辑块与物理块之间的关系"></a>逻辑块与物理块之间的关系</h2><p>具体文件系统所操作的基本单位是逻辑块，只在需要进行I/O操作时才进行逻辑块到物理块的映射，这显然避免了大量的I/O操作，因而文件系统能够变得高效。逻辑块作为一个抽象的概念，它必然要映射到具体的物理块上去，因此，逻辑块的大小必须是物理块大小的整数倍，一般说来，两者是一样大的。</p>
<p>通常，一个文件占用的多个物理块在磁盘上是不连续存储的，因为如果连续存储，则经过频繁的删除、建立、移动文件等操作，最后磁盘上将形成大量的空洞，很快磁盘上将无空间可供使用。因此，必须提供一种方法将一个文件占用的多个逻辑块映射到对应的非连续存储的物理块上去，Ext2等类文件系统是用索引节点解决这个问题的，具体实现方法后面再予以介绍。</p>
<p>为了更好的说明逻辑块和物理块的关系，我们来看一个例子。</p>
<p>假设用户要对一个已有文件进行写操作，用户进程必须先打开这个文件，file结构记录了该文件的当前位置。然后用户把一个指向用户内存区的指针和请求写的字节数传送给系统，请求写操作，这时系统要进行两次映射。</p>
<p>（1）一组字节到逻辑块的映射。</p>
<p>这个映射过程就是找到起始字节到结束字节所占用的所有逻辑块号。这是因为在逻辑空间，文件传输的基本单位是逻辑块而不是字节。</p>
<p>（2）逻辑块到物理块的映射。</p>
<p>这个过程必须要用到索引节点结构，该结构中有一个物理块指针数组，以逻辑块号为索引，通过这些指针找到磁盘上的物理块，具体实现将在介绍Ext2索引节点时再进行介绍。</p>
<p>图1是由一组请求的字节到物理块的映射过程示意图。<br><img src="http://www.chinastor.com/uploads/allimg/121016/101U91B4-0.gif" alt=""></p>
<p>有了逻辑块和物理块的概念，我们也就知道通常所说的数据块是指逻辑块，以下没有特别说明，块或数据块指的是逻辑块。</p>
<p>在Ext2中，还有一个重要的概念：片（fragment），它的作用是什么？</p>
<p>每个文件必然占用整数个逻辑块，除非每个文件大小都恰好是逻辑块的整数倍，否则最后一个逻辑块必然有空间未被使用，实际上，每个文件的最后一个逻辑块平均要浪费一半的空间，显然最终浪费的还是物理块。在一个有很多文件的系统中，这种浪费是很大的。Ext2使用片来解决这个问题。</p>
<h2 id="片"><a href="#片" class="headerlink" title="片"></a>片</h2><p>片也是一个逻辑空间中的概念，其大小在1K至4K之间，但片的大小总是不大于逻辑块。假设逻辑块大小为4K，片大小为1K，物理块大小也是1K，当你要创建一个3K大小的文件时，实际上分配给你了3个片，而不会给你一个逻辑块，当文件大小增加到4K时，文件系统则分配一个逻辑块给你，而原来的四个片被清空。如果文件又增加到5K时，则占用1个逻辑块和1个片。上述三种情况下，所占用的物理块分别是3个、4个、5个，如果不采用片，则要用到4个、4个、8个物理块，可见，使用片，减少了磁盘空间的浪费。当然，在物理块和逻辑块大小一样时，片就没有意义了。<br>由上面分析也可看出：</p>
<p>物理块大小&lt;=片大小&lt;=逻辑块大小</p>
]]></content>
      
        <categories>
            
            <category> 文件系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据重删 </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell知识遗漏1]]></title>
      <url>/2017/05/16/shell%E7%9F%A5%E8%AF%86%E9%81%97%E6%BC%8F1/</url>
      <content type="html"><![CDATA[<h2 id="数组和关联数组"><a href="#数组和关联数组" class="headerlink" title="数组和关联数组"></a>数组和关联数组</h2><p>Bash从4.0版本之后才开始支持关联数组。<br>(1) 定义数组的方法有很多种。可以在单行中使用一列值来定义一个数组:</p>
<pre><code class="shell">
array_var=(1 2 3 4 5 6)
#这些值将会存储在以0为起始索引的连续位置上
</code></pre>
<p>另外,还可以将数组定义成一组“索引 - 值”:</p>
<pre><code class="shell">array_var[0]=&quot;test1&quot;
array_var[1]=&quot;test2&quot;
array_var[2]=&quot;test3&quot;
array_var[3]=&quot;test4&quot;
array_var[4]=&quot;test5&quot;
array_var[5]=&quot;test6&quot;
</code></pre>
<p>(2) 打印出特定索引的数组元素内容:</p>
<pre><code class="shell">echo ${array_var[0]}
test1
index=5
echo ${array_var[$index]}
test6
</code></pre>
<p>(3) 以清单形式打印出数组中的所有值:</p>
<pre><code class="shell">$ echo ${array_var[*]}
test1 test2 test3 test4 test5 test6
也可以这样使用:
$ echo ${array_var[@]}
test1 test2 test3 test4 test5 test6
</code></pre>
<p>(4) 打印数组长度(即数组中元素的个数):</p>
<pre><code class="shell">$ echo ${#array_var[*]}
6
</code></pre>
<a id="more"></a>
<h2 id="数组plus"><a href="#数组plus" class="headerlink" title="数组plus"></a>数组plus</h2><p>1).定义关联数组<br>在关联数组中,我们可以用任意的文本作为数组索引。首先,需要使用声明语句将一个变量<br>名声明为关联数组。像下面这样:</p>
<pre><code>$ declare -A ass_array
</code></pre><p>声明之后,可以用两种方法将元素添加到关联数组中。<br>利用内嵌“索引 - 值”列表的方法,提供一个“索引 - 值”列表:</p>
<pre><code>$ ass_array=([index1]=val1 [index2]=val2)
</code></pre><p>使用独立的“索引 - 值”进行赋值:</p>
<pre><code>$ ass_array[index1]=val1
$ ass_array&#39;index2]=val2
</code></pre><p>举个例子,试想如何用关联数组为水果制定价格:</p>
<pre><code>$ declare -A fruits_value
$ fruits_value=([apple]=&#39;100dollars&#39; [orange]=&#39;150 dollars&#39;)
</code></pre><p>用下面的方法显示数组内容:</p>
<pre><code>$ echo &quot;Apple costs ${fruits_value[apple]}&quot;
Apple costs 100 dollars
</code></pre><p>2).列出数组索引<br>每一个数组元素都有一个索引用于查找。普通数组和关联数组具有不同的索引类型。我们可<br>以用下面的方法获取数组的索引列表:</p>
<pre><code>$ echo ${!array_var[*]}
也可以使用:
$ echo ${!array_var[@]
</code></pre><p>以先前提到的 fruits_value 数组为例,运行如下命令:</p>
<pre><code>$ echo ${!fruits_value[*]}
orange apple
对于普通数组,这个方法同样可行。
</code></pre><h2 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h2><h2 id="函数和参数"><a href="#函数和参数" class="headerlink" title="函数和参数"></a>函数和参数</h2><p> <code>$1</code> 是第一个参数。</p>
<p> <code>$2</code> 是第二个参数。<br> <code>$n</code> 是第n个参数。</p>
<p> <code>&quot;$@&quot;</code> 被扩展成 <code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot;</code> 等。</p>
<p> <code>&quot;$*&quot;</code> 被扩展成 <code>&quot;$1c$2c$3&quot;</code> ,其中 c 是IFS的第一个字符。</p>
<p> <code>&quot;$@&quot;</code> 要比 <code>&quot;$*&quot;</code> 用得多。由于 <code>&quot;$*&quot;</code> 将所有的参数当做单个字符串,因此它很少被使用。<br> <code>$?</code>  上一条命令执行的返回值</p>
<p> <code>$#</code> 参数个数 </p>
<h2 id="字段分隔符和迭代器"><a href="#字段分隔符和迭代器" class="headerlink" title="字段分隔符和迭代器"></a>字段分隔符和迭代器</h2><pre><code class="shell">
#!/bin/bash
#用途: 演示IFS的用法
line=&quot;root:x:0:0:root:/root:/bin/bash&quot;
oldIFS=$IFS;
IFS=&quot;:&quot;
count=0
for item in $line;
do
    [ $count -eq 0 ] &amp;&amp; user=$item;
    [ $count -eq 6 ] &amp;&amp; shell=$item;
    let count++
done;
IFS=$oldIFS
echo $user\&#39;s shell is $shell;

输出为:
root&#39;s shell is /bin/bash
</code></pre>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><pre><code>for var in list;
do
    commands; #使用变量$var
done
</code></pre><p>list 可以是一个字符串,也可以是一个序列。<br>我们可以轻松地生成不同的序列。<br>echo {1..50} 能够生成一个从1~50的数字列表。 echo {a..z} 或 {A..Z} 或 {a..h} 可以生</p>
<p>成字母列表。同样,我们可以将这些方法结合起来对数据进行拼接(concatenate)<br>。下面的<br>代码中,变量 i 在每次迭代的过程里都会保存一个字符,范围从 <code>a ~ z :</code></p>
<pre><code>
for i in {a..z}; do actions; done;
</code></pre><p>for 循环也可以采用C语言中 for 循环的格式。例如:</p>
<pre><code>for((i=0;i&lt;10;i++))
{
    commands; #使用变量$i
}
</code></pre><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><pre><code>while condition
do
    commands;
done
</code></pre><p>用 true 作为循环条件能够产生无限循环。</p>
<h3 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h3><p>在Bash中还可以使用一个特殊的循环 until 。它会一直执行循环,直到给定的条件为真。<br>例如:</p>
<pre><code>
x=0;
until [ $x -eq 9 ]; #条件是[$x -eq 9 ]
do
    let x++; echo $x;
done
</code></pre>]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IDE系列]]></title>
      <url>/2017/05/07/IDE%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="JetBrains"><a href="#JetBrains" class="headerlink" title="JetBrains"></a>JetBrains</h1><blockquote>
<p>我所见过的最好的IDE，没有之一。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20170605113013811?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc4MDM0OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="支持的语言"><br> 网址：<a href="https://www.jetbrains.com/products.html?fromMenu" target="_blank" rel="external">jetbrains</a></p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ol>
<li>地址：<a href="https://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="external">pycharm</a></li>
<li>激活：<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2></li>
<li>地址：<a href="https://www.jetbrains.com/idea/download/#section=linux" target="_blank" rel="external">IntelliJ IDEA</a></li>
<li>激活：<a href="http://www.cnblogs.com/suiyueqiannian/p/6754091.html" target="_blank" rel="external">http://www.cnblogs.com/suiyueqiannian/p/6754091.html</a> (2017-6-6测试可用)<h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2></li>
<li>地址：<a href="https://www.jetbrains.com/clion/download/#section=linux" target="_blank" rel="external">CLion</a></li>
<li>激活：<a href="http://xclient.info/a/f0b9738a-36fd-8a97-a966-0d3db497092d.html" target="_blank" rel="external">http://xclient.info/a/f0b9738a-36fd-8a97-a966-0d3db497092d.html</a>  (2017-6-6测试可用)<h2 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h2></li>
<li>地址：<a href="https://www.jetbrains.com/go/download/#section=linux" target="_blank" rel="external">golang</a></li>
<li>激活：<h2 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h2></li>
<li>地址：<a href="http://color-themes.com/?view=index" target="_blank" rel="external">主题地址</a></li>
<li>推荐主题：（1）. <code>Sublime Text 2</code> （2）. <code>Monokai Sublime Text 3</code></li>
<li>详细教程：<a href="http://blog.csdn.net/simple_the_best/article/details/46941787" target="_blank" rel="external">地址</a></li>
</ol>
<h1 id="得良说"><a href="#得良说" class="headerlink" title="得良说"></a>得良说</h1><ol>
<li>能够熟练使用一个好的IDE，会大幅提高你的工作效率，不用为一些无关紧要的事情浪费时间。就比如这个jetbrains系列，是我见过的最好的ide系列，挺全的常用的语言基本都有，而且风格都一样，你熟练了一种，其他的自然无师自通。</li>
<li>我觉的比较赞 的功能：<pre><code> 1. 可以同步git，简单粗暴
 2. 各种包直接搜索安装，简单粗暴
 3. 多种语言，一个风格，简单粗暴
 4. 竟然支持markdown实时预览，哇这个功能是真的6,6的飞起 
 5. debug超级方便，简单粗暴
 6. 各种漂亮主题直接下载导入，简单粗暴外加漂亮
</code></pre></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 开发工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDE </tag>
            
            <tag> 敏捷开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell正则]]></title>
      <url>/2017/05/05/shell%E6%AD%A3%E5%88%99/</url>
      <content type="html"><![CDATA[<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>1.特定字符</p>
<pre><code>&#39;a&#39;
</code></pre><p>2.范围内字符 </p>
<pre><code>[]单个字符
数字字符:[0-9],[259]
小写字母:[a-z]
大写字母:[A-Z]
符号:[,;:]
取反:[^0-9]
</code></pre><p>3.任意字符</p>
<pre><code>.:单个任意字符(注意:[.]和\.  , 这里就只表示点)
</code></pre><h2 id="其他符号"><a href="#其他符号" class="headerlink" title="其他符号"></a>其他符号</h2><p>1.边界字符:头尾字符</p>
<pre><code>^: ^root 表示以root开头的行
$: false$ 表示以false结束的行

空行的表示: ^$
</code></pre><p>2.元字符(代表普通字符或者特殊字符)</p>
<pre><code>
\w: 匹配任何字类字符,包括下划线([A-Za-z0-9_])
\W: 匹配任何非字类字符([^A-Za-z0-9_])
\b: 单词的分隔(不只是空格或者制表符)
dear@dear3442:~/code/sh$ egrep &#39;\b[0-9]+\b&#39; passwd 
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
</code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol>
<li><code>&#39;asdf&#39;</code> ,<code>&#39;asdf&#39;</code></li>
<li><code>[0-9][0-9][0-9]</code>,<code>[a-z][a-z][a-z]</code></li>
<li><p>重复,逻辑</p>
<p> 重复:</p>
<pre><code> 1. *:零次或者多次 匹配前面的字符或子表达式
 2. \+:一次或者多次 匹配前面的字符或子表达式(注意grep使用的时候,要用 \+ )
 3. \?:零次或者一次 匹配前面的字符或子表达式(注意grep使用的时候,要用 \? )
 4. \{n,m\}: 重复n次到m次
</code></pre><p> 分组:</p>
<pre><code> $ grep &#39;\(se\)*&#39; test.txt #表示匹配se多次
</code></pre><p> 任意字符串:</p>
<pre><code> $ grep &#39;.*&#39; test.txt #可能会贪婪匹配
</code></pre><p> 逻辑:</p>
<pre><code> 1. 逻辑或: | : &#39;/bin/\(false\|true\)&#39;
</code></pre></li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ol>
<li>4-10位的QQ号</li>
</ol>
<pre><code class="shell">grep &#39;^[0-9]\{4-10\}$&#39; qq.txt
</code></pre>
<p>2.匹配密码(有数字,26个字母和下划线组成)</p>
<pre><code>grep &#39;^\w\+$&#39; qq.txt
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="http://function.dearamaze.com/shell%E6%AD%A3%E5%88%99%E6%80%BB%E7%BB%93.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python多线程之threading模块]]></title>
      <url>/2017/04/23/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8Bthreading%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="threading-模块"><a href="#threading-模块" class="headerlink" title="threading 模块"></a>threading 模块</h1><h2 id="使用threading模块-mtsleepC-py"><a href="#使用threading模块-mtsleepC-py" class="headerlink" title="使用threading模块(mtsleepC.py)"></a>使用threading模块(mtsleepC.py)</h2><p>threading模块的Thread类有一个join()方法,可以让主线程等待所有线程执行完毕</p>
<pre><code>#!/usr/bin/env python
# coding=utf-8

import threading
from time import sleep,ctime

loops=[4,2]

def loop(nloop,nsec):
    print &#39;start loop:&#39;,nloop,&#39; done at:&#39;,ctime()
    sleep(nsec)
    print &#39;loop&#39;,nloop,&#39;done at:&#39;,ctime()
def main():
    print &#39;starting at:&#39;,ctime()
    threads=[]
    nloops=range(len(loops))

    for i in nloops:
        t=threading.Thread(target=loop,args=(i,loops[i]))
        threads.append(t)

    for i in nloops:
        threads[i].start()

    for i in nloops:
        threads[i].join()

    print &#39;all DONE at:&#39;,ctime()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre><h2 id="子类化的Thread-mtsleepE-py"><a href="#子类化的Thread-mtsleepE-py" class="headerlink" title="子类化的Thread(mtsleepE.py)"></a>子类化的Thread(mtsleepE.py)</h2><p>本例对Thread子类化,而不是直接对其实例化,这将使我们在定制线程对象是拥有更多的灵活性,也能够简化线程调用的过程.</p>
<pre><code>#!/usr/bin/env python
# coding=utf-8

import threading 
from time import sleep ,ctime

loops=(4,2)

class MyThread(threading.Thread):
    def __init__(self,func,args,name=&#39;&#39;):
        threading.Thread.__init__(self)
        self.name = name 
        self.func = func 
        self.args = args 

    def run(self):
        self.func(*self.args)

def loop(nloop,nsec):
    print &#39;start loop&#39;,nloop,&#39;at:&#39;,ctime()
    sleep(nsec)
    print &#39;loop&#39;,nloop,&#39;done at:&#39;,ctime()

def main():
    print &#39;starting at:&#39;,ctime()
    threads  = []
    nloops=range(len(loops))

    for i in nloops:
        t=MyThread(loop,(i,loops[i]),loop.__name__)
        threads.append(t)

    for i in nloops:
        threads[i].start()

    for i in nloops:
        threads[i].join()

    print &#39;all DONE at:&#39;,ctime()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[python多线程]]></title>
      <url>/2017/04/22/python%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="thread-模块"><a href="#thread-模块" class="headerlink" title="thread 模块"></a>thread 模块</h1><h2 id="使用单线程执行循环"><a href="#使用单线程执行循环" class="headerlink" title="使用单线程执行循环"></a>使用单线程执行循环</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><pre><code class="python">
#!/usr/bin/env python
# coding=utf-8

from time import sleep , ctime 

def loop0():
    print &#39;start loop 0 at : &#39;, ctime()
    sleep(4)
    print &#39;loop 0 done ate : &#39;, ctime()

def loop1():
    print &#39;start loop 1 at : &#39;, ctime()
    sleep(2)
    print &#39;loop 1 done ate : &#39;, ctime()

def main():
    print &quot;starting at : &quot;,ctime()
    loop0()
    loop1()
    print &quot;all DONE at : &quot;,ctime()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre>
<h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果:"></a>执行结果:</h3><blockquote>
<p><code>顺序执行</code></p>
</blockquote>
<p><img src="http://function.dearamaze.com/onethr_run.png" alt="运行结果,顺序执行"></p>
<h2 id="使用thread模块-mtsleepA-py"><a href="#使用thread模块-mtsleepA-py" class="headerlink" title="使用thread模块(mtsleepA.py)"></a>使用thread模块(mtsleepA.py)</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre><code class="python">#!/usr/bin/env python
# coding=utf-8

import thread 
from time import sleep , ctime 

def loop0():
    print &#39;start loop 0 at : &#39;,ctime()
    sleep(4)
    print &#39;loop 0 done at : &#39;,ctime()

def loop1():
    print &#39;start loop 1 at :&#39;,ctime()
    sleep(2)
    print &#39;loop 1 done at :&#39;,ctime()

def main():
    print &#39;starting at :&#39;,ctime()
    thread.start_new_thread(loop0,())
    thread.start_new_thread(loop1,())
    sleep(6)
    print &#39;all done at :&#39;,ctime()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre>
<h3 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h3><blockquote>
<p><code>并行执行</code></p>
</blockquote>
<p><img src="http://function.dearamaze.com/mtsleepA.png" alt="执行结果,并行执行"></p>
<h2 id="修改mtsleepA-py-后"><a href="#修改mtsleepA-py-后" class="headerlink" title="修改mtsleepA.py 后"></a>修改mtsleepA.py 后</h2><pre><code class="python">#!/usr/bin/env python
# coding=utf-8

import thread 
from time import sleep , ctime 

def loop0():
    print &#39;start loop 0 at : &#39;,ctime()
    sleep(4)
    print &#39;loop 0 done at : &#39;,ctime()

def loop1():
    print &#39;start loop 1 at :&#39;,ctime()
    sleep(2)
    print &#39;loop 1 done at :&#39;,ctime()

def main():
    print &#39;starting at :&#39;,ctime()
    thread.start_new_thread(loop0,())
    thread.start_new_thread(loop1,())
    #sleep(6)
    print &#39;all done at :&#39;,ctime()

if __name__ == &#39;__main__&#39;:
    main()
</code></pre>
<p>注释掉了主线程中的sleep函数,发生了什么,反映了什么?</p>
<h3 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h3><blockquote>
<p><code>子线程隶属于父线程,父线程生命周期结束时,子线程也会结束.</code></p>
</blockquote>
<p><img src="http://function.dearamaze.com/mtsleepA_run2.png" alt="执行结果,主线程会强制结束子线程"></p>
<h2 id="使用线程和锁-mtsleepB-py"><a href="#使用线程和锁-mtsleepB-py" class="headerlink" title="使用线程和锁 (mtsleepB.py)"></a>使用线程和锁 (mtsleepB.py)</h2><pre><code class="python">#!/usr/bin/env python
# coding=utf-8

import thread 
from time import sleep , ctime 

loops = [4,2]

def loop(nloop,nsec,lock):
    print &#39;start loop &#39;,nloop,&#39;at:&#39;,ctime()
    sleep(nsec)
    print &#39;loop &#39;,nloop ,&#39;done at :&#39;,ctime()
    lock.release()

def main():
    print &#39;starting at:&#39;,ctime()
    locks=[]
    nloops = range(len(loops))

    #为线程创建锁
    for i in nloops:
        lock = thread.allocate_lock()
        lock.acquire()
        locks.append(lock)

    #开始执行各个线程
    for i in nloops:
        thread.start_new_thread(loop,(i,loops[i],locks[i]))

    #主线程等待所有的线程的锁完全释放
    for i in nloops:
        while locks[i].locked():pass

    print &#39;all DONE at:&#39;,ctime()

if __name__ == &#39;__main__&#39; :
    main()
</code></pre>
<h3 id="执行结果-3"><a href="#执行结果-3" class="headerlink" title="执行结果:"></a>执行结果:</h3><p><img src="http://function.dearamaze.com/mtsleepB.png" alt="线程锁"></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux内核模块编程]]></title>
      <url>/2017/04/21/Linux%E6%A8%A1%E5%9D%97%E7%BC%96%E7%A8%8B/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[运维面试题整理]]></title>
      <url>/2017/04/16/%E8%BF%90%E7%BB%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<ol>
<li>linux如何挂在windows下的共享目录</li>
</ol>
<pre><code class="Shell">mount.cifs //192.168.1.3/server /mnt/server -o user=administrator,pass=123456
</code></pre>
<p>linux 下的server需要自己手动建一个  后面的user与pass 是windows主机的账号和密码 注意空格 和逗号</p>
<ol>
<li>查看http的并发请求数与其TCP连接状态</li>
</ol>
<pre><code class="Shell">netstat -n | awk &#39;/^tcp/ {++b[$NF]} END {for(a in b) print a, b[a]}&#39;
</code></pre>
<p>还有<code>ulimit -n</code>查看linux系统打开最大的文件描述符，这里默认1024，不修改这里web服务器修改再大也没用。若要用就修改很几个办法，这里说其中一个：<br>修改<code>/etc/security/limits.conf</code></p>
<pre><code class="Shell">* soft nofile 10240
* hard nofile 10240
</code></pre>
<p>重启后生效</p>
<ol>
<li>用<code>tcpdump</code>嗅探80端口的访问看看谁最高</li>
</ol>
<pre><code class="Shell">tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F&quot;.&quot; &#39;{print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4}&#39; | sort | uniq -c | sort -nr |head -5 ;
</code></pre>
<ol>
<li>查看<code>/var/log</code>目录下文件数</li>
</ol>
<pre><code>ls /var/log/ -lR| grep &quot;^-&quot; |wc -l
</code></pre><ol>
<li>查看当前系统每个IP的连接数</li>
</ol>
<pre><code class="Shell">
netstat -n | awk &#39;/^tcp/ {print $5}&#39;| awk -F: &#39;{print $1}&#39; | sort | uniq -c | sort -rn
</code></pre>
<ol>
<li>shell下32位随机密码生成</li>
</ol>
<pre><code class="Shell">
cat /dev/urandom | head -1 | md5sum | head -c 32 &gt;&gt; /pass
</code></pre>
<p>将生成的32位随机数 保存到/pass文件里了</p>
<ol>
<li>统计出<code>apache</code>的<code>access.log</code>中访问量最多的5个IP</li>
</ol>
<pre><code class="Shel">cat access_log | awk  &#39;{print $1}&#39; | sort | uniq -c | sort -n -r | head -5
</code></pre>
<ol>
<li>如何查看二进制文件的内容</li>
</ol>
<p>我们一般通过<code>hexdump</code>命令 来查看二进制文件的内容。<br><code>hexdump -C XXX(文件名)</code>  -C是参数 不同的参数有不同的意义<br>-C  是比较规范的 十六进制和ASCII码显示<br>-c  是单字节字符显示<br>-b  单字节八进制显示<br>-o  是双字节八进制显示<br>-d  是双字节十进制显示<br>-x  是双字节十六进制显示<br>等等等等</p>
<ol>
<li><code>ps aux</code> 中的<code>VSZ</code>代表什么意思，<code>RSS</code>代表什么意思</li>
</ol>
<p>VSZ:虚拟内存集,进程占用的虚拟内存空间<br>RSS:物理内存集,进程占用的实际物理内存空间</p>
<ol>
<li>检测并修复<code>/dev/hda5</code></li>
</ol>
<p><code>fsck</code>用来检查和维护不一致的文件系统。若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查,用法：</p>
<ol>
<li>Linux系统的开机启动顺序</li>
</ol>
<p>加载BIOS–&gt;读取MBR–&gt;Boot Loader–&gt;加载内核–&gt;用户层init一句inittab文件来设定系统运行的等级(一般3或者5，3是多用户命令行，5是界面)–&gt;init进程执行rc.syninit–&gt;启动内核模块–&gt;执行不同级别运行的脚本程序–&gt;执行/etc/rc.d/rc.local(本地运行服务)–&gt;执行/bin/login,就可以登录了。</p>
<ol>
<li>符号链接与硬链接的区别</li>
</ol>
<p>我们可以把符号链接，也就是软连接 当做是 windows系统里的 快捷方式。<br>硬链接 就好像是 又复制了一份.<br><code>ln 3.txt 4.txt</code>  这是硬链接，相当于复制，不可以跨分区，但修改3,4会跟着变，若删除3,4不受任何影响。<br><code>ln -s 3.txt 4.txt</code>  这是软连接，相当于快捷方式。修改4,3也会跟着变，若删除3,4就坏掉了。不可以用了。</p>
<ol>
<li>保存当前磁盘分区的分区表</li>
</ol>
<p>dd 命令是以个强大的命令，在复制的同时进行转换</p>
<pre><code class="Shell">dd if=/dev/sda of=./mbr.txt bs=1 count=512
</code></pre>
<ol>
<li>如何在文本里面进行复制、粘贴，删除行，删除全部，按行查找和按字母查找。</li>
</ol>
<p>以下操作全部在命令行状态操作，不要在编辑状态操作。<br>在文本里 移动到想要复制的行  按yy  想复制到哪就移动到哪，然后按P  就黏贴了<br>删除行  移动到改行 按dd<br>删除全部  dG  这里注意G一定要大写<br>按行查找  :90 这样就是找到第90行<br>按字母查找 /path  这样就是 找到path这个单词所在的位置，文本里可能存在多个,多次查找会显示在不同的位置。 </p>
<ol>
<li>手动安装grub</li>
</ol>
<pre><code class="Shell">grub-install /dev/sda
</code></pre>
<ol>
<li>修改内核参数<pre><code>vi /etc/sysctl.conf  这里修改参数
sysctl -p  刷新后可用
</code></pre></li>
<li>在1-39内取随机数</li>
</ol>
<pre><code class="Shell">expr $[$RANDOM%39] + 1
</code></pre>
<p>RANDOM 随机数<br>%39 取余数 范围 0-38</p>
<ol>
<li>限制apache每秒新建连接数为1，峰值为3</li>
</ol>
<p>每秒新建连接数 一般都是由防火墙来做，apache本身好像无法设置每秒新建连接数，只能设置最大连接：</p>
<pre><code class="Shell">iptables -A INPUT -d 172.16.100.1 -p tcp --dport 80 -m limit --limit 1/second  -j ACCEPT
</code></pre>
<p>硬件防火墙设置更简单，有界面化，可以直接填写数字。。。<br>最大连接 apache本身可以设置<br>MaxClients 3  ,修改apache最大连接 前提还是要修改系统默认tcp连接数。我博客里也说了，这就不说了。</p>
<ol>
<li>FTP的主动模式和被动模式</li>
</ol>
<p>FTP协议有两种工作方式：PORT方式和PASV方式，中文意思为主动式和被动式。<br>PORT（主动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请 求，服务器接受连接，建立一条命令链路。当需要传送数据时，客户端在命令链路上用PORT 命令告诉服务器：“我打开了XX端口，你过来连接我”。于是服务器从20端口向客户端的 XX端口发送连接请求，建立一条数据链路来传送数据。<br>PASV（被动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请 求，服务器接受连接，建立一条命令链路。当需要传送数据时，服务器在命令链路上用PASV 命令告诉客户端：“我打开了XX端口，你过来连接我”。于是客户端向服务器的XX端口 发送连接请求，建立一条数据链路来传送数据。<br>从上面可以看出，两种方式的命令链路连接方法是一样的，而数据链路的建立方法就完 全不同。</p>
<ol>
<li>显示<code>/etc/inittab</code>中以#开头，且后面跟了一个或者多个空白字符，而后又跟了任意非空白字符的行</li>
</ol>
<pre><code class="Shell">grep &quot;^# \{1,\}[^ ]&quot; /etc/inittab
</code></pre>
<ol>
<li>显示/etc/inittab中包含了:一个数字:(即两个冒号中间一个数字)的行</li>
</ol>
<pre><code class="Shell">grep &quot;\:[0-9]\{1\}\:&quot; /etc/inittab
</code></pre>
<ol>
<li>怎么把脚本添加到系统服务里，即用service来调用</li>
</ol>
<p>在脚本里加入</p>
<pre><code class="Shell">#!/bin/bash
# chkconfig: 345 85 15
# description: httpd
</code></pre>
<p>然后保存<br>chkconfig httpd –add  创建系统服务<br>现在就可以使用service 来 start or restart</p>
<ol>
<li>写一个脚本，实现批量添加20个用户，用户名为user01-20，密码为user后面跟5个随机字符</li>
</ol>
<pre><code class="Shell">#!/bin/bash
#description: useradd
for i in `seq -f&quot;%02g&quot; 1 20`;do
useradd user$i
echo &quot;user$i-`echo $RANDOM|md5sum|cut -c 1-5`&quot;|passwd –stdinuser$i &gt;/dev/null 2&gt;&amp;1
done
</code></pre>
<ol>
<li>写一个脚本，实现判断192.168.1.0/255网络里，当前在线的IP有哪些，能ping通则认为在线</li>
</ol>
<blockquote>
<p>Shell多线程</p>
</blockquote>
<pre><code class="Shell">
#!/bin/bash
for ip in `seq 1 255`
  do
    {
     ping -c 1 192.168.1.$ip &gt; /dev/null 2&gt;&amp;1
     if [ $? -eq 0 ]; then
          echo 192.168.1.$ip UP
     else
          echo 192.168.1.$ip DOWN
     fi
   }&amp;
done
wait
</code></pre>
<ol>
<li>写一个脚本，判断一个指定的脚本是否是语法错误；如果有错误，则提醒用户键入Q或者q无视错误并退出其它任何键可以通过vim打开这个指定的脚本</li>
</ol>
<pre><code class="Shell">[root@localhost  tmp]# cat checksh.sh
 #!/bin/bash
 read -p &quot;please input check script-&gt; &quot; file
 if [ -f $file ]; then
    sh -n $file &gt; /dev/null 2&gt;&amp;1
    if [ $? -ne 0 ]; then
        read -p &quot;You input $file syntax error,[Type q to exit or Type vim to  edit]&quot; answer
        case $answer in
        q | Q)
           exit 0
           ;;
        vim )
           vim $file
           ;;
        *）
         exit 0
         ;;
        esac
   fi
 else
    echo &quot;$file not exist&quot;
    exit 1
 fi
</code></pre>
<ol>
<li>写一个脚本：(26包括3个小题)</li>
</ol>
<p>1、创建一个函数，能接受两个参数：<br>1)第一个参数为URL，即可下载的文件；第二个参数为目录，即下载后保存的位置；<br>2)如果用户给的目录不存在，则提示用户是否创建；如果创建就继续执行，否则，函数返回一个51的错误值给调用脚本；<br>3)如果给的目录存在，则下载文件；下载命令执行结束后测试文件下载成功与否；如果成功，则返回0给调用脚本，否则，返回52给调用脚本；</p>
<pre><code class="Shell">[root@localhost tmp]# cat downfile.sh
#!/bin/bash
url=$1
dir=$2
download()
  {
    cd $dir &gt;&gt; /dev/null 2&gt;&amp;1
    if [ $? -ne 0 ];then
        read -p &quot;$dir No such file or directory,create?(y/n)&quot; answer
        if [ &quot;$answer&quot; == &quot;y&quot; ];then
            mkdir -p $dir
            cd $dir
            wget $url 1&gt; /dev/null 2&gt;&amp;1
        else
            return &quot;51&quot;
        fi
    fi
    if [ $? -ne 0 ]; then
        return &quot;52&quot;
    fi
}
download $url $dir
echo $?
</code></pre>
<ol>
<li>写一个脚本：（27包括2个小题）</li>
</ol>
<p>1、创建一个函数，可以接受一个磁盘设备路径（如<code>/dev/sdb</code>）作为参数;在真正开始后面步骤之前提醒用户有危险，并让用户选择是否继续；而后将此磁盘设备上的所有分区清空（提示，使用命令<code>dd if=/dev/zero of=/dev/sdb bs=512 count=1</code>实现，注意其中的设备路径不要写错了；<br>如果此步骤失败，返回67给主程序；<br>接着在此磁盘设备上创建两个主分区，一个大小为100M，一个大小为1G；如果此步骤失败，返回68给主程序；<br>格式化此两分区，文件系统类型为ext3；如果此步骤失败，返回69给主程序；<br>如果上述过程都正常，返回0给主程序；<br>2、调用此函数；并通过接收函数执行的返回值来判断其执行情况，并将信息显示出来；</p>
<pre><code class="Shell">local Darray=(`ls /dev/sd[a-z]`)
for i in ${Darray};do
  [[ &quot;$i&quot; == &quot;$1&quot; ]] &amp;&amp; Sd=$i &amp;&amp;break
done
  else
  return66
  fi
#当匹配成功，进入选择，告诉用户，是否继续，输错的话进入无限循环，当用户选择Y,则清空目标分区，且跳出while循环
while :;do
    read -p &quot;Warning!!!This operation will clean $Sd data.Next=y,Quit=n [y|n]:&quot; Choice
    case $Choice in
y)
   dd if=/dev/zero of=$Sd bs=512 count=1 &amp;&gt; /dev/null &amp;&amp;break || return 67 ;;
n)
   exit 88 ;;
*)
   echo &quot;Invalid choice,please choice again.&quot; ;;
esac
done
#使用echo传递给fdisk进行分区，如果此命令失败，则跳转出去，错误值68，需要注意的是，有时候这个返回值很诡异，笔者之前成功与否都是返回的1，后来重启之后，就好了，如果慎重的话，可以对创建的分区，进行判断，不过就需要使用其他工具截取相关字段了，虽有些小麻烦，但无大碍
</code></pre>
<pre><code class="Shell">echo-e &quot;n\np\n1\n\n+100M\nn\np\n2\n\n+1024M\nw\n&quot;|fdisk /dev/sdb&amp;&gt; /dev/null || return 68
#格式化之前，让内核重新读取磁盘分区表，值得注意的是，有的系统版本，使用partprobe无效，譬如笔者的环境是rhel5.8，而rhel6.0以后，这个命令就很危险了，而使用partx -a /dev/sdb则效果更好…此项需慎重，如果格式化失败，则告知把失败的分区定义成变量，且跳出函数，并带出错误值69
</code></pre>
<pre><code class="Shell">`partprobe`
Part=`fdisk -l /dev/$Sd|tail -2|cut -d” ” -f1`
for M in ${Part};do
   mke2fs -j $M &amp;&gt; /dev/null &amp;&amp; ErrorPart=$M &amp;&amp;return 69
done
  return 0
}
</code></pre>
<pre><code class="Shell">#下面代码，调用函数，接收函数返回值，根据返回值进行判断哪里出错。

Disk_Mod $1
Res=$?
[ $Res-eq 0 ] &amp;&amp; exit 0
[ $Res-eq 66 ] &amp;&amp; echo &quot;Error! Invalid input.&quot;
[ $Res-eq 67 ] &amp;&amp; echo &quot;Error! Command -&gt; dd &lt;- Faild.&quot;
[ $Res-eq 68 ] &amp;&amp; echo &quot;Error! Command -&gt; fdisk &lt;- Faild.&quot;
[ $Res-eq 69 ] &amp;&amp; echo &quot;Error! Command -&gt; mke2fs &lt;- Faild.&quot;
</code></pre>
]]></content>
      
        <categories>
            
            <category> 运维 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器搭建之路]]></title>
      <url>/2017/04/13/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<ul>
<li><p><a href="https://linux.cn/article-2436-1.html" target="_blank" rel="external">Linux下Nagios的安装与配置</a></p>
</li>
<li><p><a href="http://blog.topspeedsnail.com/archives/3049" target="_blank" rel="external">在Ubuntu上安装配置Ganglia</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 服务器搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 监控工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内核内存池-mempool]]></title>
      <url>/2017/04/07/%E5%86%85%E6%A0%B8%E5%86%85%E5%AD%98%E6%B1%A0-mempool/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>内存池(Memery Pool)</code>技术是在真正使用内存之前，先申请分配一定数量的、大小相等(一般情况下)的内存块留作备用。当有新的内存需求时，就从内存池中分出一部分内存块，若内存块不够再继续申请新的内存。这样做的一个显著优点是尽量避免了内存碎片，使得内存分配效率得到提升。 </p>
</blockquote>
<p>不仅在用户态应用程序中被广泛使用，同时在Linux内核也被广泛使用，在内核中有不少地方内存分配不允许失败。作为一个在这些情况下确保分配的方式，内核开发者创建了一个已知为内存池(或者是 “mempool” )的抽象，内核中内存池真实地只是相当于后备缓存，它尽力一直保持一个空闲内存列表给紧急时使用，而在通常情况下有内存需求时还是从公共的内存中直接分配，这样的做法虽然有点霸占内存的嫌疑，但是可以从根本上保证关键应用在内存紧张时申请内存仍然能够成功。</p>
<p>下面看下内核内存池的源码，内核内存池的源码在中，实现上非常简洁，描述内存池的结构mempool_t在头文件中定义，结构描述如下：</p>
<pre><code class="C">typedef struct mempool_s {
    spinlock_t lock; /*保护内存池的自旋锁*/
    int min_nr; /*内存池中最少可分配的元素数目*/
    int curr_nr; /*尚余可分配的元素数目*/
    void **elements; /*指向元素池的指针*/
    void *pool_data; /*内存源，即池中元素真实的分配处*/
    mempool_alloc_t *alloc; /*分配元素的方法*/
    mempool_free_t *free; /*回收元素的方法*/
    wait_queue_head_t wait; /*被阻塞的等待队列*/
} mempool_t;
</code></pre>
<p>内存池的创建函数mempool_create的函数原型如下：</p>
<pre><code class="C">mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,
                mempool_free_t *free_fn, void *pool_data)
{
    return mempool_create_node(min_nr,alloc_fn,free_fn, pool_data,-1);
}
</code></pre>
<p>函数原型指定内存池可以容纳元素的个数、申请元素的方法、释放元素的方法，以及一个可选的内存源(通常是一个cache)，内存池对象创建完成后会自动调用alloc方法从pool_data上分配min_nr个元素用来填充内存池。<br>内存池的释放函数mempool_destory函数的原型很简单，应该也能猜到是依次将元素对象从池中移除，再释放给pool_data，最后释放池对象，如下：</p>
<pre><code class="C">void mempool_destroy(mempool_t *pool)
{
    while (pool-&gt;curr_nr) {
        void *element = remove_element(pool);
        pool-&gt;free(element, pool-&gt;pool_data);
    }
    kfree(pool-&gt;elements);
    kfree(pool);
}
</code></pre>
<p>值得注意的是内存池分配和回收对象的函数：mempool_alloc和mempool_free。mempool_alloc的作用是从指定的内存池中申请/获取一个对象，函数原型如下：</p>
<pre><code class="C">void * mempool_alloc(mempool_t *pool, gfp_t gfp_mask){
......
    element = pool-&gt;alloc(gfp_temp, pool-&gt;pool_data);
    if (likely(element != NULL))
        return element;

    spin_lock_irqsave(&amp;pool-&gt;lock, flags);
    if (likely(pool-&gt;curr_nr)) {
        element = remove_element(pool);/*从内存池中提取一个对象*/
        spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
        /* paired with rmb in mempool_free(), read comment there */
        smp_wmb();
        return element;
    }
......
}
</code></pre>
<p>函数先是从pool_data中申请元素对象，当从pool_data无法成功申请到时，才会从池中提取对象使用，因此可以发现内核内存池mempool其实是一种后备池，在内存紧张的情况下才会真正从池中获取，这样也就能保证在极端情况下申请对象的成功率，单也不一定总是会成功，因为内存池的大小毕竟是有限的，如果内存池中的对象也用完了，那么进程就只能进入睡眠，也就是被加入到pool-&gt;wait的等待队列，等待内存池中有可用的对象时被唤醒，重新尝试从池中申请元素：</p>
<pre><code class="C">    init_wait(&amp;wait);
    prepare_to_wait(&amp;pool-&gt;wait, &amp;wait, TASK_UNINTERRUPTIBLE);
    spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
    io_schedule_timeout(5*HZ);
    finish_wait(&amp;pool-&gt;wait, &amp;wait);
</code></pre>
<p>池回收对象的函数mempool_free的原型如下：</p>
<pre><code class="C">void mempool_free(void *element, mempool_t *pool)
{
    if (pool-&gt;curr_nr min_nr) {
        spin_lock_irqsave(&amp;pool-&gt;lock, flags);
        if (pool-&gt;curr_nr min_nr) {
            add_element(pool, element);
            spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
            wake_up(&amp;pool-&gt;wait);
            return;
        }
        spin_unlock_irqrestore(&amp;pool-&gt;lock, flags);
        }
    pool-&gt;free(element, pool-&gt;pool_data);
}
</code></pre>
<p>其实原则跟mempool_alloc是对应的，释放对象时先看池中的可用元素是否充足(pool-&gt;curr_nr == pool-&gt;min_nr)，如果不是则将元素对象释放回池中，否则将元素对象还给pool-&gt;pool_data。<br>    此外mempool也提供或者说指定了几对alloc/free函数，及在mempool_create创建池时必须指定的alloc和free函数，分别适用于不同大小或者类型的元素的内存池，具体如下：</p>
<pre><code class="C">void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data)
{
    struct kmem_cache *mem = pool_data;
    return kmem_cache_alloc(mem, gfp_mask);
}
void mempool_free_slab(void *element, void *pool_data)
{
    struct kmem_cache *mem = pool_data;
    kmem_cache_free(mem, element);
}

void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data)
{
    size_t size = (size_t)pool_data;
    return kmalloc(size, gfp_mask);
}
void mempool_kfree(void *element, void *pool_data)
{
    kfree(element);
}

void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data)
{
    int order = (int)(long)pool_data;
    return alloc_pages(gfp_mask, order);
}
void mempool_free_pages(void *element, void *pool_data)
{
    int order = (int)(long)pool_data;
    __free_pages(element, order);
}
</code></pre>
<p>总体上来讲mempool的实现很简约，但是不简单，而且非常轻便易用，这也是内核奥妙之所在。</p>
<p><a href="http://blog.chinaunix.net/uid-27714502-id-3335217.html" target="_blank" rel="external">原文地址</a></p>
]]></content>
      
        <categories>
            
            <category> linux系统知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 内核 </tag>
            
            <tag> 存储 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[块设备驱动详解]]></title>
      <url>/2017/04/06/%E5%9D%97%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="块设备与字符设备的区别"><a href="#块设备与字符设备的区别" class="headerlink" title="块设备与字符设备的区别"></a>块设备与字符设备的区别</h1><p>1、 从字面上理解，块设备和字符设备最大的区别在于<code>读写数据的基本单元</code>不同。<br><code>块设备</code>读写数据的基本单元为块，例如磁盘通常为一个sector，而<code>字符设备</code>的基本单元为字节。<br>所以Linux中块设备驱动往往为磁盘设备的驱动，但是由于磁盘设备的IO性能与CPU相比很差，因此，块设备的数据流往往会引入文件系统的Cache机制。</p>
<p>2、 从实现角度来看，Linux为块设备和字符设备提供了两套机制。</p>
<p><code>字符设备</code>实现的比较简单，内核例程和用户态API一一对应，用户层的Read函数直接对应了内核中的Read例程，这种映射关系由字符设备的file_operations维护。<br><code>块设备</code>接口相对于字符设备复杂，read、write API没有直接到块设备层，而是直接到文件系统层，然后再由文件系统层发起读写请求。</p>
<h1 id="块设备读写流程"><a href="#块设备读写流程" class="headerlink" title="块设备读写流程"></a>块设备读写流程</h1><p>在学习块设备原理的时候，我最关系块设备的数据流程，从应用程序调用Read或者Write开始，数据在内核中到底是如何流通、处理的呢？然后又如何抵达具体的物理设备的呢？下面对一个带Cache功能的块设备数据流程进行分析。</p>
<p>1、 用户态程序通过open()打开指定的块设备，通过systemcall机制陷入内核，执行blkdev_open()函数，该函数注册到文件系统方法（file_operations）中的open上。在blkdev_open函数中调用bd_acquire()函数，bd_acquire函数完成文件系统inode到块设备bdev的转换，具体的转换方法通过hash查找实现。得到具体块设备的bdev之后，调用do_open()函数完成设备打开的操作。在do_open函数中会调用到块设备驱动注册的open方法，具体调用如下：gendisk-&gt;fops-&gt;open(bdev-&gt;bd_inode, file)。</p>
<p>2、 用户程序通过read、write函数对设备进行读写，文件系统会调用相应的方法，通常会调用如下两个函数：generic_file_read和blkdev_file_write。在读写过程中采用了多种策略，首先分析读过程。</p>
<p>3、 用户态调用了read函数，内核执行generic_file_read，如果不是direct io方式，那么直接调用do_generic_file_read-&gt;do_generic_mapping_read()函数，在do_generic_mapping_read（函数位于filemap.c）函数中，首先查找数据是否命中Cache，如果命中，那么直接将数据返回给用户态；否则通过address_space-&gt;a_ops-&gt;readpage函数发起一个真实的读请求。在readpage函数中，构造一个buffer_head，设置bh回调函数end_buffer_async_read，然后调用submit_bh发起请求。在submit_bh函数中，根据buffer_head构造bio，设置bio的回调函数end_bio_bh_io_sync，最后通过submit_bio将bio请求发送给指定的快设备。</p>
<p>4、 如果用户态调用了一个write函数，内核执行blkdev_file_write函数，如果不是direct io操作方式，那么执行buffered write操作过程，直接调用generic_file_buffered_write函数。Buffered write操作方法会将数据直接写入Cache，并进行Cache的替换操作，在替换操作过程中需要对实际的快设备进行操作，address_space-&gt;a_ops提供了块设备操作的方法。当数据被写入到Cache之后，write函数就可以返回了，后继异步写入的任务绝大部分交给了pdflush daemon（有一部分在替换的时候做了）</p>
<p>5、 数据流操作到这一步，我们已经很清楚用户的数据是如何到内核了。与用户最接近的方法是file_operations，每种设备类型都定义了这一方法（由于Linux将所有设备都看成是文件，所以为每类设备都定义了文件操作方法，例如，字符设备的操作方法为def_chr_fops，块设备为def_blk_fops，网络设备为bad_sock_fops）。每种设备类型底层操作方法是不一样的，但是通过file_operations方法将设备类型的差异化屏蔽了，这就是Linux能够将所有设备都理解为文件的缘由。到这里，又提出一个问题：既然这样，那设备的差异化又该如何体现呢？在文件系统层定义了文件系统访问设备的方法，该方法就是address_space_operations，文件系统通过该方法可以访问具体的设备。对于字符设备而言，没有实现address_space_operations方法，也没有必要，因为字符设备的接口与文件系统的接口是一样的，在字符设备open操作的过程中，将inode所指向的file_operations替换成cdev所指向的file_operations就可以了。这样用户层读写字符设备可以直接调用cdev中file_operations方法了。</p>
<p>6、 截至到步骤（4），读操作在没有命中Cache的情况下通过address_space_operations方法中的readpage函数发起块设备读请求；写操作在替换Cache或者Pdflush唤醒时发起块设备请求。发起块设备请求的过程都一样，首先根据需求构建bio结构，bio结构中包含了读写地址、长度、目的设备、回调函数等信息。构造完bio之后，通过简单的submit_bio函数将请求转发给具体的块设备。从这里可以看出，块设备接口很简单，接口方法为submit_bio（更底层函数为generic_make_request），数据结构为struct bio。</p>
<p>7、 submit_bio函数通过generic_make_request转发bio，generic_make_request是一个循环，其通过每个块设备下注册的q-&gt;make_request_fn函数与块设备进行交互。如果访问的块设备是一个有queue的设备，那么会将系统的__make_request函数注册到q-&gt;make_request_fn中；否则块设备会注册一个私有的方法。在私有的方法中，由于不存在queue队列，所以不会处理具体的请求，而是通过修改bio中的方法实现bio的转发，在私有make_request方法中，往往会返回1，告诉generic_make_request继续转发比bio。Generic_make_request的执行上下文可能有两种，一种是用户上下文，另一种为pdflush所在的内核线程上下文。</p>
<p>8、 通过generic_make_request的不断转发，最后请求一定会到一个存在queue队列的块设备上，假设最终的那个块设备是某个scsi disk（/dev/sda）。generic_make_request将请求转发给sda时，调用<strong>make_request，该函数是Linux提供的块设备请求处理函数。在该函数中实现了极其重要的操作，通常所说的IO Schedule就在该函数中实现。在该函数中试图将转发过来的bio merge到一个已经存在的request中，如果可以合并，那么将新的bio请求挂载到一个已经存在request中。如果不能合并，那么分配一个新的request，然后将bio添加到其中。这一切搞定之后，说明通过generic_make_request转发的bio已经抵达了内核的一个站点——request，找到了一个临时归宿。此时，还没有真正启动物理设备的操作。在</strong>make_request退出之前，会判断一个bio中的sync标记，如果该标记有效，说明请求的bio是一个是实时性很强的操作，不能在内核中停留，因此调用了<strong>generic_unplug_device函数，该函数将触发下一阶段的操作；如果该标记无效的话，那么该请求就需要在queue队列中停留一段时间，等到queue队列触发闹钟响了之后，再触发下一阶段的操作。</strong>make_request函数返回0，告诉generic_make_request无需再转发bio了，bio转发结束。</p>
<p>9、 到目前为止，文件系统（pdflush或者address_space_operations）发下来的bio已经merge到request queue中，如果为sync bio，那么直接调用__generic_unplug_device，否则需要在unplug timer的软中断上下文中执行q-&gt;unplug_fn。后继request的处理方法应该和具体的物理设备相关，但是在标准的块设备上如何体现不同物理设备的差异性呢？这种差异性就体现在queue队列的方法上，不同的物理设备，queue队列的方法是不一样的。举例中的sda是一个scsi设备，在scsi middle level将scsi_request_fn函数注册到了queue队列的request_fn方法上。在q-&gt;unplug_fn（具体方法为：generic_unplug_device）函数中会调用request队列的具体处理函数q-&gt;request_fn。Ok，到这一步实际上已经将块设备层与scsi总线驱动层联系在了一起，他们的接口方法为request_fn（具体函数为scsi_request_fn）。</p>
<p>10、明白了第（9）点之后，接下来的过程实际上和具体的scsi总线操作相关了。在scsi_request_fn函数中会扫描request队列，通过elv_next_request函数从队列中获取一个request。在elv_next_request函数中通过scsi总线层注册的q-&gt;prep_rq_fn（scsi层注册为scsi_prep_fn）函数将具体的request转换成scsi驱动所能认识的scsi command。获取一个request之后，scsi_request_fn函数直接调用scsi_dispatch_cmd函数将scsi command发送给一个具体的scsi host。到这一步，有一个问题：scsi command具体转发给那个scsi host呢？秘密就在于q-&gt;queuedata中，在为sda设备分配queue队列时，已经指定了sda块设备与底层的scsi设备（scsi device）之间的关系，他们的关系是通过request queue维护的。</p>
<p>11、 在scsi_dispatch_cmd函数中，通过scsi host的接口方法queuecommand将scsi command发送给scsi host。通常scsi host的queuecommand方法会将接收到的scsi command挂到自己维护的队列中，然后再启动DMA过程将scsi command中的数据发送给具体的磁盘。DMA完毕之后，DMA控制器中断CPU，告诉CPU DMA过程结束，并且在中断上下文中设置DMA结束的中断下半部。DMA中断服务程序返回之后触发软中断，执行SCSI中断下半部。</p>
<p>12、 在SCSi中断下半部中，调用scsi command结束的回调函数，这个函数往往为scsi_done，在scsi_done函数调用blk_complete_request函数结束请求request，每个请求维护了一个bio链，所以在结束请求过程中回调每个请求中的bio回调函数，结束具体的bio。Bio又有文件系统的buffer head生成，所以在结束bio时，回调buffer_head的回调处理函数bio-&gt;bi_end_io（注册为end_bio_bh_io_sync）。自此，由中断引发的一系列回调过程结束，总结一下回调过程如下：scsi_done-&gt;end_request-&gt;end_bio-&gt;end_bufferhead。</p>
<p>13、 回调结束之后，文件系统引发的读写操作过程结束。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx学习]]></title>
      <url>/2017/04/06/nginx%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>##模块<br>按功能划分:</p>
<ol>
<li><p>handles(处理器模块)</p>
</li>
<li><p>filers(过滤器模块)</p>
</li>
<li><p>proxies(代理类模块)</p>
</li>
</ol>
<p><img src="" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 服务器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[响应码]]></title>
      <url>/2017/04/03/%E5%93%8D%E5%BA%94%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>1XX: 信息<br>2XX: 成功类的状态码<br>3XX: 提示需进一步提供信息的状态码<br>4XX: 客户端错误<br>5XX: 服务端错误</p>
]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用shell]]></title>
      <url>/2017/04/03/%E5%B8%B8%E7%94%A8shell/</url>
      <content type="html"><![CDATA[<p>##查看当前开启的服务</p>
<ol>
<li><pre><code class="shell">ls /etc/rc`runlevel|sed &#39;s/N.//&#39;`.d|awk &#39;!/K/ {print}&#39;|sed &#39;s/S[0-9][0-9]//&#39;
</code></pre>
</li>
<li><pre><code class="shell">sudo service --status-all
</code></pre>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大创构思]]></title>
      <url>/2017/04/02/%E5%A4%A7%E5%88%9B%E6%9E%84%E6%80%9D/</url>
      <content type="html"><![CDATA[<h1 id="更新点"><a href="#更新点" class="headerlink" title="更新点"></a>更新点</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol>
<li>增加网页IDE,功能</li>
<li>查重功能</li>
<li>分步计分</li>
<li>论坛</li>
<li>天梯训练模式</li>
<li>教学统计查看</li>
<li>当前oj功能完善</li>
</ol>
<h2 id="分工"><a href="#分工" class="headerlink" title="分工"></a>分工</h2><ul>
<li><p>网页IDE <code>徐瑶琨</code></p>
</li>
<li><p>论坛 <code>范得良</code></p>
</li>
<li><p>天梯训练模式 <code>马琨</code></p>
</li>
<li><p>教学统计功能,查重,分步计分,当前OJ功能完善,整合 <code>李闯</code></p>
</li>
</ul>
<h1 id="OnlineJudgeOpenAPI文档"><a href="#OnlineJudgeOpenAPI文档" class="headerlink" title="OnlineJudgeOpenAPI文档"></a>OnlineJudgeOpenAPI文档</h1><p>为了方便与Virtual Judge和第三方论坛等进行集成，开放了获取题目详细信息、提交代码、获取代码运行结果和用户SSO单点登录四个API。</p>
<p>在使用API之前，请先申请appkey，在个人设置页面可以看到，如果没有申请过，请联系OJ的管理员在后台开通。</p>
<h2 id="API说明"><a href="#API说明" class="headerlink" title="API说明"></a>API说明</h2><p>所有的返回值都是<code>{&quot;code&quot;: , data: }</code>的形式，只有code为0的时候代表正常返回了，data为数据内容。其余code表示出现错误，data为错误提示。</p>
<p>所有的POST请求和响应都是json格式的，POST请求的<code>Content-Type</code>确保为<code>application/json</code>。</p>
<h2 id="获取题目详细信息"><a href="#获取题目详细信息" class="headerlink" title="获取题目详细信息"></a>获取题目详细信息</h2><p><strong>request</strong> <code>GET</code> <code>/api/open/problem/?appkey=&amp;problem_id=</code><br><strong>response</strong></p>
<pre><code class="js">{
    &quot;code&quot;: 0,
    &quot;data&quot;: {
        // 题目的id
        &quot;id&quot;: 1,
        // 样例输入和输出
        &quot;samples&quot;: [
            {
                &quot;input&quot;: &quot;1 1&quot;,
                &quot;output&quot;: &quot;2&quot;
            },
            {
                &quot;input&quot;: &quot;1 1&quot;,
                &quot;output&quot;: &quot;2&quot;
            },
            {
                &quot;input&quot;: &quot;1 -1&quot;,
                &quot;output&quot;: &quot;0&quot;
            }
        ],
        // 标签
        &quot;tags&quot;: [
            {
                &quot;id&quot;: 1,
                &quot;name&quot;: &quot;简单&quot;
            }
        ],
        // 创建用户
        &quot;created_by&quot;: {
            &quot;username&quot;: &quot;root&quot;
        },
        // 题目
        &quot;title&quot;: &quot;A + B Problem&quot;,
        // 描述 HTML格式
        &quot;description&quot;: &quot;请计算两个整数的和并输出结果。注意不要有不必要的输出，比如&amp;quot;请输入 a 和 b 的值: &amp;quot;，示例代码见隐藏部分。&quot;,
        // 输入说明
        &quot;input_description&quot;: &quot;两个用空格分开的整数.&quot;,
        // 输出说明
        &quot;output_description&quot;: &quot;两数之和&quot;,
        // 提示 没有提示就是空字符串
        &quot;hint&quot;: &quot;测试题目&quot;,
        // 创建时间
        &quot;create_time&quot;: &quot;2015-09-02T13:02:26Z&quot;,
        // 最后修改时间 如果没有修改过，就是NULL
        &quot;last_update_time&quot;: &quot;2016-02-02T03:43:34.244046Z&quot;,
        // 时间限制 单位ms
        &quot;time_limit&quot;: 1000,
        // 内存限制 单位M
        &quot;memory_limit&quot;: 512,
        // 总共提交次数
        &quot;total_submit_number&quot;: 1128,
        // 总共ac次数
        &quot;total_accepted_number&quot;: 521,
        // 难度 1-3 简单到难
        &quot;difficulty&quot;: 1,
        // 题目来源
        &quot;source&quot;: &quot;经典题目&quot;
    }
}
</code></pre>
<h2 id="提交题目"><a href="#提交题目" class="headerlink" title="提交题目"></a>提交题目</h2><p><strong>request</strong> <code>post</code> <code>/api/open/submission/</code></p>
<pre><code class="js">{
    // appkey 
    &quot;appkey&quot;: &quot;example_appkey&quot;, 
    // 代码 
    &quot;code&quot;: &quot;example code&quot;,
    // 语言 1:C 2:C++ 3:Java 
    &quot;language&quot;: 1,
    // 题目id 
    &quot;problem_id&quot;: 1
}
</code></pre>
<p><strong>response</strong><br>提交代码后，服务器立即返回，并异步判题。</p>
<pre><code class="js">{
    &quot;code&quot;: 0,
    &quot;data&quot;: {
        // 提交id
        &quot;submission_id&quot;: &quot;4e49416e087f79fd3d0822b1899d601c&quot;
    }
}
</code></pre>
<p>要注意的是，每个用户都有自己的提交频率限制。开源代码中，默认使用的TokenBucket进行的限制，每个用户默认有50个token，然后每分钟可以创建2个token，但是也是50个token封顶，每提交一道题就消耗一个token。开始的50个token可以保证一定时间的并发需求，如果超过频率限制将返回错误和需要等待的时间。</p>
<h2 id="获取提交结果"><a href="#获取提交结果" class="headerlink" title="获取提交结果"></a>获取提交结果</h2><p><strong>request</strong> <code>GET</code> <code>/api/open/submission/?appkey=&amp;submission_id=</code></p>
<p><strong>response</strong></p>
<pre><code class="js">{
    &quot;code&quot;: 0,
    &quot;data&quot;: {
        &quot;id&quot;: &quot;9d4610ef9ae6b30e588c650891ba6858&quot;,
        &quot;result&quot;: 0,
        &quot;create_time&quot;: &quot;2016-02-16T03:54:10Z&quot;,
        &quot;language&quot;: 1,
        // info可能是None或者字符串
        // 在编译错误和系统错误的时候info为错误详情，可能会很长，其余的情况为一个json字符串
        &quot;info&quot;: &quot;[{\&quot;cpu_time\&quot;: 0, \&quot;exit_status\&quot;: 0, \&quot;signal\&quot;: 0, \&quot;output_md5\&quot;: \&quot;33d6548e48d4318ceb0e3916a79afc84\&quot;, \&quot;flag\&quot;: 0, \&quot;result\&quot;: 0, \&quot;memory\&quot;: 7602176, \&quot;real_time\&quot;: 4}, {\&quot;cpu_time\&quot;: 0, \&quot;exit_status\&quot;: 0, \&quot;signal\&quot;: 0, \&quot;output_md5\&quot;: \&quot;e4da3b7fbbce2345d7772b0674a318d5\&quot;, \&quot;flag\&quot;: 0, \&quot;result\&quot;: 0, \&quot;memory\&quot;: 7602176, \&quot;real_time\&quot;: 2}]&quot;
    }
}
</code></pre>
<p>result的对应关系</p>
<pre><code class="js">{
    &quot;accepted&quot;: 0,
    &quot;runtime_error&quot;: 1,
    &quot;time_limit_exceeded&quot;: 2,
    &quot;memory_limit_exceeded&quot;: 3,
    &quot;compile_error&quot;: 4,
    &quot;format_error&quot;: 5,
    &quot;wrong_answer&quot;: 6,
    &quot;system_error&quot;: 7,
    &quot;waiting&quot;: 8
}
</code></pre>
<h2 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h2><p><strong>request</strong> <code>GET</code> <code>/account/sso/?callback=</code></p>
<p>然后用户确认登录之后，会跳转到<code>http://callback_url?token=</code>上，需要获取token参数，然后</p>
<p><strong>request</strong> <code>POST</code> <code>/account/sso/</code></p>
<pre><code class="js">{
    &quot;appkey&quot;: &quot;example_appkey&quot;,
    &quot;token&quot;: &quot;example_token&quot;
}
</code></pre>
<p><strong>response</strong></p>
<pre><code class="js">{
    &quot;code&quot;: 0,
    &quot;data&quot;: {
        &quot;username&quot;: &quot;root&quot;,
        &quot;admin_type&quot;: 2,
        &quot;id&quot;: 1,
        &quot;avatar&quot;: &quot;/static/img/avatar/avatar-10.png&quot;
    }
}
</code></pre>
<p>注意回调的token和appkey并没有关系，这个token只能一次性使用。</p>
]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用Git命令清单]]></title>
      <url>/2017/04/01/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库<br><img src="http://function.dearamaze.com/git%E7%BB%93%E6%9E%84.png" alt=""></li>
</ul>
<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><pre><code># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<pre><code># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
</code></pre><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><pre><code># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><pre><code># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><pre><code># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><pre><code># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><pre><code># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><pre><code># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><pre><code># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code># 生成一个可供发布的压缩包
$ git archive
</code></pre><h2 id="使用问题记录"><a href="#使用问题记录" class="headerlink" title="使用问题记录"></a>使用问题记录</h2><p>git pull 出现错误<br>    由于git pull的内容与本地commit的内容产生了冲突。<br>解决方法<br>    产生冲突后，git会自动在本地记录冲突，修改本地的文件后，<code>git add -u</code> <code>git push origin master</code>即可</p>
<p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">转自</a></p>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shell </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tr命令]]></title>
      <url>/2017/03/31/tr%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>通过使用 tr，您可以非常容易地实现 sed 的许多最基本功能。您可以将 tr 看作为 sed 的（极其）简化的变体：它可以用一个字符来替换另一个字符，或者可以完全除去一些字符。您也可以用它来除去重复字符。这就是所有 tr 所能够做的。 </p>
</blockquote>
<p>tr用来从标准输入中通过替换或删除操作进行字符转换。tr主要用于删除文件中控制字符或进行字符转换。使用tr时要转换两个字符串：字符串1用于查询，字符串2用于处理各种转换。tr刚执行时，字符串1中的字符被映射到字符串2中的字符，然后转换操作开始。</p>
<h2 id="带有最常用选项的tr命令格式为："><a href="#带有最常用选项的tr命令格式为：" class="headerlink" title="带有最常用选项的tr命令格式为："></a>带有最常用选项的tr命令格式为：</h2><p>tr -c -d -s [“string1_to_translate_from”] [“string2_to_translate_to”]  input-file</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre><code>-c 用字符串1中字符集的补集替换此字符集，要求字符集为ASCII。
-d 删除字符串1中所有输入字符。
-s 删除所有重复出现字符序列，只保留第一个；即将重复出现字符串压缩为一个字符串。
input-file是转换文件名。虽然可以使用其他格式输入，但这种格式最常用。
</code></pre><h3 id="字符范围"><a href="#字符范围" class="headerlink" title="字符范围"></a>字符范围</h3><pre><code>指定字符串1或字符串2的内容时，只能使用单字符或字符串范围或列表。
[a-z] a-z内的字符组成的字符串。
[A-Z] A-Z内的字符组成的字符串。
[0-9] 数字串。
\octal 一个三位的八进制数，对应有效的ASCII字符。
[O*n] 表示字符O重复出现指定次数n。因此[O*2]匹配OO的字符串。
tr中特定控制字符的不同表达方式
</code></pre><h3 id="速记符含义八进制方式"><a href="#速记符含义八进制方式" class="headerlink" title="速记符含义八进制方式"></a>速记符含义八进制方式</h3><pre><code>\a Ctrl-G  铃声\007
\b Ctrl-H  退格符\010
\f Ctrl-L  走行换页\014
\n Ctrl-J  新行\012
\r Ctrl-M  回车\015
\t Ctrl-I  tab键\011
\v Ctrl-X  \030
</code></pre><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p>1.将文件file中出现的”abc”替换为”xyz”</p>
<pre><code>cat file | tr &quot;abc&quot; &quot;xyz&quot; &gt; new_file
</code></pre><p>【注意】这里，凡是在file中出现的”a”字母，都替换成”x”字母，”b”字母替换为”y”字母，”c”字母替换为”z”字母。而不是将字符串”abc”替换为字符串”xyz”。</p>
<p>2.使用tr命令“统一”字母大小写</p>
<pre><code>（小写 --&gt; 大写）
cat file | tr [a-z] [A-Z] &gt; new_file
（大写 --&gt; 小写）
cat file | tr [A-Z] [a-z] &gt; new_file
</code></pre><p>3.把文件中的数字0-9替换为a-j</p>
<pre><code>cat file | tr [0-9] [a-j] &gt; new_file
</code></pre><p>4、删除文件file中出现的”Snail”字符</p>
<pre><code class="shell">cat file | tr -d &quot;Snail&quot; &gt; new_file
</code></pre>
<p>【注意】这里，凡是在file文件中出现的’S’,’n’,’a’,’i’,’l’字符都会被删除！而不是紧紧删除出现的”Snail”字符串。</p>
<p>5、删除文件file中出现的换行’\n’、制表’\t’字符</p>
<pre><code class="shell">cat file | tr -d &quot;\n\t&quot; &gt; new_file
</code></pre>
<p>不可见字符都得用转义字符来表示的，这个都是统一的。</p>
<p>6、删除“连续着的”重复字母，只保留第一个</p>
<pre><code class="shell">cat file | tr -s [a-zA-Z] &gt; new_file
</code></pre>
<p>7、删除空行</p>
<pre><code class="shell">
cat file | tr -s &quot;\n&quot; &gt; new_file
</code></pre>
<p>8、删除Windows文件“造成”的’^M’字符</p>
<pre><code class="shell">
cat file | tr -d &quot;\r&quot; &gt; new_file
或者
cat file | tr -s &quot;\r&quot; &quot;\n&quot; &gt; new_file
</code></pre>
<p>【注意】这里-s后面是两个参数”\r”和”\n”，用后者替换前者</p>
<p>9、用空格符\040替换制表符\011</p>
<pre><code>cat file | tr -s &quot;\011&quot; &quot;\040&quot; &gt; new_file
</code></pre><p>10、把路径变量中的冒号”:”，替换成换行符”\n”</p>
<pre><code>echo $PATH | tr -s &quot;:&quot; &quot;\n&quot;
</code></pre>]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用apt命令参数]]></title>
      <url>/2017/03/31/%E5%B8%B8%E7%94%A8apt%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>常用的APT命令参数：</p>
<p>apt-cache search package 搜索包</p>
<p>apt-cache show package 获取包的相关信息，如说明、大小、版本等</p>
<p>sudo apt-get install package 安装包</p>
<p>sudo apt-get install package - - reinstall 重新安装包</p>
<p>sudo apt-get -f install 修复安装”-f = ——fix-missing”</p>
<p>sudo apt-get remove package 删除包</p>
<p>sudo apt-get remove package - - purge 删除包，包括删除配置文件等</p>
<p>sudo apt-get update 更新源</p>
<p>sudo apt-get upgrade 更新已安装的包</p>
<p>sudo apt-get dist-upgrade 升级系统</p>
<p>sudo apt-get dselect-upgrade 使用 dselect 升级</p>
<p>apt-cache depends package 了解使用依赖</p>
<p>apt-cache rdepends package 是查看该包被哪些包依赖</p>
<p>sudo apt-get build-dep package 安装相关的编译环境</p>
<p>apt-get source package 下载该包的源代码</p>
<p>sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包</p>
<p>sudo apt-get check 检查是否有损坏的依赖</p>
]]></content>
      
        
        <tags>
            
            <tag> 知识点 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Ubuntu 16.04 搜狗输入法 只有悬浮窗中文不能自动联想的问题]]></title>
      <url>/2017/03/30/%E8%A7%A3%E5%86%B3Ubuntu-16-04-%E6%90%9C%E7%8B%97%E8%BE%93%E5%85%A5%E6%B3%95-%E5%8F%AA%E6%9C%89%E6%82%AC%E6%B5%AE%E7%AA%97%E4%B8%AD%E6%96%87%E4%B8%8D%E8%83%BD%E8%87%AA%E5%8A%A8%E8%81%94%E6%83%B3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>一直用得好好的，不知道下载了什么更新导致搜狗输入法，在输入中文的时候，只显示一个悬浮窗。打字的时候什么反应都没有。中文也联想不出来。</p>
<p>找了半天，重新安装fcitx/搜狗输入法N次无果，在网上论坛找到了答案，修复了这个问题，记录一下。</p>
<p>直接删除其配置文件：</p>
<pre><code>rm -rf ~/.config/SogouPY* ~/.config/sogou*
</code></pre><p>然后直接在右上角点fcitx图标，下拉列表里面重启fcitx输入法</p>
<p><a href="https://fiture.me/share/linux-ubuntu/1246.html" target="_blank" rel="external">转载自</a></p>
]]></content>
      
        <categories>
            
            <category> Ubuntu使用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP和UDP套接字C语言实现]]></title>
      <url>/2017/03/28/TCP%E5%92%8CUDP%E5%A5%97%E6%8E%A5%E5%AD%97C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h1 id="字符串传输"><a href="#字符串传输" class="headerlink" title="字符串传输"></a>字符串传输</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre><code>#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 

#define MYPORT  8887
#define BUFFER_SIZE 1024

int main()
{
    ///定义sockfd
    int sock_cli = socket(AF_INET,SOCK_STREAM, 0);

    ///定义sockaddr_in
    struct sockaddr_in servaddr;
    memset(&amp;servaddr, 0, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(MYPORT);  ///服务器端口
    servaddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;);  ///服务器ip

    ///连接服务器，成功返回0，错误返回-1
    if (connect(sock_cli, (struct sockaddr *)&amp;servaddr, sizeof(servaddr)) &lt; 0)
    {
        perror(&quot;connect&quot;);
        exit(1);
    }

    char sendbuf[BUFFER_SIZE];
    char recvbuf[BUFFER_SIZE];
    while (fgets(sendbuf, sizeof(sendbuf), stdin) != NULL)
    {
        send(sock_cli, sendbuf, strlen(sendbuf),0); ///发送
        if(strcmp(sendbuf,&quot;exit\n&quot;)==0)
            break;
        recv(sock_cli, recvbuf, sizeof(recvbuf),0); ///接收
        fputs(recvbuf, stdout);

        memset(sendbuf, 0, sizeof(sendbuf));
        memset(recvbuf, 0, sizeof(recvbuf));
    }

    close(sock_cli);
    return 0;
}
</code></pre><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre><code>#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 

#define MYPORT  8887
#define QUEUE   20
#define BUFFER_SIZE 1024

int main()
{
    ///定义sockfd
    int server_sockfd = socket(AF_INET,SOCK_STREAM, 0);

    ///定义sockaddr_in
    struct sockaddr_in server_sockaddr;
    server_sockaddr.sin_family = AF_INET;
    server_sockaddr.sin_port = htons(MYPORT);
    server_sockaddr.sin_addr.s_addr = htonl(INADDR_ANY);

    ///bind，成功返回0，出错返回-1
    if(bind(server_sockfd,(struct sockaddr *)&amp;server_sockaddr,sizeof(server_sockaddr))==-1)
    {
        perror(&quot;bind&quot;);
        exit(1);
    }

    ///listen，成功返回0，出错返回-1
    if(listen(server_sockfd,QUEUE) == -1)
    {
        perror(&quot;listen&quot;);
        exit(1);
    }

    ///客户端套接字
    char buffer[BUFFER_SIZE];
    struct sockaddr_in client_addr;
    socklen_t length = sizeof(client_addr);

    ///成功返回非负描述字，出错返回-1
    int conn = accept(server_sockfd, (struct sockaddr*)&amp;client_addr, &amp;length);
    if(conn&lt;0)
    {
        perror(&quot;connect&quot;);
        exit(1);
    }

    while(1)
    {
        memset(buffer,0,sizeof(buffer));
        int len = recv(conn, buffer, sizeof(buffer),0);
        if(strcmp(buffer,&quot;exit\n&quot;)==0)
            break;
        fputs(buffer, stdout);
        for(int i=0;i&lt;len;i++){
            if(buffer[i]&gt;=97&amp;&amp;buffer[i]&lt;=122)buffer[i]-=32;
        }
        send(conn, buffer, len, 0);
    }
    close(conn);
    close(server_sockfd);
    return 0;
}
</code></pre><h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p>tcp_client:</p>
<p><img src="http://function.dearamaze.com/tcp_c.png" alt="client"></p>
<p>tcp_server:</p>
<p><img src="http://function.dearamaze.com/tcp_s.png" alt="server"></p>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><pre><code>#include 
#include 
#include 
#include 
#include 

#define SERVER_PORT 8888
#define BUFF_LEN 512
#define SERVER_IP &quot;172.0.5.182&quot;


void udp_msg_sender(int fd, struct sockaddr* dst)
{

    socklen_t len;
    char sendbuf[BUFF_LEN];
    char recvbuf[BUFF_LEN];
    struct sockaddr_in src;
    while(fgets(sendbuf,sizeof(sendbuf),stdin)!=NULL){
        len=sizeof(*dst);
        sendto(fd,sendbuf,BUFF_LEN,0,dst,len);
        if(strcmp(sendbuf,&quot;exit\n&quot;)==0)break;
        recvfrom(fd,recvbuf,BUFF_LEN,0,(struct sockaddr*)&amp;src,&amp;len);
        fputs(recvbuf,stdout);

        memset(sendbuf,0,sizeof(sendbuf));
        memset(recvbuf,0,sizeof(recvbuf));
    }
}

/*
    client:
            socket--&gt;sendto--&gt;revcfrom--&gt;close
*/

int main(int argc, char* argv[])
{
    int client_fd;
    struct sockaddr_in ser_addr;

    client_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if(client_fd &lt; 0)
    {
        printf(&quot;create socket fail!\n&quot;);
        return -1;
    }

    memset(&amp;ser_addr, 0, sizeof(ser_addr));
    ser_addr.sin_family = AF_INET;
    //ser_addr.sin_addr.s_addr = inet_addr(SERVER_IP);
    ser_addr.sin_addr.s_addr = htonl(INADDR_ANY);  //注意网络序转换
    ser_addr.sin_port = htons(SERVER_PORT);  //注意网络序转换

    udp_msg_sender(client_fd, (struct sockaddr*)&amp;ser_addr);

    close(client_fd);

    return 0;
}
</code></pre><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><pre><code>#include 
#include 
#include 
#include 
#include 

#define SERVER_PORT 8888
#define BUFF_LEN 1024

void handle_udp_msg(int fd)
{
    char buf[BUFF_LEN];  //接收缓冲区，1024字节
    socklen_t len;
    int count;
    struct sockaddr_in clent_addr;  //clent_addr用于记录发送方的地址信息
    while(1)
    {
        memset(buf, 0, BUFF_LEN);
        len = sizeof(clent_addr);
        count = recvfrom(fd, buf, BUFF_LEN, 0, (struct sockaddr*)&amp;clent_addr, &amp;len);  //recvfrom是拥塞函数，没有数据就一直拥塞
        if(count == -1)
        {
            printf(&quot;recieve data fail!\n&quot;);
            return;
        }
        if(strcmp(buf,&quot;exit\n&quot;)==0)break;
        fputs(buf,stdout);
        for(int i=0;i&lt;count;i++){
            if(buf[i]&gt;=97&amp;&amp;buf[i]&lt;=122)buf[i]-=32;
        }
        sendto(fd, buf, BUFF_LEN, 0, (struct sockaddr*)&amp;clent_addr, len);  //发送信息给client，注意使用了clent_addr结构体指针

    }
}


/*
    server:
            socket--&gt;bind--&gt;recvfrom--&gt;sendto--&gt;close
*/

int main(int argc, char* argv[])
{
    int server_fd, ret;
    struct sockaddr_in ser_addr; 

    server_fd = socket(AF_INET, SOCK_DGRAM, 0); //AF_INET:IPV4;SOCK_DGRAM:UDP
    if(server_fd &lt; 0)
    {
        printf(&quot;create socket fail!\n&quot;);
        return -1;
    }

    memset(&amp;ser_addr, 0, sizeof(ser_addr));
    ser_addr.sin_family = AF_INET;
    ser_addr.sin_addr.s_addr = htonl(INADDR_ANY); //IP地址，需要进行网络序转换，INADDR_ANY：本地地址
    ser_addr.sin_port = htons(SERVER_PORT);  //端口号，需要网络序转换

    ret = bind(server_fd, (struct sockaddr*)&amp;ser_addr, sizeof(ser_addr));
    if(ret &lt; 0)
    {
        printf(&quot;socket bind fail!\n&quot;);
        return -1;
    }

    handle_udp_msg(server_fd);   //处理接收到的数据

    close(server_fd);
    return 0;
}
</code></pre><h3 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h3><p>udp_client</p>
<p><img src="http://function.dearamaze.com/udp_c.png" alt="client"></p>
<p>udp_server<br><img src="http://function.dearamaze.com/udp_s.png" alt="server"></p>
<h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><h2 id="TCP-1"><a href="#TCP-1" class="headerlink" title="TCP"></a>TCP</h2><h3 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h3><pre><code>#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  

#define MAXLINE 1024 

void usage(char *command) 
{ 
    printf(&quot;usage :%s ipaddr portnum filename\n&quot;, command); 
    exit(0); 
} 
int main(int argc,char **argv) 
{ 
    struct sockaddr_in serv_addr; 
    char buf[MAXLINE]; 
    int sock_id; 
    int read_len; 
    int send_len; 
    FILE *fp; 
    int i_ret; 

    if (argc != 4) { 
        usage(argv[0]); 
    } 

    /* open the file to be transported commented by guoqingbo*/ 
    if ((fp = fopen(argv[3],&quot;r&quot;)) == NULL) { 
        perror(&quot;Open file failed\n&quot;); 
        exit(0); 
    } 

    /* create the socket commented by guoqingbo*/ 
    if ((sock_id = socket(AF_INET,SOCK_STREAM,0)) &lt; 0) { 
        perror(&quot;Create socket failed\n&quot;); 
        exit(0); 
    } 

    memset(&amp;serv_addr, 0, sizeof(serv_addr)); 
    serv_addr.sin_family = AF_INET; 
    serv_addr.sin_port = htons(atoi(argv[2])); 
    inet_pton(AF_INET, argv[1], &amp;serv_addr.sin_addr); 

    /* connect the server commented by guoqingbo*/ 
    i_ret = connect(sock_id, (struct sockaddr *)&amp;serv_addr, sizeof(struct sockaddr)); 
    if (-1 == i_ret) { 
        printf(&quot;Connect socket failed\n&quot;); 
       return -1; 
    } 

    /* transported the file commented by guoqingbo*/ 
    bzero(buf, MAXLINE); 
    while ((read_len = fread(buf, sizeof(char), MAXLINE, fp)) &gt;0 ) { 
        send_len = send(sock_id, buf, read_len, 0); 
        if ( send_len &lt; 0 ) { 
            perror(&quot;Send file failed\n&quot;); 
            exit(0); 
        } 
        bzero(buf, MAXLINE); 
    } 

    fclose(fp); 
    close(sock_id); 
    printf(&quot;Send Finish\n&quot;); 
    return 0; 
}
</code></pre><h3 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h3><pre><code>#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  

#define MAXLINE 1024 

void usage(char *command) 
{ 
    printf(&quot;usage :%s portnum filename\n&quot;, command); 
    exit(0); 
} 
int main(int argc,char **argv) 
{ 
    struct sockaddr_in serv_addr; 
    struct sockaddr_in clie_addr; 
    char buf[MAXLINE]; 
    int sock_id; 
    int link_id; 
    int recv_len; 
    int write_leng; 
    int clie_addr_len; 
    FILE *fp; 

    if (argc != 3) { 
        usage(argv[0]); 
    } 
    if ((fp = fopen(argv[2], &quot;w&quot;)) == NULL) { 
        perror(&quot;Open file failed\n&quot;); 
        exit(0); 
    } 
    if ((sock_id = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) { 
        perror(&quot;Create socket failed\n&quot;); 
        exit(0); 
    } 
    /*fill the server sockaddr_in struct commented by guoqingbo*/ 
    memset(&amp;serv_addr, 0, sizeof(serv_addr)); 
    serv_addr.sin_family = AF_INET; 
    serv_addr.sin_port = htons(atoi(argv[1])); 
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); 

    if (bind(sock_id, (struct sockaddr *)&amp;serv_addr, sizeof(serv_addr)) &lt; 0 ) { 
        perror(&quot;Bind socket failed\n&quot;); 
        exit(0); 
    } 

    if (-1 == listen(sock_id, 10)) { 
        perror(&quot;Listen socket failed\n&quot;); 
        exit(0); 
    } 
    /* server part commented by guoqingbo*/ 
    while (1) { 
        clie_addr_len = sizeof(clie_addr); 
        link_id = accept(sock_id, (struct sockaddr *)&amp;clie_addr, &amp;clie_addr_len); 
        if (-1 == link_id) { 
            perror(&quot;Accept socket failed\n&quot;); 
            exit(0); 
        } 
        bzero(buf, MAXLINE); 
        while (recv_len = recv(link_id, buf, MAXLINE, 0)) { 
            /* receiver data part commented by guoqingbo*/ 
            if(recv_len &lt; 0) { 
                printf(&quot;Recieve Data From Server Failed!\n&quot;); 
                break; 
            } 
            printf(&quot;#&quot;); 
            write_leng = fwrite(buf, sizeof(char), recv_len, fp); 
            if (write_leng &lt; recv_len) { 
                printf(&quot;Write file failed\n&quot;); 
                break; 
            } 
            bzero(buf,MAXLINE); 
        } 
        printf(&quot;\nFinish Recieve\n&quot;); 
        fclose(fp); 
        close(link_id); 
    } 
    close(sock_id); 
    return 0; 
}
</code></pre><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p>tcp_file_client</p>
<p><img src="http://function.dearamaze.com/tcp_file_client.png" alt="tcp_file_client"></p>
<p>tcp_file_servier</p>
<p><img src="http://function.dearamaze.com/tcp_file_server.png" alt="tcp_file_servier"></p>
<h2 id="UDP-1"><a href="#UDP-1" class="headerlink" title="UDP"></a>UDP</h2><h3 id="客户端-3"><a href="#客户端-3" class="headerlink" title="客户端"></a>客户端</h3><pre><code>#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  

#define FINISH_FLAG &quot;FILE_TRANSPORT_FINISH&quot; 
#define MAXLINE 1024 

void usage(char *command) 
{ 
    printf(&quot;usage :%s ipaddr portnum filename\n&quot;, command); 
    exit(0); 
} 
int main(int argc,char **argv) 
{ 
    FILE *fp; 
    struct sockaddr_in serv_addr; 
    char buf[MAXLINE]; 
    int sock_id; 
    int read_len; 
    int send_len; 
    int serv_addr_len; 
    int i_ret; 
    int i; 

    if (argc != 4) { 
        usage(argv[0]); 
    } 
    /* open the file to be transported commanted by guoqingbo*/ 
    if ((fp = fopen(argv[3],&quot;r&quot;)) == NULL) { 
        perror(&quot;Open file failed\n&quot;); 
        exit(0); 
    } 
    /* create the socket commanted by guoqingbo*/ 
    if ((sock_id = socket(AF_INET, SOCK_DGRAM, 0)) &lt; 0) { 
        perror(&quot;Create socket failed&quot;); 
        exit(0); 
    } 
    memset(&amp;serv_addr,0,sizeof(serv_addr)); 
    serv_addr.sin_family = AF_INET; 
    serv_addr.sin_port = htons(atoi(argv[2])); 
    inet_pton(AF_INET, argv[1], &amp;serv_addr.sin_addr); 
    serv_addr_len = sizeof(serv_addr); 
    /* connect the server commanted by guoqingbo*/ 
    i_ret = connect(sock_id, (struct sockaddr *)&amp;serv_addr, sizeof(struct sockaddr)); 
    if (-1 == i_ret) { 
        perror(&quot;Connect socket failed!\n&quot;); 
        exit(0); 
    } 
    /* transport the file commented by guoqingbo*/ 
    bzero(buf, MAXLINE); 
    while ( (read_len = fread(buf, sizeof(char), MAXLINE, fp)) &gt; 0 ) { 
        send_len = send(sock_id, buf, read_len, 0); 
        if ( send_len &lt; 0 ) { 
            perror(&quot;Send data failed\n&quot;); 
            exit(0); 
        } 
        bzero(buf, MAXLINE); 
    } 
    fclose(fp); 
    /* send the end_flag commented by guoqingbo*/ 
    bzero(buf, MAXLINE); 
    strcpy(buf, FINISH_FLAG); 
    buf[strlen(buf)] = &#39;\0&#39;; 
    for (i = 1000; i&gt;0; i--) { 
        send_len = send(sock_id, buf, strlen(buf)+1, 0); 
        if ( send_len &lt; 0 ) { 
            printf(&quot;Finish send the end string\n&quot;); 
            break; 
        } 
    } 
    close(sock_id); 
    printf(&quot;Send finish\n&quot;); 
    return 0; 
}
</code></pre><h3 id="服务端-3"><a href="#服务端-3" class="headerlink" title="服务端"></a>服务端</h3><pre><code class="C">#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  
#include  

#define FINISH_FLAG &quot;FILE_TRANSPORT_FINISH&quot; 
#define MAXLINE 1024 

void usage(char *command) 
{ 
    printf(&quot;usage :%s portnum filename\n&quot;, command); 
    exit(0); 
} 
int main(int argc,char **argv) 
{ 
    struct sockaddr_in serv_addr; 
    struct sockaddr_in clie_addr; 
    char buf[MAXLINE]; 
    int sock_id; 
    int recv_len; 
    int clie_addr_len; 
    FILE *fp; 

    if (argc != 3) { 
        usage(argv[0]); 
    } 
    /* Create the the file commented by guoqingbo*/ 
    if ((fp = fopen(argv[2], &quot;w&quot;)) == NULL) { 
        perror(&quot;Creat file failed&quot;); 
        exit(0); 
    } 
    if ((sock_id = socket(AF_INET,SOCK_DGRAM,0)) &lt; 0) { 
        perror(&quot;Create socket failed\n&quot;); 
        exit(0); 
    } 
    /*fill the server sockaddr_in struct commented by guoqingbo*/ 
    memset(&amp;serv_addr,0,sizeof(serv_addr)); 
    serv_addr.sin_family = AF_INET; 
    serv_addr.sin_port = htons(atoi(argv[1])); 
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY); 

    if (bind(sock_id,(struct sockaddr *)&amp;serv_addr,sizeof(serv_addr)) &lt; 0 ) { 
        perror(&quot;Bind socket faild\n&quot;); 
        exit(0); 
    } 
    /* server part commented by guoqingbo*/ 
    clie_addr_len = sizeof(clie_addr); 
    bzero(buf, MAXLINE); 
    while (recv_len = recvfrom(sock_id, buf, MAXLINE, 0,(struct sockaddr *)&amp;clie_addr, &amp;clie_addr_len)) { 
        if(recv_len &lt; 0) { 
            printf(&quot;Recieve data from client failed!\n&quot;); 
            break; 
        } 
        printf(&quot;#&quot;); 
        if ( strstr(buf, FINISH_FLAG) != NULL ) { 
            printf(&quot;\nFinish receiver finish_flag\n&quot;); 
            break; 
        } 
        int write_length = fwrite(buf, sizeof(char), recv_len, fp); 
        if (write_length &lt; recv_len) { 
            printf(&quot;File write failed\n&quot;); 
            break; 
        } 
        bzero(buf, MAXLINE); 
    } 

    printf(&quot;Finish recieve\n&quot;); 
    fclose(fp); 
    close(sock_id); 
    return 0; 
}
</code></pre>
<h3 id="截图-1"><a href="#截图-1" class="headerlink" title="截图"></a>截图</h3><p>udp_file_client</p>
<p><img src="http://function.dearamaze.com/udp_file_client.png" alt="udp_file_client"></p>
<p>udp_file_server</p>
<p><img src="http://function.dearamaze.com/udp_file_server.png" alt="udp_file_client"></p>
]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 作业 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux块设备的详解]]></title>
      <url>/2017/03/27/linux%E5%9D%97%E8%AE%BE%E5%A4%87%E7%9A%84%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文讲解linux操作系统的块设备，linux快设备类型的根本区别在于它们是否可以被随机访问——换句话说就是，能否在访问设备时随意地从一个位置跳转到另一个位置。</p>
</blockquote>
<h2 id="linux块设备，字符设备"><a href="#linux块设备，字符设备" class="headerlink" title="linux块设备，字符设备"></a>linux块设备，字符设备</h2><pre><code>字符设备还是块设备的定义属于操作系统的设备访问层，与实际物理设备的特性无必然联系。设备访问层下面是驱动程序，所以只要驱动程序提供的方式，都可以。也就是说驱动程序支持stream方式，那么就可以用这种方式访问，驱动程序如果还支持block方式，那么你想用哪种方式访问都可以，典型的比如硬盘式的裸设备，两种都支持。
</code></pre><h2 id="块设备（blockdevice）"><a href="#块设备（blockdevice）" class="headerlink" title="块设备（blockdevice）"></a>块设备（blockdevice）</h2><blockquote>
<p>是一种具有一定结构的随机存取设备，对这种设备的读写是按块进行的，他使用缓冲区来存放暂时的数据，待条件成熟后，从缓存一次性写入设备或从设备中一次性读出放入到缓冲区，如磁盘和文件系统等</p>
</blockquote>
<h2 id="字符设备（Characterdevice）："><a href="#字符设备（Characterdevice）：" class="headerlink" title="字符设备（Characterdevice）："></a>字符设备（Characterdevice）：</h2><blockquote>
<p>这是一个顺序的数据流设备，对这种设备的读写是按字符进行的，而且这些字符是连续地形成一个数据流。他不具备缓冲区，所以对这种设备的读写是实时的，如终端、磁带机等。</p>
</blockquote>
<p>系统中能够随机（不需要按顺序）访问固定大小数据片（chunks）的设备被称作块设备，这些数据片就称作块。最常见的块设备是硬盘，除此以外，还有软盘驱动器、CD-ROM驱动器和闪存等等许多其他块设备。注意，它们都是以安装文件系统的方式使用的——这也是块设备一般的访问方式。<br>另一种基本的设备类型是字符设备。字符设备按照字符流的方式被有序访问，像串口和键盘就都属于字符设备。如果一个硬件设备是以字符流的方式被访问的话，那就应该将它归于字符设备；反过来，如果一个设备是随机（无序的）访问的，那么它就属于块设备。</p>
<p>linux块设备这两种类型的根本区别在于它们是否可以被随机访问——换句话说就是，能否在访问设备时随意地从一个位置跳转到另一个位置。举个例子，键盘这种设备提供的就是一个数据流，当你敲入“fox”这个字符串时，键盘驱动程序会按照和输入完全相同的顺序返回这个由三个字符组成的数据流。如果让键盘驱动程序打乱顺序来读字符串，或读取其他字符，都是没有意义的。所以键盘就是一种典型的字符设备，它提供的就是用户从键盘输入的字符流。对键盘进行读操作会得到一个字符流，首先是“f”，然后是“o”，最后是“x”，最终是文件的结束(EOF)。当没人敲键盘时，字符流就是空的。硬盘设备的情况就不大一样了。硬盘设备的驱动可能要求读取磁盘上任意块的内容，然后又转去读取别的块的内容，而被读取的块在磁盘上位置不一定要连续，所以说硬盘可以被随机访问，而不是以流的方式被访问，显然它是一个块设备。</p>
<p>内核管理块设备要比管理字符设备细致得多，需要考虑的问题和完成的工作相比字符设备来说要复杂许多。这是因为字符设备仅仅需要控制一个位置—当前位置—而块设备访问的位置必须能够在介质的不同区间前后移动。所以事实上内核不必提供一个专门的子系统来管理字符设备，但是对块设备的管理却必须要有一个专门的提供服务的子系统。不仅仅是因为块设备的复杂性远远高于字符设备，更重要的原因是块设备对执行性能的要求很高；对硬盘每多一分利用都会对整个系统的性能带来提升，其效果要远远比键盘吞吐速度成倍的提高大得多。</p>
]]></content>
      
        <categories>
            
            <category> linux系统知识 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据重删论文1]]></title>
      <url>/2017/03/27/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%88%A0%E8%AE%BA%E6%96%871/</url>
      <content type="html"><![CDATA[<h1 id="Dmdedup-Device-Mapper-Target-for-Data-Deduplication"><a href="#Dmdedup-Device-Mapper-Target-for-Data-Deduplication" class="headerlink" title="Dmdedup: Device Mapper Target for Data Deduplication"></a><a href="http://www.fsl.cs.sunysb.edu/docs/ols-dmdedup/dmdedup-ols14.pdf" target="_blank" rel="external">Dmdedup: Device Mapper Target for Data Deduplication</a></h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>dmdedup这个软件是一个适用于常规应用者和研究人员的,多功能实用性的主存数据重删平台.在块级别进行操作,对应用和系统都是有用的.因为大多数据重删研究,设计和完善了一个后端接口,方便研究人员,构建和评估元数据管理的方法.<br>通过下面三个方式,完善了后端:</p>
<ol>
<li>RAM_TAB:内存中的哈希表</li>
<li>DISK_TAB:磁盘哈希表</li>
<li>基于B树的DISK_TAB:持续的写时拷贝的B树</li>
</ol>
<p>主存重删与数据集备份相比带来的挑战有:</p>
<ol>
<li>访问局部性不太明显；</li>
<li>延迟的限制更严格；</li>
<li>更少的副本是可用的（约2×与备份10×）；</li>
<li>和重复数据删除引擎必须与其他进程竞争CPU和RAM。</li>
</ol>
<p>为了方便在主存储器中的重复数据删除技术的研究，我们开发了，这里提出了一个灵活的、完全可操作的主存储重复数据删除系统，Dmdedup，在Linux内核中实现。除了其吸引人的特性为普通用户，它可以作为实验的重复数据删除算法和研究主存储数据和工作负载的基础平台。</p>
<p>它和RAID , LVM 在同一层对linux内核块设备进行操作.</p>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="数据重删层面"><a href="#数据重删层面" class="headerlink" title="数据重删层面"></a>数据重删层面</h4><ol>
<li>应用层</li>
<li>文件系统层<br> 实现方式:<pre><code> 1. 修改现有的文件系统,比如EXT3或者WAFL.
 2. 在内核或者利用用户空间文件系统创建一个可折叠的文件系统.
 3. 从零开始实现一个重复数据删除的文件系统,比如,EMC 数据域的文件系统.
</code></pre></li>
<li>block level<br> 缺点:<pre><code> 1. 它必须保持一个额外的映射（超出文件系统的)逻辑和物理块之间的映射；
 2. 文件系统和应用程序有用的上下文丢失.
 3. variable length chunking is more difficult at the block layer. 
</code></pre></li>
</ol>
<h4 id="时效性"><a href="#时效性" class="headerlink" title="时效性"></a>时效性</h4><h3 id="DM-设备映射器"><a href="#DM-设备映射器" class="headerlink" title="DM:设备映射器"></a>DM:设备映射器</h3><p>Device Mapper 是 Linux2.6 内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的块设备驱动提供了一个高度模块化的内核架构.</p>
<h3 id="Dmdedup的组成"><a href="#Dmdedup的组成" class="headerlink" title="Dmdedup的组成"></a>Dmdedup的组成</h3><p><img src="http://function.dearamaze.com/Dmdedup_struct.png" alt="img"></p>
<ol>
<li>数据重删的逻辑,块存储,计算hash值,协调其他部件.</li>
<li>一个hash表,用来索引hash值与块的位置.</li>
<li>逻辑块号到物理块号的映射.</li>
<li>空间管理器,在物理设备上索引空间,定位新的块,维护计数,回收没有引用的块.</li>
<li>块存储.</li>
</ol>
<h3 id="写需求"><a href="#写需求" class="headerlink" title="写需求"></a>写需求</h3><h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>Dmdedup软件里的hash值生成方法,它支持30多种哈希函数(内核的加密库),作者实验用的是128位的MD5 hash值.<br>hash值不能太短,容易发生碰撞,不能太长,增加了元数据的大小.<br>磁盘发生错误的概率是10^(-18)—10^(-15),128位的hash串,发生碰撞的概率低于磁盘发生错误的概率.</p>
<h3 id="哈希索引和逻辑块号映射查询"><a href="#哈希索引和逻辑块号映射查询" class="headerlink" title="哈希索引和逻辑块号映射查询"></a>哈希索引和逻辑块号映射查询</h3><ol>
<li>利用hash索引物理块号<em>PBN(new)</em></li>
<li>利用逻辑块号映射物理块号<em>PBN(old)</em></li>
</ol>
<h3 id="元数据更新"><a href="#元数据更新" class="headerlink" title="元数据更新"></a>元数据更新</h3><p><img src="http://function.dearamaze.com/write_request_handling.png" alt="img"></p>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>垃圾回收,不是实时的,是一个离线的定时的回收.</p>
<h2 id="读请求控制"><a href="#读请求控制" class="headerlink" title="读请求控制"></a>读请求控制</h2><h2 id="后端元数据"><a href="#后端元数据" class="headerlink" title="后端元数据"></a>后端元数据</h2><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>强制:</p>
<ol>
<li>初始化</li>
<li>销毁</li>
<li>块的定位,查找,插入,删除,关联数的控制</li>
</ol>
<p>可选:</p>
<ol>
<li>垃圾回收</li>
<li>元数据同步写入</li>
</ol>
<h3 id="API类型"><a href="#API类型" class="headerlink" title="API类型"></a>API类型</h3><ol>
<li>线性(linear):Dmdedup uses a linear store (from zero to the size of the Dmdedup device)<br>for LBN mapping</li>
<li>稀疏型(sparse):and a sparse one for the hash index.</li>
</ol>
<h3 id="INRAM"><a href="#INRAM" class="headerlink" title="INRAM"></a>INRAM</h3><ol>
<li>重删的元数据一直存在RAM上</li>
<li>允许我们自定义给多少CPU用于重删.</li>
<li>他能很快算出工作负载的重删率</li>
<li>在电容和电池的支持下可用于生产环境</li>
</ol>
<p>用静态定位的哈希表用于键值存储,用一个数组用于线性存储.</p>
<p>线性映射数组的大小基于目标实例的大小.</p>
<p>用于离散存储的哈希表的大小基于数据设备的大小(预测最多可能有的不同数据块的数目).</p>
<p>用数组记录关联数</p>
<p>用数组定位新的块</p>
<h3 id="DTB"><a href="#DTB" class="headerlink" title="DTB"></a>DTB</h3><p>和INRAM用了相同的数据结构,但是是将数据保存在硬盘上(持久存储体).<br>没有缓冲区的话,每一次操作都是一次IO,严重影响dmdedup的性能. 我们用了Linux的<code>dm-bufio</code>子系统.</p>
<h3 id="CBT"><a href="#CBT" class="headerlink" title="CBT"></a>CBT</h3><p><a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html" target="_blank" rel="external">Linux写时拷贝技术(copy-on-write)</a></p>
<p><a href="http://blog.csdn.net/v_JULY_v/article/details/6530142" target="_blank" rel="external">B树</a></p>
<h3 id="设备大小"><a href="#设备大小" class="headerlink" title="设备大小"></a>设备大小</h3><p>设备逻辑大小可以改变</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="实验组设置"><a href="#实验组设置" class="headerlink" title="实验组设置"></a>实验组设置</h3><ol>
<li>原生的设备</li>
<li>INRAM</li>
<li>DTB</li>
<li>CBT</li>
</ol>
<p>元数据cache大小设置:<br><code>0.3%</code> <code>25%</code> <code>50%</code> <code>75%</code> <code>100%</code> <code>135%</code></p>
<h3 id="Dmdedup"><a href="#Dmdedup" class="headerlink" title="Dmdedup"></a>Dmdedup</h3><p>通过连续的和随机的读写来测试其性能.</p>
<h4 id="Micro-workloads"><a href="#Micro-workloads" class="headerlink" title="Micro-workloads"></a>Micro-workloads</h4><p>三种工作负载:</p>
<ol>
<li>Unique,独一无二的数据:通过linux的<code>/dev/urandom</code> 设备产生的.</li>
<li>All-duplicates,全是重复的:每个块4kb,重复146GB</li>
<li>linux-kernel : 40个linux内核</li>
</ol>
<p>两种类型:</p>
<ol>
<li>大量的连续写(I/O SIZE: 640KB)</li>
<li>少量的随机写(I/O SIZE: 4KB)</li>
</ol>
<h5 id="Unique"><a href="#Unique" class="headerlink" title="Unique"></a>Unique</h5><p>连续写:</p>
<p>重删率是1,不包括元数据.这种情况下重删系统的性能是最差的,因为重删的工作还得做.INRAM的性能和原生设备的一样(这是在CPU和RAM足够快去做数据重删,没有任何明显的性能影响的情况下),CPU的使用率在65%.</p>
<p>元数据的更新确实是个瓶颈,4M大小的cache下,DTB的性能仅有原生设备的25%,cache大小在75%-100%之间,性能得到了很大的提升,因为100%的cache不需要元数据的读了,135%的cache下,元数据的写也避免了,所以DTB达到了INRAM的性能.</p>
<p>随机写:<br>原生的设备实现了420IOPS,Dmdedup比原生的要好很多,670-11100IOPS,因为他使随机的写变得有序,连续的定位新的块是重删系统的一个一般的策略.</p>
<h4 id="All-duplicates"><a href="#All-duplicates" class="headerlink" title="All-duplicates"></a>All-duplicates</h4><h4 id="Linux-Kernels"><a href="#Linux-Kernels" class="headerlink" title="Linux Kernels"></a>Linux Kernels</h4><h3 id="Trace-Replay"><a href="#Trace-Replay" class="headerlink" title="Trace Replay"></a>Trace Replay</h3><ol>
<li>Web</li>
<li>Mail</li>
<li>Homes </li>
</ol>
]]></content>
      
        <categories>
            
            <category> 数据重删 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据重删 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[要完成的任务]]></title>
      <url>/2017/03/24/%E8%A6%81%E5%AE%8C%E6%88%90%E7%9A%84%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="终极目标"><a href="#终极目标" class="headerlink" title="终极目标"></a>终极目标</h2><pre><code>阿里,腾讯运维研发岗位
</code></pre><h2 id="要完成的任务"><a href="#要完成的任务" class="headerlink" title="要完成的任务"></a>要完成的任务</h2><ol>
<li>shell精通</li>
<li>python精通</li>
<li>计算机网络,操作系统,数据结构与算法</li>
<li>常用服务器的搭建,配置,调优,监控</li>
</ol>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>网络编程</p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>Unix环境高级编程</p>
<h3 id="服务器的搭建-配置-调优"><a href="#服务器的搭建-配置-调优" class="headerlink" title="服务器的搭建,配置,调优"></a>服务器的搭建,配置,调优</h3><h3 id="运维软件工具"><a href="#运维软件工具" class="headerlink" title="运维软件工具"></a>运维软件工具</h3><h3 id="虚拟化docker-openstack"><a href="#虚拟化docker-openstack" class="headerlink" title="虚拟化docker,openstack"></a>虚拟化docker,openstack</h3><h3 id="自动化运维-理念-编程"><a href="#自动化运维-理念-编程" class="headerlink" title="自动化运维:理念,编程"></a>自动化运维:理念,编程</h3>]]></content>
      
        <categories>
            
            <category> 日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]C++文件操作]]></title>
      <url>/2017/03/15/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<pre><code>string  getFileContext(const string&amp;amp; filename)
{
    string str;
    str.clear();
    char buf[1024];
    char *p;
    p = buf;
    memset(buf, 0, 1024);
    ifstream in;
    in.open(filename);
    while ((*p = in.get()) != EOF)
    {
        p++;
    }
    cout &amp;lt;&amp;lt; &quot;Buf&quot; &amp;lt;&amp;lt; endl;
    puts(buf);
    str += buf;
    cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl;
    in.close();
    return str;
}


            作者：qq_27803491 发表于2017/3/15 11:22:40 [原文链接](http://blog.csdn.net/qq_27803491/article/details/62217799)


        阅读：13 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/62217799#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]ubuntu16.04 安装shadowsocks,番羽土啬]]></title>
      <url>/2017/02/27/ubuntu16-04-%E5%AE%89%E8%A3%85shadowsocks-%E7%95%AA%E7%BE%BD%E5%9C%9F%E5%95%AC/</url>
      <content type="html"><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol>
<li>安装shadowsocks-qt5</li>
</ol>
<p><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97" target="_blank" rel="external">统一安装教程</a><br>        ubuntu16.04安装,执行如下命令:</p>
<pre><code>sudo add-apt-repository ppa:hzwhuang/ss-qt5
sudo apt-get update
sudo apt-get install shadowsocks-qt5`
`完成之后,在图形界面下找到shadowsocks-qt5的图标启动,或者命令行运行:/usr/bin/ss-qt5
然后配置ss,connection--&amp;gt;add--&amp;gt;manually--&amp;gt;填写相关参数
`
</code></pre><ol>
<li><p>配置chrome浏览器<br>下载chrome插件:<a href="https://github.com/FelisCatus/SwitchyOmega/releases/download/v2.3.21/SwitchyOmega.crx" target="_blank" rel="external">SwitchyOmega2.3.21下载地址</a>   ////分隔符/////     <a href="https://github.com/FelisCatus/SwitchyOmega/releases/" target="_blank" rel="external">SwitchyOmega最新版网址</a>    安装该插件(不会安装,百度crx插件安装办法)    然后配置该插件,参考:</p>
<pre><code>1.  设置代理地址    安装好插件会自动跳到设置选项，有提示你可以跳过。左边新建情景模式-选择代理服务器-比如命名为SS（叫什么无所谓）其他默认之后创建，之后在代理协议选择SOCKS5，地址为127.0.0.1,端口默认1080 。然后保存即应用选项。![1](https://aitanlu.com/wp-content/uploads/2016/04/shadowsocks-0.png)![2](https://aitanlu.com/wp-content/uploads/2016/04/shadowsocks-1.png)
</code></pre><ol>
<li>设置自动切换    接着点击自动切换 ( Auto switch）上面的不用管，在按照规则列表匹配请求后面选择刚才新建的SS，默认情景模式选择直接连接。点击应用选项保存。再往下规则列表设置选择AutoProxy 然后将这个地址填进去，点击下面的立即更新情景模式，会有提示更新成功！<img src="https://aitanlu.com/wp-content/uploads/2016/04/shadowsocks-2.png" alt="3"> 图片中7填写的是:    <code>https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</code><pre><code>1.  然后就可以成功打开 google.com 了![这里写图片描述](http://img.blog.csdn.net/20170227200806973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjc4MDM0OTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)
</code></pre></li>
</ol>
</li>
<li>开机启动<br>运行:<br>`gnome-session-properties</li>
</ol>
<p>打开这个,然后添加<br>    <img src="http://www.afox.cc/wp-content/uploads/2015/07/2015-07-11-171133%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="4"><br>    如下填写后保存退出即可!<br>    <img src="http://www.afox.cc/wp-content/uploads/2015/07/2015-07-11-171220%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="5"></p>
<h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ol>
<li><a href="http://www.jianshu.com/p/9b7725d50f4c" target="_blank" rel="external">ubuntu16.04下载安装shadowsocks+配置chrome的过程记录</a></li>
<li><a href="https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html" target="_blank" rel="external">linux-ubuntu使用shadowsocks客户端配置</a></li>
<li><p><a href="http://www.afox.cc/archives/83" target="_blank" rel="external">ubuntu 使用图形化配置 shadowsocks -qt5 开机自动启动（配置开机启动）</a></p>
<pre><code>        作者：qq_27803491 发表于2017/2/27 20:11:34 [原文链接](http://blog.csdn.net/qq_27803491/article/details/58233565)
</code></pre></li>
</ol>
<pre><code>        阅读：20 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/58233565#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]C申请内存函数]]></title>
      <url>/2017/02/23/C%E7%94%B3%E8%AF%B7%E5%86%85%E5%AD%98%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<pre><code>#include &amp;lt;iostream&amp;gt;
using namespace std;

//传值调用
void GetMemory( char **p )
{
    *p = (char *) malloc( 100 );
}
//引用调用
void GetMemory_1(char *&amp;amp;p)
{
    p = (char *) malloc (100);
}

int main()
{
    char *str = NULL;
    char *str1 = NULL;
    GetMemory( &amp;amp;str );
    GetMemory_1( str1 );
    strcpy( str, &quot;hello world&quot; );
    strcpy( str1, &quot;hello world1&quot; );
    cout&amp;lt;&amp;lt;str&amp;lt;&amp;lt;endl;
    cout&amp;lt;&amp;lt;str1&amp;lt;&amp;lt;endl;
    free(str);
    free(str1);
    return 0;

}


            作者：qq_27803491 发表于2017/2/23 18:04:15 [原文链接](http://blog.csdn.net/qq_27803491/article/details/56677396)


        阅读：20 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/56677396#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]markdown 语法]]></title>
      <url>/2017/02/08/markdown-%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器写博客"><a href="#欢迎使用Markdown编辑器写博客" class="headerlink" title="欢迎使用Markdown编辑器写博客"></a>欢迎使用Markdown编辑器写博客</h1><p>本Markdown编辑器使用[StackEdit][6]修改而来，用它写博客，将会带来全新的体验哦：</p>
<ul>
<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>
<li><strong>代码块高亮</strong></li>
<li><strong>图片链接和图片上传</strong></li>
<li><strong><em>LaTex</em>数学公式</strong></li>
<li><strong>UML序列图和流程图</strong></li>
<li><strong>离线写博客</strong></li>
<li><strong>导入导出Markdown文件</strong></li>
<li><strong>丰富的快捷键</strong></li>
</ul>
<hr>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>加粗    <code>Ctrl + B</code><em>   斜体    <code>Ctrl + I</code></em>   引用    <code>Ctrl + Q</code></li>
<li>插入链接    <code>Ctrl + L</code></li>
<li>插入代码    <code>Ctrl + K</code></li>
<li>插入图片    <code>Ctrl + G</code></li>
<li>提升标题    <code>Ctrl + H</code></li>
<li>有序列表    <code>Ctrl + O</code></li>
<li>无序列表    <code>Ctrl + U</code></li>
<li>横线    <code>Ctrl + R</code></li>
<li>撤销    <code>Ctrl + Z</code></li>
<li>重做    <code>Ctrl + Y</code></li>
</ul>
<h2 id="Markdown及扩展"><a href="#Markdown及扩展" class="headerlink" title="Markdown及扩展"></a>Markdown及扩展</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="external"> [ 维基百科 ]</a></p>
</blockquote>
<p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.csdn.net" target="_blank" rel="external">链接</a>等，详细语法参考帮助？。</p>
<p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href="https://github.com/jmcmanus/pagedown-extra" title="Pagedown Extra" target="_blank" rel="external">Github</a>.  </p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p>
<p>  项目<br>  价格</p>
<p>  Computer<br>  $1600</p>
<p>  Phone<br>  $12</p>
<p>  Pipe<br>  $1</p>
<p>可以使用冒号来定义对齐方式：</p>
<p>  项目<br>  价格<br>  数量</p>
<p>  Computer<br>  1600 元<br>  5</p>
<p>  Phone<br>  12 元<br>  12</p>
<p>  Pipe<br>  1 元<br>  234</p>
<h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>定义 A</p>
<p>定义 B</p>
<p>项目３<br>定义 C</p>
<p>定义 D</p>
<blockquote>
<p>定义D内容</p>
</blockquote>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：</p>
<pre><code>@requires_authorization
def somefunc(param1=&#39;&#39;, param2=0):
    &#39;&#39;&#39;A docstring&#39;&#39;&#39;
    if param1 &amp;gt; param2: # interesting
        print &#39;Greater&#39;
    return (param2 - param1 + 1) or None
class SomeClass:
    pass
&amp;gt;&amp;gt;&amp;gt; message = &#39;&#39;&#39;interpreter
... prompt&#39;&#39;&#39;
</code></pre><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>生成一个脚注<a href="#fn:footnote" title="See footnote">1</a>.</p>
<ul>
<li><p><a href="#欢迎使用markdown编辑器写博客">欢迎使用Markdown编辑器写博客</a></p>
<pre><code>*   [快捷键](#快捷键)
</code></pre><ul>
<li><p><a href="#markdown及扩展">Markdown及扩展</a></p>
<pre><code>    *   [表格](#表格)
</code></pre><ul>
<li><a href="#定义列表">定义列表</a></li>
<li><a href="#代码块">代码块</a></li>
<li><a href="#脚注">脚注</a></li>
<li><a href="#数学公式">数学公式</a></li>
<li><p><a href="#uml-图">UML 图</a></p>
</li>
<li><p><a href="#离线写博客">离线写博客</a></p>
</li>
</ul>
</li>
<li><a href="#浏览器兼容">浏览器兼容</a></li>
</ul>
</li>
</ul>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/" target="_blank" rel="external">math.stackexchange.com</a>.</p>
<ul>
<li>行内公式，数学公式为：Γ(n)=(n−1)!∀n∈N\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N。</li>
<li>块级公式：</li>
</ul>
<p>x=−b±b2−4ac−−−−−−−√2a    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} </p>
<p>更多LaTex语法请参考 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">这儿</a>.</p>
<h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p>
<p>Created with Raphaël 2.1.0张三张三李四李四嘿，小四儿, 写博客了没?李四愣了一下，说：忙得吐血，哪有时间写。</p>
<p>或者流程图：</p>
<p>Created with Raphaël 2.1.0开始我的操作确认？结束yesno</p>
<ul>
<li>关于 <strong>序列图</strong> 语法，参考 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">这儿</a>,</li>
<li>关于 <strong>流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">这儿</a>.</li>
</ul>
<h2 id="离线写博客"><a href="#离线写博客" class="headerlink" title="离线写博客"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href="http://write.blog.csdn.net/mdeditor" target="_blank" rel="external">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p>
<p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p>
<p>博客发表后，本地缓存将被删除。　</p>
<p>用户可以选择  把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p>
<blockquote>
<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p>
</blockquote>
<h2 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h2><ol>
<li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li>
<li>IE９以下不支持</li>
<li><p>IE９，１０，１１存在以下问题</p>
<pre><code>1.  不支持离线功能
</code></pre><ol>
<li>IE9不支持文件导入导出</li>
<li>IE10不支持拖拽文件导入</li>
</ol>
</li>
</ol>
<hr>
<hr>
<ol>
<li><p>这里是 <strong>脚注</strong> 的 <em>内容</em>.</p>
<p>目录</p>
<p>用 <code>[TOC]</code>来生成目录：<br>[6]: <a href="https://github.com/benweet/stackedit" target="_blank" rel="external">https://github.com/benweet/stackedit</a> <a href="#fnref:footnote" title="Return to article">↩</a></p>
<pre><code>        作者：qq_27803491 发表于2017/2/8 22:19:58 [原文链接](http://blog.csdn.net/qq_27803491/article/details/54933885)
</code></pre></li>
</ol>
<pre><code>        阅读：19 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/54933885#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]大三寒假(2017.1.18)]]></title>
      <url>/2017/01/18/%E5%A4%A7%E4%B8%89%E5%AF%92%E5%81%87-2017-1-18/</url>
      <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ol>
<li>shell脚本精通,linux命令行与shell脚本编程大全,linux shell脚本攻略,awk&amp;sed,ABS(1h/day)</li>
<li>linux环境编程(15*4h=60h)</li>
<li>docker(10h)</li>
<li>高性能linux服务器构建实战(14*4=56h)</li>
<li>英语六级(0.5h/day)</li>
<li>每日编程(1h/day)</li>
<li>CCNA考试认证(1h/day)</li>
<li>考驾照,练车</li>
</ol>
<p>3.5*30=105+60+10+56=231+60=291h</p>
<pre><code>每天10h,吃饭2h,睡觉10h,加油,得良!!!


            作者：qq_27803491 发表于2017/1/18 13:59:53 [原文链接](http://blog.csdn.net/qq_27803491/article/details/54600137)


        阅读：17 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/54600137#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]高斯消元（混合颜料）]]></title>
      <url>/2017/01/05/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%EF%BC%88%E6%B7%B7%E5%90%88%E9%A2%9C%E6%96%99%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="题目（网易2017内推编程题（二）的第一题）"><a href="#题目（网易2017内推编程题（二）的第一题）" class="headerlink" title="题目（网易2017内推编程题（二）的第一题）"></a>题目（网易2017内推编程题（二）的第一题）</h2><p>你就是一个画家！你现在想绘制一幅画，但是你现在没有足够颜色的颜料。为了让问题简单，我们用正整数表示不同颜色的颜料。你知道这幅画需要的n种颜色的颜料，你现在可以去商店购买一些颜料，但是商店不能保证能供应所有颜色的颜料，所以你需要自己混合一些颜料。混合两种不一样的颜色A和颜色B颜料可以产生(A XOR B)这种颜色的颜料(新产生的颜料也可以用作继续混合产生新的颜色,XOR表示异或操作)。本着勤俭节约的精神，你想购买更少的颜料就满足要求，所以兼职程序员的你需要编程来计算出最少需要购买几种颜色的颜料？  </p>
<p>输入描述: </p>
<p>第一行为绘制这幅画需要的颜色种数n (1 ≤ n ≤ 50) </p>
<p>第二行为n个数xi(1 ≤ xi ≤ 1,000,000,000)，表示需要的各种颜料.</p>
<p>输出描述: </p>
<p>输出最少需要在商店购买的颜料颜色种数，注意可能购买的颜色不一定会使用在画中，只是为了产生新的颜色。</p>
<p>输入例子: </p>
<p>3 </p>
<p>1 7 3</p>
<p>输出例子: </p>
<p>3</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><pre><code>该题是利用行列式解决异或问题，通过求行列式的秩来求最少需要多少种颜色，没接触过这种题目的同学应该很难将它们联系到一块，不过仔细想想：
化简行列式的过程与本题求解的过程，这道题，你上来如果暴力的话，复杂度O(n^3),而且可能会涉及到重复的计算。利用行列式化简（高斯消元）的方法，就是利用到了：
7：0111
3：0011
2：0010
1：0001
这样的话，7是不可能被异或得出来的，因为他的最高位为1，其他数的最高位为0，而行列式化简，化简成上三角行列式也相同的过程。
本题中只涉及到二进制的异或化简，所以利用高斯消元法较为简单。
`

## 代码

`
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;cstring&amp;gt;
#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;vector&amp;gt;

using namespace std;
int getbit(int x)
{
    int cnt=0;
    while(x){
        x&amp;gt;&amp;gt;=1;
        cnt++;
    }
    return cnt;
 } 
bool cmp(const int&amp;amp; a,const int&amp;amp; b)
{
    return a&amp;gt;b;
}
int main()
{
    int n;
    while(scanf(&quot;%d&quot;,&amp;amp;n)!=EOF){
        vector&amp;lt;int&amp;gt; v;
        int ans=0;
        for(int i=0;i&amp;lt;n;i++){
            int a;
            scanf(&quot;%d&quot;,&amp;amp;a);
            v.push_back(a);
        }
        while(v.size()&amp;gt;=1){
            sort(v.begin(),v.end(),cmp);
            if(v[0]==0){
                ans+=v.size();
                break;
            }
            vector&amp;lt;int&amp;gt;::iterator it=v.begin();
            int fnb=getbit(v[0]);
            for(++it;it!=v.end();it++){
                if(getbit(*it)==fnb){
                    (*it)=(*it)^v[0];
                }
                else break;
            }
            v.erase(v.begin());
        }
        cout&amp;lt;&amp;lt;n-ans&amp;lt;&amp;lt;endl;
    }
    return 0;
}
/*
15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
*/
</code></pre><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol>
<li>熟悉了高斯消元法求解化简行列式，高斯（约当）消元法：就是每次把要消去位上含有最大的元素的行调到最高的地方。</li>
<li><p>了解了异或运算与行列式化简的联系。</p>
<pre><code>        作者：qq_27803491 发表于2017/1/5 12:33:55 [原文链接](http://blog.csdn.net/qq_27803491/article/details/54091966)
</code></pre></li>
</ol>
<pre><code>        阅读：31 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/54091966#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]googleSRE运维——减少琐事]]></title>
      <url>/2016/12/29/googleSRE%E8%BF%90%E7%BB%B4%E2%80%94%E2%80%94%E5%87%8F%E5%B0%91%E7%90%90%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h2 id="琐事的属性"><a href="#琐事的属性" class="headerlink" title="琐事的属性"></a>琐事的属性</h2><ol>
<li>手动性的</li>
<li>重复性的</li>
<li>可以被自动化的</li>
<li>战术性的（不是太懂，原文是这样的）：琐事是突然出现的、对应式的工作，而非策略驱动和主动安排的。处理紧急警报是琐事。我们可能永远都无法完全消除这种类型的工作，但我们必须继续努力减少它。</li>
<li>没有持久价值</li>
<li>与服务同步线性增长</li>
</ol>
<h2 id="琐事过多的危害"><a href="#琐事过多的危害" class="headerlink" title="琐事过多的危害"></a>琐事过多的危害</h2><ol>
<li>职业停滞</li>
<li>士气低落</li>
<li>造成误解</li>
<li>进展缓慢</li>
<li>开创先例：如果SRE过于愿意承担琐事，研发同事就更倾向于加入更多的琐事，有时候甚至将本来研发团队应承担的运维工作转给SRE来承担。其他团队也会开始指望SRE来接受这样的工作，这显然是不好的。</li>
<li>促进摩擦产生</li>
<li>违反承诺</li>
</ol>
<h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><pre><code>    通过工程工作（符合长期战略的会对你的服务进行长久性的改善的工作）消除一点点的琐事，就可以持续行地整顿服务。我们可以将更多的力量投入到扩大服务规模的工程工作上去，或者是进行下一代的服务的架构设计，又或者是建立一套跨SRE使用的工具链。
    多做创新，少干琐事。
</code></pre><h2 id="对生或中琐事的思考（待续，过一个有条理的生活，因为对我来说，有条理就是自信、充实）"><a href="#对生或中琐事的思考（待续，过一个有条理的生活，因为对我来说，有条理就是自信、充实）" class="headerlink" title="对生或中琐事的思考（待续，过一个有条理的生活，因为对我来说，有条理就是自信、充实）"></a>对生或中琐事的思考（待续，过一个有条理的生活，因为对我来说，有条理就是自信、充实）</h2><h3 id="生活中的琐事"><a href="#生活中的琐事" class="headerlink" title="生活中的琐事"></a>生活中的琐事</h3><ol>
<li>刷空间</li>
<li>刷朋友圈</li>
</ol>
<h3 id="生活中的不可避免的事情"><a href="#生活中的不可避免的事情" class="headerlink" title="生活中的不可避免的事情"></a>生活中的不可避免的事情</h3><ol>
<li>日常洗漱</li>
<li>睡觉</li>
<li>吃饭</li>
<li>学习</li>
<li>工作</li>
</ol>
<h3 id="生活中有意义的能够使自己变得优秀的事情"><a href="#生活中有意义的能够使自己变得优秀的事情" class="headerlink" title="生活中有意义的能够使自己变得优秀的事情"></a>生活中有意义的能够使自己变得优秀的事情</h3><ol>
<li>看书</li>
<li>跑步</li>
<li>看一些有意义的电影</li>
<li><p>拍照发现生活中细小的美</p>
<pre><code>        作者：qq_27803491 发表于2016/12/29 17:37:17 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53930796)
</code></pre></li>
</ol>
<pre><code>        阅读：68 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53930796#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]运维之下 笔记 三（运维平台）]]></title>
      <url>/2016/12/22/%E8%BF%90%E7%BB%B4%E4%B9%8B%E4%B8%8B-%E7%AC%94%E8%AE%B0-%E4%B8%89%EF%BC%88%E8%BF%90%E7%BB%B4%E5%B9%B3%E5%8F%B0%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="两大运维平台："><a href="#两大运维平台：" class="headerlink" title="两大运维平台："></a>两大运维平台：</h2><pre><code> 1\. 资产管理平台
         负责记录基础的物理信息；
         主要用户是系统运维工程师，他们关注设备的出入、维修等管理工作，交付资源给上层业务；
 2\. 服务管理平台 
         记录业务运维所需要的逻辑信息，提供一个基于树状结构（服务树）和权限绑定的管理模式。
         用户主要是应用运维工程师、研发工程师和测试工程师，他们关注服务运行的相关数据。

3.
资产管理平台负责底层的物理信息管理，提供API供服务管理平台查询和同步。服务管理平台通过API获取新交付的服务器列表及其详细信息，将它们归属到服务树产品线节点，分配对应的权限。应用运维工程师在服务树上领取空闲服务器，进行一系列的环境初始化、服务部署、监控添加等工作。应用运维工程师在服务管理平台提交报修申请、服务器归还等操作，通过API将信息推送到资产管理平台，由系统运维工程师进行相应处理。


            作者：qq_27803491 发表于2016/12/22 17:09:37 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53817172)


        阅读：119 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53817172#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]python3.4 验证码识别]]></title>
      <url>/2016/12/20/python3-4-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>需要安装 </p>
<p>pillow、pytesseract、tesseract-ocr</p>
<pre><code>import pytesseract
from PIL import Image
image = Image.open(&#39;C:/Users/Dear/Pictures/code_img/2.jpg&#39;)
vcode = pytesseract.image_to_string(image)
print (vcode)


            作者：qq_27803491 发表于2016/12/20 22:40:29 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53770867)


        阅读：147 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53770867#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]python3.4 信息门户登录请求]]></title>
      <url>/2016/12/20/python3-4-%E4%BF%A1%E6%81%AF%E9%97%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="python-post请求"><a href="#python-post请求" class="headerlink" title="python  post请求"></a>python  post请求</h2><pre><code>import requests
url = &#39;http://xx.xxxx.edu.cn/userPasswordValidate.portal&#39;
user=20160001
parms={
    &#39;Login.Token1&#39;: user,
    &#39;Login.Token2&#39;: &#39;123456&#39;,
    &#39;captchaField&#39;: &#39;485c&#39;
}

headers = {
    &#39;Connection&#39;:&#39;keep-alive&#39;,
    &#39;Content-Length&#39;: &#39;174&#39;,
    &#39;Cache-Control&#39;: &#39;max-age=0&#39;,
    &#39;Origin&#39;: &#39;http://xx.xxxx.edu.cn&#39;,
    &#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;,
    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&#39;,
    &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,
    &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#39;,
    &#39;Referer&#39;: &#39;http://xx.xxxx.edu.cn/&#39;,
    &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,
    &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8&#39;,
    &#39;Cookie&#39;: &#39;JSESSIONID=0000O1UhImqKAdSpqQwJ6Nz9Tow:17kv91lok&#39;
}

resp = requests.post(url, data=parms, headers=headers)
text = resp.text
print(text)


            作者：qq_27803491 发表于2016/12/20 22:31:02 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53770779)


        阅读：51 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53770779#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]python字符串方法基础]]></title>
      <url>/2016/12/20/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<pre><code>#FIND
mystr=&#39;xxxSPAMxxx&#39;
site=mystr.find(&#39;SPAM&#39;)
print(site)

#replace
mystr=&#39;xxaaxxaa&#39;
print(mystr.replace(&#39;aa&#39;,&#39;SPAM&#39;))

#in
mystr=&quot;xxxspamxxx&quot;
print(&#39;spam&#39; in mystr)

#strip
mystr=&#39;\t Ni\n&#39;
print(mystr)
print(mystr.strip())
print(mystr.rstrip())
print(mystr.lstrip())

#lower
mystr=&#39;SHRUBBERY&#39;
print(mystr.lower())

#isalpha
print(mystr.isalpha())

#isdigit
print(mystr.isdigit())

#split
mystr=&#39;aaa,bbb,ccc&#39;
print(mystr.split(&#39;,&#39;))
#split 默认分隔符为泛空格符
mystr=&#39;a b\nc\n d &#39;
print(mystr.split())

#join
delim=&#39;ni&#39;
print(delim.join([&#39;aaa&#39;,&#39;bbb&#39;,&#39;ccc&#39;]))
print(&#39; &#39;.join([&#39;aaa&#39;,&#39;bbb&#39;,&#39;ccc&#39;]))

#list
chars=list(&#39;lorreta&#39;)
print(chars)

chars.append(&#39;!&#39;)
print(&#39;&#39;.join(chars))

#整形和字符串类型转换
int(&quot;42&quot;)
eval(&quot;42&quot;)

str(42)
repr(42)

print(&quot;%d&quot; %42)
print(&#39;{:d}&#39;.format(42))


            作者：qq_27803491 发表于2016/12/20 12:45:17 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53761679)


        阅读：34 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53761679#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]Linux文件压缩及归档]]></title>
      <url>/2016/11/19/Linux%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9%E5%8F%8A%E5%BD%92%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h1 id="压缩-解压缩命令"><a href="#压缩-解压缩命令" class="headerlink" title="压缩  解压缩命令"></a>压缩  解压缩命令</h1><h2 id="压缩格式"><a href="#压缩格式" class="headerlink" title="压缩格式:"></a>压缩格式:</h2><pre><code>gz,bz2,xz,zip,
压缩算法不同,压缩比也会不同;
`

## 压缩命令

`*不支持压缩目录*
`

### 早期:compress:FILENAME.Z

`    umcompress
`

### gzip: .gz

`    gzip /PATH/TO/SOURCEFILE 压缩完成后会删除原文件
        -d:解压
        -#:(1-9)指定压缩比,默认为6;

    gunzip:
        gunzip /PATH/TO/SOMEFILE.gz :解压完成后会删除原文件
        zcat /PATH/TO/SOMEFILE.gz 表示在不解压的情况下,查看文本文件的内容
`

### bzip2: .bz2

`    比gzip有着更强大的压缩比的压缩工具,使用格式类似
    -d:
    -#:(1-9)
    -k:压缩时保留原文件

    bunzip2:解压

    bzcat:同zcat
`

### xz: .xz

`    压缩比更大,用法同bzip2

    unxz:解压
    xzdec,解压.xz压缩文件,
    xzcat:
`

### zip:(压缩比较小)(归档而且压缩)

`    $:zip FILENAME.zip file1 file2 ... : 压缩,且不删除原文件
    unzip:
        unzip FILENAME.zip
`

## archive:归档,归档本身并不意味着压缩

### tar:(归档工具)

`    -c :创建归档文件
    -f FILE.tar : 操作的归档文件
    -x :展开归档
    --xattrs:归档时保留其扩展属性信息
    $:tar -cf FILE.tar file1 file2 ... (归档命令)
    $:tar -xf FILE.tar (展开归档命令)
    $:tar -tf FILE.tar (不展开文件,查看归档了哪些文件)
    -zcf:归档并调用gzip压缩
    -zxf:调用gzip解压并展开压缩文件(解压时,z选项可省略,下面的解压,j,J都可省略)

    -jcf:调用bzip2
    -jxf:

    -Jcf:调用xz
    -Jxf:
`

### cpio:归档工具

## 补充

### read命令

`read:
    后面加上要输入的变量名
    -p:打印内容,并输入
        $:read -p &quot;打印的内容&quot; a b ...
`

### echo

`echo:
    -n:不换行
`

### 压缩文件的小脚本

`#!/bin/bash

read -p &quot;Please input files&#39; name,which you want to compress:&quot; FILENAME
read -p &quot;Please input Destination:&quot; DEST 
read -p &quot;Please input the compress type :&quot; TYPE 

case $TYPE in 
gzip)
    tar -zcf ${DEST}.tar.gz ${FILENAME} 
    ;;
bzip2)
    tar -jcf ${DEST}.tar.bz2 ${FILENAME}
    ;;
xz)
    tar -Jcf ${DEST}.tar.xz ${FILENAME} 
    ;;
*)
    echo &quot;Unknown TYPE!&quot;
    exit 9
    ;;
esac


            作者：qq_27803491 发表于2016/11/19 17:17:50 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53232202)


        阅读：132 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53232202#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]2016.11.16周三]]></title>
      <url>/2016/11/16/2016-11-16%E5%91%A8%E4%B8%89/</url>
      <content type="html"><![CDATA[<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p><em>距离找工作还有32周,实际学习时间还有26周</em></p>
<h3 id="六级考试-这次说什么也要过了六级-没时间了-come-on-得良"><a href="#六级考试-这次说什么也要过了六级-没时间了-come-on-得良" class="headerlink" title="六级考试(这次说什么也要过了六级,没时间了,come on!得良)"></a>六级考试(这次说什么也要过了六级,没时间了,come on!得良)</h3><ol>
<li>每天百词斩完成任务</li>
<li>闲时听英语听力</li>
<li>两天背一篇作文,一篇听力</li>
<li>一天两篇阅读</li>
</ol>
<h3 id="工作准备"><a href="#工作准备" class="headerlink" title="工作准备"></a>工作准备</h3><pre><code>07_01_vim编辑器详解.rar
07_02_bash脚本编程之六 使用脚本选项及组合条件测试.rar
07_03_Linux文件查找详解.rar
07_04_特殊权限SUID等详解.rar
08_01_facl及用户及Linux终端.rar
08_02_bash脚本编程之七 case语句及脚本选项进阶.rar
08_03_磁盘及文件系统管理详解之一.rar
08_04_磁盘及文件系统管理详解之二.rar
09_01_磁盘及文件系统管理详解之三.rar
09_02_磁盘及文件系统管理详解之五.rar
09_03_磁盘及文件系统管理详解之五.rar
09_04_Linux压缩及归档.rar
10_01_Raid及mdadm命令之一.rar
10_02_Raid及mdadm命令之二.rar
10_03_LVM之一.rar
10_04_LVM之二.rar
10_05_脚本编程之八 脚本完成磁盘分区格式化.rar
11_01_Linux网络配置之一.rar
11_02_Linux网络配置之二 IP报文.rar
11_03_Linux网络配置之三 TCP报文.rar
11_04_Linux网络配置之四 ifconfig及ip命令详解.rar
12_01_Linux软件管理之一 rpm.rar
12_02_Linux软件管理之二 rpm.rar
12_03_Linux软件管理之三 yum.rar
12_04_Linux软件管理之四 yum.rar
13_01_bash脚本编程之九 while循环.rar
13_02_bash脚本编程之十 函数.rar
13_03_Linux进程管理之一.rar
13_04_Linux进程管理之二.rar
14_01_Linux系统启动流程详解之一 运行级别及grub.rar
14_02_Linux系统启动流程之二 内核及init.rar
14_03_bash脚本编程之十一(Linux启动流程之三) SysV服务脚本.rar
14_04_Linux内核编译及系统裁减之一.rar
15_01_bash脚本编程之十二(Linux系统裁减之二) 系统函数库.rar
15_02_bash脚本编程之十三(Linux系统裁减之三) 系统函数库.rar
15_03_Linux系统裁减之四 自定义内核及busybox完成系统定制.rar
16_01_bash脚本编程之十四 信号捕捉及系统管理之任务计划.rar
16_02_Linux系统裁减之五.rar
16_03_Linux日志系统syslog.rar
16_04_Linux系统裁减之六 为系统添加ssh服务.rar
</code></pre><h2 id="打卡"><a href="#打卡" class="headerlink" title="打卡"></a>打卡</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们离理想中的自己越来越远,很大程度上是因为我们一点点的辜负自己. </p>
<p> 六级没有考过,任务没有完成,有些东西是靠积累得来的,不要被各种事情扰乱了生活,要在各种事情之间生活的游刃有余.</p>
<pre><code>            作者：qq_27803491 发表于2016/11/16 18:08:45 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53189469)


        阅读：70 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53189469#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]邮件服务器]]></title>
      <url>/2016/11/15/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="Mail-Server"><a href="#Mail-Server" class="headerlink" title="Mail Server"></a>Mail Server</h2><ol>
<li>SMTP(监听tcp25号端口)：发邮件</li>
<li>ESMTP</li>
<li>POP3：收邮件</li>
<li>IMAP4</li>
<li>UUCP:Unix主机复制文件的协议</li>
<li>C/S smtpd,smtp</li>
<li>MUA：邮件用户代理，</li>
</ol>
<p>Outlook，Foxmail<br>    Thundbird<br>    evolution<br>    mutt</p>
<ol>
<li>MTA:邮件传输代理，smtp服务器，sendmail，uucp，</li>
</ol>
<p>qmail,<br>    postfix:模块化设计，安全，与sendmail兼容性好，投递效率<br>    exim：<br>    exchange：（windows，异步消息协作平台）</p>
<ol>
<li>MDA</li>
</ol>
<p>procmail：<br>    maildrop：</p>
<ol>
<li>MRA：邮件取回代理（pop3，IMAP4）</li>
</ol>
<p>cyrus-imap<br>    dovecot</p>
<ol>
<li><p>SASL：简单认证安全层<br>只是一个框架，需要依靠控件来完成认证<br>cyrus-sasl<br>courier-authlib</p>
</li>
<li><p>Webmail:</p>
</li>
</ol>
<p>Openwebmail（perl）<br>    Squirrelmail    （php）<br>    Extmail（Extman）</p>
<ol>
<li><p>LDAP:Lightweight dirctory Access protocol:轻量级目录访问协议:读取速度快，写入速度慢（读快mysql一个数量级，写慢mysql一个数量级）</p>
</li>
<li><p>mysql：</p>
</li>
<li>虚拟用户：仅用于访问某服务的数字表示</li>
<li>用户：字符串，凭证</li>
</ol>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><ol>
<li>Postfix+SASL(courier-authlib)+Mysql</li>
<li>Dovecot+MySQL</li>
<li>webmail：Extmail+Extman+httpd</li>
<li><p>Postfix配置文件：<br>模块化：</p>
<pre><code>master：/etc/postfix/master.cf
mail：/etc/postfix/main.cf
</code></pre><p>postconf：配置postfix<br>-d:显示默认的配置<br>-n:修改了的配置<br>-m:显示支持的查找表类型<br>-A:显示支持的sasl客户端插件类型<br>-e:PARMATER=VALUE :更改某参数配置信息，并保存到main.cf文件中</p>
<pre><code>        作者：qq_27803491 发表于2016/11/15 21:38:12 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53177971)
</code></pre></li>
</ol>
<pre><code>        阅读：64 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53177971#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]poj3169（差分约束系统）]]></title>
      <url>/2016/11/08/poj3169%EF%BC%88%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>网址：<a href="http://poj.org/problem?id=3169" target="_blank" rel="external">http://poj.org/problem?id=3169</a></li>
<li>大概题意：有N个点，其中有ml个限制条件：点a，点b，的最长距离为d，有md个限制条件，点a,点b，的最短距离为d；点按序号顺序排，求第一个点到最后一个点的最长距离。</li>
<li>解题思路：差分约束，其实我也不太清楚什么是差分约束，大概就是将各种限制条件，逐个加入，先假设N个点间的距离都为无穷大，然后，按下列顺序，（循环）N（N，ml，md），依次加入限制条件，就可以了，加入第一种限制时，点b的原距离与a点距离加上d，比较，取最小值为b点的最新距离,,min(b(原)，a+d)。加入第二种限制时，已知b求a，min（a（原），b-d）;</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;string&amp;gt;
#include&amp;lt;cstring&amp;gt;
#include&amp;lt;cmath&amp;gt;
#include&amp;lt;algorithm&amp;gt;
#define INF 0x3f3f3f3f
using namespace std;
int d[1010];
struct MLD{
    int a,b,d;
}ML[10010];
struct MDD{
    int a,b,d;
}MD[10010];

int main()
{
    memset(d,INF,sizeof(d));
    memset(ML,0,sizeof(ML));
    memset(MD,0,sizeof(MD));
    int n,ml,md;
    scanf(&quot;%d%d%d&quot;,&amp;amp;n,&amp;amp;ml,&amp;amp;md);
    d[0]=0;
    for(int i=0;i&amp;lt;ml;i++){
        scanf(&quot;%d%d%d&quot;,&amp;amp;ML[i].a,&amp;amp;ML[i].b,&amp;amp;ML[i].d);
    }
    for(int i=0;i&amp;lt;md;i++){
        scanf(&quot;%d%d%d&quot;,&amp;amp;MD[i].a,&amp;amp;MD[i].b,&amp;amp;MD[i].d);
    }
    for(int i=0;i&amp;lt;n;i++){
        for(int j=0;j&amp;lt;n;j++){
            if(d[j+1]&amp;lt;INF)d[j]=min(d[j],d[j+1]);
        }
        for(int j=0;j&amp;lt;ml;j++){
            if(d[ML[j].a-1]&amp;lt;INF){
                d[ML[j].b-1]=min(d[ML[j].a-1]+ML[j].d,d[ML[j].b-1]);
            }
        }
        for(int j=0;j&amp;lt;md;j++){
            if(d[MD[j].b-1]&amp;lt;INF){
                d[MD[j].a-1]=min(d[MD[j].b-1]-MD[j].d,d[MD[j].a-1]);
            }
        }
    }
    if(d[0]&amp;lt;0)printf(&quot;-1\n&quot;);
    else if(d[n-1]==INF)printf(&quot;-2\n&quot;);
    else {
        printf(&quot;%d\n&quot;,d[n-1]);
    }

    return 0;
}


            作者：qq_27803491 发表于2016/11/8 12:24:18 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53080973)


        阅读：61 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53080973#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]细节（水）题codeforce#378C]]></title>
      <url>/2016/11/04/%E7%BB%86%E8%8A%82%EF%BC%88%E6%B0%B4%EF%BC%89%E9%A2%98codeforce-378C/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><p><a href="http://codeforces.com/contest/733/problem/C" target="_blank" rel="external">http://codeforces.com/contest/733/problem/C</a></p>
<h3 id="大概题意"><a href="#大概题意" class="headerlink" title="大概题意"></a>大概题意</h3><p>给你N个数，然后再给你经过合并操作后的K个数，求中间合并操作？</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><pre><code>#define _CRT_SECURE_NO_WARNINGS
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;stack&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;set&amp;gt;
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;map&amp;gt;
#include &amp;lt;queue&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;iomanip&amp;gt;
#define m0(a) memset(a,0,sizeof(a))
#define mm(a) memset(a,0x3f,sizeof(a))
#define m_1(a) memset(a,-1,sizeof(a))
#define f(i,a,b) for(i = a;i&amp;lt;=b;i++)
#define fi(i,a,b) for(i = a;i&amp;gt;=b;i--)
#define lowbit(a) ((a)&amp;amp;(-a))
#define FFR freopen(&quot;data.in&quot;,&quot;r&quot;,stdin)
#define FFW freopen(&quot;data.out&quot;,&quot;w&quot;,stdout)
#define INF 0x3f3f3f3f
#define DEBUG printf
typedef long long ll;
typedef long double ld;

const ld PI = acos(-1.0);

using namespace std;
#define SIZE 550

int a[SIZE];
int b[SIZE];

struct Chuan{
    int c_start;
    int c_end;
    int c_max;
};
struct Print{
    int num;
    char dire;
};
vector&amp;lt;Chuan&amp;gt; chuan;
queue&amp;lt;Print&amp;gt; print;
int main()
{
    int n,k;
    scanf(&quot;%d&quot;,&amp;amp;n);
    int i;
    f(i,1,n){
        scanf(&quot;%d&quot;,&amp;amp;a[i]);
    }
    scanf(&quot;%d&quot;,&amp;amp;k);
    int site=1;
    bool flag=0;
    f(i,1,k){
        scanf(&quot;%d&quot;,&amp;amp;b[i]);
        if(flag)continue;
        ll all=0;
        Chuan onechuan;
        onechuan.c_start=site;
        onechuan.c_max=0;
        int max_ele=0;
        while(all&amp;lt;b[i]){
            if(a[site]&amp;gt;max_ele){
                max_ele=a[site];
                onechuan.c_max=site;
            }
            else if(a[site]==max_ele){
                if(site-1&amp;gt;=onechuan.c_start&amp;amp;&amp;amp;a[site]&amp;gt;a[site-1]){
                    onechuan.c_max=site;
                }
                else if(site+1&amp;lt;=n&amp;amp;&amp;amp;all+a[site]+a[site+1]&amp;lt;=b[i]&amp;amp;&amp;amp;a[site]&amp;gt;a[site+1]){
                    onechuan.c_max=site;
                }
            }
            all+=a[site++];
        }
        onechuan.c_end=site-1;
        if(all!=b[i])flag=1;
        chuan.push_back(onechuan);
        //DEBUG(&quot;%d %d %d \n&quot;,onechuan.c_start,onechuan.c_max,onechuan.c_end);
    }
    if(flag){
        printf(&quot;NO\n&quot;);
        return 0;
    }
    if(site!=n+1){
        printf(&quot;NO\n&quot;);
        return 0;
    }
    i=0;
    while(!print.empty()){
        print.pop();
    }
    for(vector&amp;lt;Chuan&amp;gt;::iterator it=chuan.begin();it&amp;lt;chuan.end();it++){
        i++;
        if(it-&amp;gt;c_start==it-&amp;gt;c_end)continue;
        int pointer=it-&amp;gt;c_max;
        if(pointer-1&amp;gt;=it-&amp;gt;c_start&amp;amp;&amp;amp;a[pointer]&amp;gt;a[pointer-1]){
            while(pointer&amp;gt;it-&amp;gt;c_start){
                Print oneprint;
                oneprint.num=i+pointer-it-&amp;gt;c_start;
                pointer--;
                oneprint.dire=&#39;L&#39;;
                print.push(oneprint);
            }
            pointer=it-&amp;gt;c_max;
            while(pointer&amp;lt;it-&amp;gt;c_end){
                Print oneprint;
                oneprint.num=i;
                pointer++;
                oneprint.dire=&#39;R&#39;;
                print.push(oneprint);
            }

        }
        else if(pointer+1&amp;lt;=it-&amp;gt;c_end&amp;amp;&amp;amp;a[pointer]&amp;gt;a[pointer+1]){
            while(pointer&amp;lt;it-&amp;gt;c_end){
                Print oneprint;
                oneprint.num=i+it-&amp;gt;c_max-it-&amp;gt;c_start;
                //DEBUG(&quot;hello world!\n&quot;);
                pointer++;
                oneprint.dire=&#39;R&#39;;
                print.push(oneprint);
            }
            pointer=it-&amp;gt;c_max;
            while(pointer&amp;gt;it-&amp;gt;c_start){
                Print oneprint;
                oneprint.num=i+pointer-it-&amp;gt;c_start;
                pointer--;
                oneprint.dire=&#39;L&#39;;
                print.push(oneprint);
            }
        }
        else {
            printf(&quot;NO\n&quot;);
            while(!print.empty()){
                print.pop();
            }
            return 0;
        }
        //DEBUG(&quot;%d %d %d\n&quot;,it-&amp;gt;c_start,it-&amp;gt;c_max,it-&amp;gt;c_end);
    }
    puts(&quot;YES&quot;);
    while(!print.empty()){
        Print oneprint=print.front();
        print.pop();
        printf(&quot;%d %c\n&quot;,oneprint.num,oneprint.dire);
    }
    return 0;
}
</code></pre><h2 id="经验教训"><a href="#经验教训" class="headerlink" title="经验教训"></a>经验教训</h2><ol>
<li>你离AC还差N个细节！</li>
<li>其实还是心不够静，思维跟不上，静下来后，你的智商会变高！</li>
<li><p>仔细阅读题意，然后注意关掉DEBUG！</p>
<pre><code>        作者：qq_27803491 发表于2016/11/4 1:17:06 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53029288)
</code></pre></li>
</ol>
<pre><code>        阅读：89 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53029288#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]AC必备]]></title>
      <url>/2016/11/03/AC%E5%BF%85%E5%A4%87/</url>
      <content type="html"><![CDATA[<pre><code>#define _CRT_SECURE_NO_WARNINGS
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;stack&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;set&amp;gt;
#include &amp;lt;cmath&amp;gt;
#include &amp;lt;map&amp;gt;
#include &amp;lt;queue&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;iomanip&amp;gt;
#define m0(a) memset(a,0,sizeof(a))
#define mm(a) memset(a,0x3f,sizeof(a))
#define m_1(a) memset(a,-1,sizeof(a))
#define f(i,a,b) for(int i = a;i&amp;lt;=b;i++)
#define fi(i,a,b) for(int i = a;i&amp;gt;=b;i--)
#define lowbit(a) ((a)&amp;amp;(-a))
#define FFR freopen(&quot;data.in&quot;,&quot;r&quot;,stdin)
#define FFW freopen(&quot;data.out&quot;,&quot;w&quot;,stdout)
#define INF 0x3f3f3f3f
#define DEBUG //printf
typedef long long ll;
typedef long double ld;

const ld PI = acos(-1.0);

using namespace std;
#define SIZE (1)

int aa[SIZE];

int main()
{

    return 0;
}
</code></pre><p>写每道题都会用到，把他们做成模版，每次就没必要都打一遍了，节省了时间。</p>
<pre><code>            作者：qq_27803491 发表于2016/11/3 23:50:06 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53028318)


        阅读：66 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53028318#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]2016-11-3 周四]]></title>
      <url>/2016/11/03/2016-11-3-%E5%91%A8%E5%9B%9B/</url>
      <content type="html"><![CDATA[<h2 id="计划（这周和下周）"><a href="#计划（这周和下周）" class="headerlink" title="计划（这周和下周）"></a>计划（这周和下周）</h2><p>这两周，事情比较多，搞事情嘛，就是要有事做才好，不怕事，喜~事 </p>
<p>1. 下周四数据库期中考试(10号) </p>
<p>2. 下周六、日ACM-ICPC北京赛区比赛（12、13号） </p>
<p>3. 下下周一操作系统考试（14号） </p>
<p>4. 周日复习操作系统和数据库。 </p>
<p>5. 每天至少2到中级难度的题，有算法的能写到博客上的。 </p>
<p>6. 面试时会考的算法掌握好。（不只是面试时，基本的算法掌握，熟练）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间：11.14</p>
<ol>
<li>acm_reginal 北京没有拿奖，真的差的很远，水平好差，要专注的去搞一件事情，用尽全力，否则，只有努力，没有成果，白受苦。</li>
<li>操作系统考的很差，数据库考的还可以。</li>
</ol>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><pre><code>为什么   “后悔没有早点知道”  ，就算你知道的早了，你没有亲身体验过，你相信么，好了，现在亲身体验了，后果自己也吃了。所以，要变的优秀，要想成功，就得去坚信那些道理，因为那是前人总结出来的经验，这样才能少走弯路。


            作者：qq_27803491 发表于2016/11/3 20:25:06 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53025252)


        阅读：54 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53025252#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]hdu5912 简单公式迭代]]></title>
      <url>/2016/11/02/hdu5912-%E7%AE%80%E5%8D%95%E5%85%AC%E5%BC%8F%E8%BF%AD%E4%BB%A3/</url>
      <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5912" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5912</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstring&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;algorithm&amp;gt;

#define ll long long
#define DEBUG printf

using namespace std;
ll GCD(ll aa,ll bb)
{
    ll i,t;
    if(aa&amp;lt;bb){
        t=aa;
        aa=bb;
        bb=t;
    }
    while(aa%bb!=0){
        i=aa%bb;
        if(bb&amp;gt;i){
            aa=bb;
            bb=i;
        }
        else aa=i;
    }
    return bb;
 }
void solve(ll &amp;amp;mu,ll &amp;amp;zi,int *a,int *b,int n){
    for(int i=n-1;i&amp;gt;=1;i--){
        ll tmp_mu=mu,tmp_zi=zi;
        mu=tmp_zi+tmp_mu*a[i];
        zi=tmp_mu*b[i];
        ll yueshu=GCD(mu,zi);
        mu/=yueshu;
        zi/=yueshu;
        //DEBUG(&quot;%d:%lld/%lld\n&quot;,i,zi,mu);
    }
}

int main()
{
    int t;
    scanf(&quot;%d&quot;,&amp;amp;t);
    for(int tt=1;tt&amp;lt;=t;tt++){
        int a[11],b[11],n;
        scanf(&quot;%d&quot;,&amp;amp;n);
        memset(a,0,sizeof(a));
        memset(b,0,sizeof(b));
        for(int i=1;i&amp;lt;=n;i++){
            scanf(&quot;%d&quot;,&amp;amp;a[i]);
        }
        for(int i=1;i&amp;lt;=n;i++){
            scanf(&quot;%d&quot;,&amp;amp;b[i]);
        }
        ll mu=a[n],zi=b[n];
        solve(mu,zi,a,b,n);
        int yueshu = GCD(mu,zi);
        mu/=yueshu;
        zi/=yueshu;
        printf(&quot;Case #%d: %lld %lld\n&quot;,tt,zi,mu);
    }
    return 0;
 }
/*
1
8
1 2 3 4 5 6 7 8
9 8 7 6 5 4 3 2

*/


            作者：qq_27803491 发表于2016/11/2 10:41:53 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53005481)


        阅读：48 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53005481#comments)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[[原]51nod 1416两点DFS]]></title>
      <url>/2016/11/01/51nod-1416%E4%B8%A4%E7%82%B9DFS/</url>
      <content type="html"><![CDATA[<h2 id="题目网址"><a href="#题目网址" class="headerlink" title="题目网址"></a>题目网址</h2><p><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1416" target="_blank" rel="external">http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1416</a></p>
<p>简单的深搜</p>
<h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><pre><code>#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstring&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;algorithm&amp;gt;

#define ll long long  
#define DEBUG print
using namespace std;

bool hash[51][51];
char tu[55][55];
int path[55][55];
bool dfs(int n,int m,int i,int j,int count,char c)
{
//  DEBUG(&quot;%c %d %d\n&quot;,c,i,j);
    hash[i][j]=0;
    path[i][j]=count;
    if(j+1&amp;lt;m&amp;amp;&amp;amp;tu[i][j+1]==c){
        if(path[i][j+1]&amp;lt;0){
            if(dfs(n,m,i,j+1,count+1,c))return true;
        }
        else {
            if(path[i][j]-path[i][j+1]&amp;gt;=3)return true;
        } 
    }
    if(i+1&amp;lt;n&amp;amp;&amp;amp;tu[i+1][j]==c){
        if(path[i+1][j]&amp;lt;0){
            if(dfs(n,m,i+1,j,count+1,c))return true;
        }
        else {
            if(path[i][j]-path[i+1][j]&amp;gt;=3)return true;
        } 
    }
    if(j-1&amp;gt;=0&amp;amp;&amp;amp;tu[i][j-1]==c){
        if(path[i][j-1]&amp;lt;0){
            if(dfs(n,m,i,j-1,count+1,c))return true;
        }
        else {
            if(path[i][j]-path[i][j-1]&amp;gt;=3)return true;
        } 
    }
    if(i-1&amp;gt;=0&amp;amp;&amp;amp;tu[i-1][j]==c){
        if(path[i-1][j]&amp;lt;0){
            if(dfs(n,m,i-1,j,count+1,c))return true;
        }
        else {
            if(path[i][j]-path[i-1][j]&amp;gt;=3)return true;
        } 
    }
    return false;
}
int main()
{
//  memset(hash,1,sizeof(hash));

    memset(tu,0,sizeof(tu));
//  memset(path,-1,sizeof(path));
    int n,m;
    scanf(&quot;%d%d&quot;,&amp;amp;n,&amp;amp;m);
    getchar();
    for(int i=0;i&amp;lt;n;i++){
        for(int j=0;j&amp;lt;m;j++){
            hash[i][j]=1;
        }
    }
    for(int i=0;i&amp;lt;n;i++){
        for(int j=0;j&amp;lt;m;j++){
            path[i][j]=-1;
        }
    }
    for(int i=0;i&amp;lt;n;i++){
        for(int j=0;j&amp;lt;m;j++){
            scanf(&quot;%c&quot;,&amp;amp;tu[i][j]);
        }
        getchar();
    }
    bool ansflag=0;
    for(int i=0;i&amp;lt;n;i++){
        for(int j=0;j&amp;lt;m;j++){
            if(!hash[i][j])continue;
            else {
                if(dfs(n,m,i,j,0,tu[i][j])){
                    ansflag=1;
                    break;
                }
            }
        }
        if(ansflag)break;
    }

    if(ansflag)printf(&quot;Yes\n&quot;);
    else printf(&quot;No\n&quot;);
 } 


            作者：qq_27803491 发表于2016/11/1 21:25:29 [原文链接](http://blog.csdn.net/qq_27803491/article/details/53000918)


        阅读：49 评论：0 [查看评论](http://blog.csdn.net/qq_27803491/article/details/53000918#comments)
</code></pre>]]></content>
      
        
    </entry>
    
  
  
</search>
